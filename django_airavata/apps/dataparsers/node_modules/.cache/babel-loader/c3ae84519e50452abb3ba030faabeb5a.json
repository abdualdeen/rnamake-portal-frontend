{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/InputDataObjectType.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/InputDataObjectType.js","mtime":1638641844319},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _typeof from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport _classCallCheck from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport BaseModel from \"./BaseModel\";\nimport DataType from \"./DataType\";\nimport BooleanExpressionEvaluator from \"./dependencies/BooleanExpressionEvaluator\";\nimport uuidv4 from \"uuid/v4\";\nimport ValidatorFactory from \"./validators/ValidatorFactory\";\nvar FIELDS = [\"name\", \"value\", {\n  name: \"type\",\n  type: DataType,\n  default: DataType.STRING\n}, \"applicationArgument\", {\n  name: \"standardInput\",\n  type: \"boolean\",\n  default: false\n}, \"userFriendlyDescription\", \"metaData\", \"inputOrder\", {\n  name: \"isRequired\",\n  type: \"boolean\",\n  default: false\n}, {\n  name: \"requiredToAddedToCommandLine\",\n  type: \"boolean\",\n  default: false\n}, {\n  name: \"dataStaged\",\n  type: \"boolean\",\n  default: false\n}, \"storageResourceId\", {\n  name: \"isReadOnly\",\n  type: \"boolean\",\n  default: false\n}, \"overrideFilename\"];\nvar IS_REQUIRED_DEFAULT = \"This field is required.\";\nvar IS_REQUIRED_URI_COLLECTION = \"At least one file must be selected.\";\n\nvar InputDataObjectType =\n/*#__PURE__*/\nfunction (_BaseModel) {\n  _inherits(InputDataObjectType, _BaseModel);\n\n  function InputDataObjectType() {\n    var _this;\n\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, InputDataObjectType);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InputDataObjectType).call(this, FIELDS, data));\n    _this._key = data.key ? data.key : uuidv4();\n    _this.show = true;\n    return _this;\n  }\n\n  _createClass(InputDataObjectType, [{\n    key: \"_getMetadata\",\n    value: function _getMetadata() {\n      // metaData could really be anything, here we expect it to be an object\n      // so safely check if it is first\n      if (this.metaData && _typeof(this.metaData) === \"object\") {\n        return this.metaData;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n      var inputValue = typeof value != \"undefined\" ? value : this.value;\n      var results = {}; // Skip running validations when the input isn't shown\n\n      if (!this.show) {\n        return results;\n      }\n\n      var valueErrorMessages = [];\n\n      if (this.isRequired && this.isEmpty(inputValue)) {\n        if (this.type === DataType.URI_COLLECTION) {\n          valueErrorMessages.push(IS_REQUIRED_URI_COLLECTION);\n        } else {\n          valueErrorMessages.push(IS_REQUIRED_DEFAULT);\n        }\n      } // Run through any validations if configured\n\n\n      if (this.editorValidations.length > 0) {\n        var validatorFactory = new ValidatorFactory();\n        valueErrorMessages = valueErrorMessages.concat(validatorFactory.validate(this.editorValidations, inputValue));\n      }\n\n      if (valueErrorMessages.length > 0) {\n        results[\"value\"] = valueErrorMessages;\n      }\n\n      return results;\n    }\n    /**\n     * Evaluate dependencies on the values of other application inputs.\n     */\n\n  }, {\n    key: \"evaluateDependencies\",\n    value: function evaluateDependencies(inputValues) {\n      if (Object.keys(this.editorDependencies).length > 0) {\n        var booleanExpressionEvaluator = new BooleanExpressionEvaluator(inputValues);\n\n        if (\"show\" in this.editorDependencies) {\n          this.show = booleanExpressionEvaluator.evaluate(this.editorDependencies.show);\n\n          if (\"showOptions\" in this.editorDependencies) {\n            if (\"isRequired\" in this.editorDependencies.showOptions && this.editorDependencies.showOptions.isRequired) {\n              this.isRequired = this.show;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"key\",\n    get: function get() {\n      return this._key;\n    }\n    /**\n     * Get the UI component id for the editor component to use for this input.\n     * Returns null if there is no editor UI component id.\n     *\n     * The expected JSON schema for the editor UI component id is the following:\n     * {\n     *   \"editor\": {\n     *     \"ui-component-id\": \"input-editor-component-id\",\n     *     ...\n     *   }\n     * }\n     */\n\n  }, {\n    key: \"editorUIComponentId\",\n    get: function get() {\n      var metadata = this._getMetadata();\n\n      if (metadata && \"editor\" in metadata && \"ui-component-id\" in metadata[\"editor\"]) {\n        return metadata[\"editor\"][\"ui-component-id\"];\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Get the configuration for the editor component, which will be available\n     * to the editor component for customizing its look and functionality.\n     * Returns empty object if there is no editor config.\n     *\n     * The expected JSON schema for the editor config is the following:\n     * {\n     *   \"editor\": {\n     *     \"config\": {\n     *       ... anything can go here ...\n     *     }\n     *     ...\n     *   }\n     * }\n     */\n\n  }, {\n    key: \"editorConfig\",\n    get: function get() {\n      var metadata = this._getMetadata();\n\n      if (metadata && \"editor\" in metadata && \"config\" in metadata[\"editor\"]) {\n        return metadata[\"editor\"][\"config\"];\n      } else {\n        return {};\n      }\n    }\n    /**\n     * Get the validations for the editor component. See ValidatorFactory for a\n     * list of available validations. Returns empty array if there are no\n     * validations.\n     *\n     * The expected JSON schema for the editor validations is the following:\n     * {\n     *   \"editor\": {\n     *     \"validations\": [\n     *       {\n     *         \"type\": \"validation-name\",\n     *         \"value\": \"some value for configuring validation, passed to validator constructor\",\n     *         \"message\": \"(Optional) custom validation error message\"\n     *       },\n     *       ... additional validations go here ...\n     *     ]\n     *     ...\n     *   }\n     * }\n     *\n     * Note: \"message\" is optional for all validations.\n     */\n\n  }, {\n    key: \"editorValidations\",\n    get: function get() {\n      var metadata = this._getMetadata();\n\n      if (metadata && \"editor\" in metadata && \"validations\" in metadata[\"editor\"]) {\n        return metadata[\"editor\"][\"validations\"];\n      } else {\n        return [];\n      }\n    }\n    /**\n     * Get the dependencies for the editor component. Returns empty object if\n     * there are no dependencies. See evaluateDependencies for a list of\n     * available kinds of dependencies.\n     *\n     * The expected JSON schema for the editor validations is the following:\n     * {\n     *   \"editor\": {\n     *     \"dependencies\": {\n     *       \"show\": {\n     *         \"AND\": [              // Boolean operator (\"AND\", \"OR\")\n     *           \"INPUT_1\": {        // Name of other application input\n     *             \"type\": \"equals\", // Name of comparison type\n     *             \"value\": \"1\"      // Value to compare with\n     *           },\n     *           \"NOT\": {            // \"NOT\" is given a single input comparison or \"AND\" or \"OR\" expression\n     *             \"INPUT_2\": {\n     *               ...\n     *             }\n     *           }\n     *           ... additional boolean expressions (\"AND\", \"OR\", \"NOT\")\n     *           ... additional application input comparisons\n     *         ]\n     *       },\n     *       \"showOptions\": {        // Optional\n     *         \"isRequired\": true    // Set isRequired to true when shown, false otherwise (Note:\n     *                               // REST API automatically adds and updates this metadata as needed)\n     *       }\n     *     }\n     *   }\n     * }\n     */\n\n  }, {\n    key: \"editorDependencies\",\n    get: function get() {\n      var metadata = this._getMetadata();\n\n      if (metadata && \"editor\" in metadata && \"dependencies\" in metadata[\"editor\"]) {\n        return metadata[\"editor\"][\"dependencies\"];\n      } else {\n        return {};\n      }\n    }\n  }]);\n\n  return InputDataObjectType;\n}(BaseModel);\n\nexport { InputDataObjectType as default };\nInputDataObjectType.VALID_DATA_TYPES = [DataType.STRING, DataType.INTEGER, DataType.FLOAT, DataType.URI, DataType.URI_COLLECTION];",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/InputDataObjectType.js"],"names":["BaseModel","DataType","BooleanExpressionEvaluator","uuidv4","ValidatorFactory","FIELDS","name","type","default","STRING","IS_REQUIRED_DEFAULT","IS_REQUIRED_URI_COLLECTION","InputDataObjectType","data","_key","key","show","metaData","value","undefined","inputValue","results","valueErrorMessages","isRequired","isEmpty","URI_COLLECTION","push","editorValidations","length","validatorFactory","concat","validate","inputValues","Object","keys","editorDependencies","booleanExpressionEvaluator","evaluate","showOptions","metadata","_getMetadata","VALID_DATA_TYPES","INTEGER","FLOAT","URI"],"mappings":"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","sourcesContent":["import BaseModel from \"./BaseModel\";\nimport DataType from \"./DataType\";\nimport BooleanExpressionEvaluator from \"./dependencies/BooleanExpressionEvaluator\";\nimport uuidv4 from \"uuid/v4\";\nimport ValidatorFactory from \"./validators/ValidatorFactory\";\n\nconst FIELDS = [\n  \"name\",\n  \"value\",\n  {\n    name: \"type\",\n    type: DataType,\n    default: DataType.STRING,\n  },\n  \"applicationArgument\",\n  {\n    name: \"standardInput\",\n    type: \"boolean\",\n    default: false,\n  },\n  \"userFriendlyDescription\",\n  \"metaData\",\n  \"inputOrder\",\n  {\n    name: \"isRequired\",\n    type: \"boolean\",\n    default: false,\n  },\n  {\n    name: \"requiredToAddedToCommandLine\",\n    type: \"boolean\",\n    default: false,\n  },\n  {\n    name: \"dataStaged\",\n    type: \"boolean\",\n    default: false,\n  },\n  \"storageResourceId\",\n  {\n    name: \"isReadOnly\",\n    type: \"boolean\",\n    default: false,\n  },\n  \"overrideFilename\",\n];\n\nconst IS_REQUIRED_DEFAULT = \"This field is required.\";\nconst IS_REQUIRED_URI_COLLECTION = \"At least one file must be selected.\";\n\nexport default class InputDataObjectType extends BaseModel {\n  constructor(data = {}) {\n    super(FIELDS, data);\n    this._key = data.key ? data.key : uuidv4();\n    this.show = true;\n  }\n\n  get key() {\n    return this._key;\n  }\n\n  /**\n   * Get the UI component id for the editor component to use for this input.\n   * Returns null if there is no editor UI component id.\n   *\n   * The expected JSON schema for the editor UI component id is the following:\n   * {\n   *   \"editor\": {\n   *     \"ui-component-id\": \"input-editor-component-id\",\n   *     ...\n   *   }\n   * }\n   */\n  get editorUIComponentId() {\n    const metadata = this._getMetadata();\n    if (\n      metadata &&\n      \"editor\" in metadata &&\n      \"ui-component-id\" in metadata[\"editor\"]\n    ) {\n      return metadata[\"editor\"][\"ui-component-id\"];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the configuration for the editor component, which will be available\n   * to the editor component for customizing its look and functionality.\n   * Returns empty object if there is no editor config.\n   *\n   * The expected JSON schema for the editor config is the following:\n   * {\n   *   \"editor\": {\n   *     \"config\": {\n   *       ... anything can go here ...\n   *     }\n   *     ...\n   *   }\n   * }\n   */\n  get editorConfig() {\n    const metadata = this._getMetadata();\n    if (metadata && \"editor\" in metadata && \"config\" in metadata[\"editor\"]) {\n      return metadata[\"editor\"][\"config\"];\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * Get the validations for the editor component. See ValidatorFactory for a\n   * list of available validations. Returns empty array if there are no\n   * validations.\n   *\n   * The expected JSON schema for the editor validations is the following:\n   * {\n   *   \"editor\": {\n   *     \"validations\": [\n   *       {\n   *         \"type\": \"validation-name\",\n   *         \"value\": \"some value for configuring validation, passed to validator constructor\",\n   *         \"message\": \"(Optional) custom validation error message\"\n   *       },\n   *       ... additional validations go here ...\n   *     ]\n   *     ...\n   *   }\n   * }\n   *\n   * Note: \"message\" is optional for all validations.\n   */\n  get editorValidations() {\n    const metadata = this._getMetadata();\n    if (\n      metadata &&\n      \"editor\" in metadata &&\n      \"validations\" in metadata[\"editor\"]\n    ) {\n      return metadata[\"editor\"][\"validations\"];\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Get the dependencies for the editor component. Returns empty object if\n   * there are no dependencies. See evaluateDependencies for a list of\n   * available kinds of dependencies.\n   *\n   * The expected JSON schema for the editor validations is the following:\n   * {\n   *   \"editor\": {\n   *     \"dependencies\": {\n   *       \"show\": {\n   *         \"AND\": [              // Boolean operator (\"AND\", \"OR\")\n   *           \"INPUT_1\": {        // Name of other application input\n   *             \"type\": \"equals\", // Name of comparison type\n   *             \"value\": \"1\"      // Value to compare with\n   *           },\n   *           \"NOT\": {            // \"NOT\" is given a single input comparison or \"AND\" or \"OR\" expression\n   *             \"INPUT_2\": {\n   *               ...\n   *             }\n   *           }\n   *           ... additional boolean expressions (\"AND\", \"OR\", \"NOT\")\n   *           ... additional application input comparisons\n   *         ]\n   *       },\n   *       \"showOptions\": {        // Optional\n   *         \"isRequired\": true    // Set isRequired to true when shown, false otherwise (Note:\n   *                               // REST API automatically adds and updates this metadata as needed)\n   *       }\n   *     }\n   *   }\n   * }\n   */\n  get editorDependencies() {\n    const metadata = this._getMetadata();\n    if (\n      metadata &&\n      \"editor\" in metadata &&\n      \"dependencies\" in metadata[\"editor\"]\n    ) {\n      return metadata[\"editor\"][\"dependencies\"];\n    } else {\n      return {};\n    }\n  }\n\n  _getMetadata() {\n    // metaData could really be anything, here we expect it to be an object\n    // so safely check if it is first\n    if (this.metaData && typeof this.metaData === \"object\") {\n      return this.metaData;\n    } else {\n      return null;\n    }\n  }\n\n  validate(value = undefined) {\n    let inputValue = typeof value != \"undefined\" ? value : this.value;\n    let results = {};\n    // Skip running validations when the input isn't shown\n    if (!this.show) {\n      return results;\n    }\n    let valueErrorMessages = [];\n    if (this.isRequired && this.isEmpty(inputValue)) {\n      if (this.type === DataType.URI_COLLECTION) {\n        valueErrorMessages.push(IS_REQUIRED_URI_COLLECTION);\n      } else {\n        valueErrorMessages.push(IS_REQUIRED_DEFAULT);\n      }\n    }\n    // Run through any validations if configured\n    if (this.editorValidations.length > 0) {\n      const validatorFactory = new ValidatorFactory();\n      valueErrorMessages = valueErrorMessages.concat(\n        validatorFactory.validate(this.editorValidations, inputValue)\n      );\n    }\n    if (valueErrorMessages.length > 0) {\n      results[\"value\"] = valueErrorMessages;\n    }\n    return results;\n  }\n\n  /**\n   * Evaluate dependencies on the values of other application inputs.\n   */\n  evaluateDependencies(inputValues) {\n    if (Object.keys(this.editorDependencies).length > 0) {\n      const booleanExpressionEvaluator = new BooleanExpressionEvaluator(\n        inputValues\n      );\n      if (\"show\" in this.editorDependencies) {\n        this.show = booleanExpressionEvaluator.evaluate(\n          this.editorDependencies.show\n        );\n        if (\"showOptions\" in this.editorDependencies) {\n          if (\n            \"isRequired\" in this.editorDependencies.showOptions &&\n            this.editorDependencies.showOptions.isRequired\n          ) {\n            this.isRequired = this.show;\n          }\n        }\n      }\n    }\n  }\n}\n\nInputDataObjectType.VALID_DATA_TYPES = [\n  DataType.STRING,\n  DataType.INTEGER,\n  DataType.FLOAT,\n  DataType.URI,\n  DataType.URI_COLLECTION,\n];\n"]}]}