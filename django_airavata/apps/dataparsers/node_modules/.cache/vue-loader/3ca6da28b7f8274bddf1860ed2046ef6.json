{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/ShareButton.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/ShareButton.vue","mtime":1638641844579},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { models, services } from \"django-airavata-api\";\nimport SharedEntityEditor from \"./SharedEntityEditor.vue\";\n\nexport default {\n  name: \"share-button\",\n  props: {\n    entityId: String,\n    parentEntityId: String,\n    parentEntityLabel: {\n      type: String,\n      default: \"Parent\",\n    },\n    sharedEntity: models.SharedEntity,\n    autoAddDefaultGatewayUsersGroup: {\n      type: Boolean,\n      default: true,\n    },\n    autoAddAdminGroups: {\n      type: Boolean,\n      default: true,\n    },\n    disallowEditingAdminGroups: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  components: {\n    SharedEntityEditor,\n  },\n  data: function () {\n    return {\n      localSharedEntity: null,\n      parentSharedEntity: null,\n      sharedEntityCopy: null,\n      defaultGatewayUsersGroup: null,\n      adminsGroup: null,\n      readOnlyAdminsGroup: null,\n      users: null,\n      groups: null,\n    };\n  },\n  computed: {\n    title: function () {\n      return (\n        \"Shared with \" +\n        this.groupsCount +\n        \" groups\" +\n        (this.groupsCount > 0 ? \" (\" + this.groupNames.join(\", \") + \")\" : \"\") +\n        \" and \" +\n        this.usersCount +\n        \" users\" +\n        (this.usersCount > 0 ? \" (\" + this.userNames.join(\", \") + \")\" : \"\")\n      );\n    },\n    usersCount: function () {\n      return this.combinedUsers.length;\n    },\n    userNames: function () {\n      return this.combinedUsers.map((u) => u.firstName + \" \" + u.lastName);\n    },\n    combinedUsers() {\n      const users = [];\n      if (this.localSharedEntity && this.localSharedEntity.userPermissions) {\n        users.push(\n          ...this.localSharedEntity.userPermissions.map((up) => up.user)\n        );\n      }\n      if (this.parentSharedEntity && this.parentSharedEntity.userPermissions) {\n        users.push(\n          ...this.parentSharedEntity.userPermissions.map((up) => up.user)\n        );\n        if (this.parentEntityOwner) {\n          users.push(this.parentEntityOwner);\n        }\n      }\n      return users;\n    },\n    filteredGroupPermissions: function () {\n      if (this.localSharedEntity && this.localSharedEntity.groupPermissions) {\n        return this.localSharedEntity.groupPermissions;\n      } else {\n        return [];\n      }\n    },\n    combinedGroups() {\n      const groups = [];\n      groups.push(...this.filteredGroupPermissions.map((gp) => gp.group));\n      if (this.parentSharedEntity && this.parentSharedEntity.groupPermissions) {\n        groups.push(\n          ...this.parentSharedEntity.groupPermissions.map((gp) => gp.group)\n        );\n      }\n      return groups;\n    },\n    groupNames: function () {\n      return this.combinedGroups.map((g) => g.name);\n    },\n    groupsCount: function () {\n      return this.combinedGroups.length;\n    },\n    totalCount: function () {\n      return this.usersCount + this.groupsCount;\n    },\n    shareButtonEnabled: function () {\n      // Enable share button if new entity or user is the entity's owner\n      return (\n        this.localSharedEntity &&\n        (!this.localSharedEntity.entityId ||\n          this.localSharedEntity.isOwner ||\n          this.localSharedEntity.hasSharingPermission)\n      );\n    },\n    hasParentSharedEntityPermissions() {\n      return (\n        this.parentSharedEntity &&\n        (this.parentSharedEntity.userPermissions.length > 0 ||\n          this.parentSharedEntity.groupPermissions.length > 0)\n      );\n    },\n    parentEntityOwner() {\n      // Only show the parent entity owner when not the same as current user\n      if (this.parentSharedEntity && !this.parentSharedEntity.isOwner) {\n        return this.parentSharedEntity.owner;\n      } else {\n        return null;\n      }\n    },\n  },\n  methods: {\n    initialize: function () {\n      // First loaded needed data and then process it. This is to prevent one\n      // call to initialize clobbering a later call to initialize. That is, do\n      // all of the async stuff first and then make decisions based on the\n      // values of the props.\n      const promises = [];\n      let loadedSharedEntity = null;\n      if (this.entityId) {\n        promises.push(\n          this.loadSharedEntity(this.entityId).then(\n            (sharedEntity) => (loadedSharedEntity = sharedEntity)\n          )\n        );\n      }\n      if (\n        !this.entityId &&\n        (!this.sharedEntity || !this.sharedEntity.entityId) &&\n        (!this.defaultGatewayUsersGroup ||\n          !this.adminsGroup ||\n          !this.readOnlyAdminsGroup)\n      ) {\n        promises.push(\n          services.GroupService.list({ limit: -1 }).then((groups) => {\n            this.groups = groups;\n            this.defaultGatewayUsersGroup = groups.find(\n              (g) => g.isDefaultGatewayUsersGroup\n            );\n            this.adminsGroup = groups.find((g) => g.isGatewayAdminsGroup);\n            this.readOnlyAdminsGroup = groups.find(\n              (g) => g.isReadOnlyGatewayAdminsGroup\n            );\n          })\n        );\n      }\n      if (this.parentEntityId) {\n        promises.push(\n          this.loadSharedEntity(this.parentEntityId).then(\n            (sharedEntity) => (this.parentSharedEntity = sharedEntity)\n          )\n        );\n      }\n      Promise.all(promises).then(() => {\n        if (this.sharedEntity) {\n          this.localSharedEntity = this.sharedEntity.clone();\n        } else if (this.entityId) {\n          this.localSharedEntity = loadedSharedEntity;\n        } else {\n          this.localSharedEntity = new models.SharedEntity();\n        }\n        if (\n          !this.localSharedEntity.entityId &&\n          this.autoAddDefaultGatewayUsersGroup &&\n          this.defaultGatewayUsersGroup\n        ) {\n          this.localSharedEntity.addGroup({\n            group: this.defaultGatewayUsersGroup,\n          });\n          this.emitUnsavedEvent();\n        }\n        if (\n          !this.localSharedEntity.entityId &&\n          this.autoAddAdminGroups &&\n          this.adminsGroup &&\n          this.readOnlyAdminsGroup\n        ) {\n          this.localSharedEntity.addGroup({\n            group: this.adminsGroup,\n            permissionType: models.ResourcePermissionType.MANAGE_SHARING,\n          });\n          this.localSharedEntity.addGroup({ group: this.readOnlyAdminsGroup });\n          this.emitUnsavedEvent();\n        }\n        if (\n          this.localSharedEntity.entityId &&\n          this.autoAddAdminGroups &&\n          this.localSharedEntity.isOwner\n        ) {\n          // AIRAVATA-3297 Admins group used to get WRITE permission, but the\n          // new default is MANAGE_SHARING so update if necessary\n          // Since autoAddAdminGroups is true, there should already be an adminsGroupPermission\n          const adminsGroupPermission = this.localSharedEntity.groupPermissions.find(\n            (gp) => gp.group.isGatewayAdminsGroup\n          );\n          if (\n            adminsGroupPermission &&\n            adminsGroupPermission.permissionType !==\n              models.ResourcePermissionType.MANAGE_SHARING\n          ) {\n            adminsGroupPermission.permissionType =\n              models.ResourcePermissionType.MANAGE_SHARING;\n            this.emitUnsavedEvent();\n          }\n        }\n      });\n    },\n    loadSharedEntity(entityId) {\n      return services.SharedEntityService.retrieve({ lookup: entityId });\n    },\n    /**\n     * Merge the persisted SharedEntity with the local SharedEntity\n     * instance and save it, returning a Promise.\n     */\n    mergeAndSave: function (entityId) {\n      return services.SharedEntityService.merge({\n        lookup: entityId,\n        data: this.localSharedEntity,\n      }).then((sharedEntity) => {\n        this.localSharedEntity = sharedEntity;\n        this.emitSavedEvent();\n      });\n    },\n    saveSharedEntity: function () {\n      // If we don't have an entityId we can't create a SharedEntity. Instead,\n      // we'll just emit 'unsaved' to let parent know that sharing has changed.\n      // It will be up to parent to call `mergeAndSave(entityId)` once there is\n      // an entityId or merge the sharedEntity itself.\n      if (this.localSharedEntity.entityId) {\n        services.SharedEntityService.update({\n          data: this.localSharedEntity,\n          lookup: this.localSharedEntity.entityId,\n        }).then((sharedEntity) => {\n          this.localSharedEntity = sharedEntity;\n          this.emitSavedEvent();\n        });\n      } else {\n        this.emitUnsavedEvent();\n      }\n    },\n    emitSavedEvent() {\n      this.$emit(\"saved\", this.localSharedEntity);\n    },\n    emitUnsavedEvent() {\n      this.$emit(\"unsaved\", this.localSharedEntity);\n    },\n    cancelEditSharedEntity: function () {\n      this.localSharedEntity = this.sharedEntityCopy;\n    },\n    openSharingSettingsModal: function () {\n      this.$refs.sharingSettingsModal.show();\n    },\n    showSharingSettingsModal: function () {\n      this.sharedEntityCopy = this.localSharedEntity.clone();\n      if (!this.users) {\n        services.ServiceFactory.service(\"UserProfiles\")\n          .list()\n          .then((users) => (this.users = users));\n      }\n      if (!this.groups) {\n        services.GroupService.list({ limit: -1 }).then((groups) => {\n          this.groups = groups;\n        });\n      }\n    },\n  },\n  mounted: function () {\n    // Only run initialize when mounted since it may add the default gateways\n    // group automatically (autoAddDefaultGatewayUsersGroup)\n    this.initialize();\n  },\n  watch: {\n    sharedEntity(newSharedEntity) {\n      this.localSharedEntity = newSharedEntity\n        ? newSharedEntity.clone()\n        : new models.SharedEntity();\n    },\n    entityId(newEntityId, oldEntityId) {\n      if (newEntityId && newEntityId !== oldEntityId) {\n        this.loadSharedEntity(newEntityId).then(\n          (sharedEntity) => (this.localSharedEntity = sharedEntity)\n        );\n      }\n    },\n    parentEntityId(newParentEntityId) {\n      this.loadSharedEntity(newParentEntityId).then((sharedEntity) => {\n        this.parentSharedEntity = sharedEntity;\n      });\n    },\n  },\n};\n",{"version":3,"sources":["ShareButton.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"ShareButton.vue","sourceRoot":"../../static/common/js/components","sourcesContent":["<template>\n  <div class=\"share-button btn-container\">\n    <b-button\n      :variant=\"'outline-primary'\"\n      :title=\"title\"\n      :disabled=\"!shareButtonEnabled\"\n      @click=\"openSharingSettingsModal\"\n    >\n      Share\n      <b-badge>{{ totalCount }}</b-badge>\n    </b-button>\n    <b-modal\n      class=\"modal-share-settings\"\n      title=\"Sharing Settings\"\n      ref=\"sharingSettingsModal\"\n      ok-title=\"Save\"\n      @ok=\"saveSharedEntity\"\n      @cancel=\"cancelEditSharedEntity\"\n      no-close-on-esc\n      no-close-on-backdrop\n      hide-header-close\n      @show=\"showSharingSettingsModal\"\n    >\n      <shared-entity-editor\n        v-if=\"localSharedEntity && users && groups\"\n        v-model=\"localSharedEntity\"\n        :users=\"users\"\n        :groups=\"groups\"\n        :disallow-editing-admin-groups=\"disallowEditingAdminGroups\"\n      />\n      <!-- Only show parent entity permissions for new entities -->\n      <template v-if=\"hasParentSharedEntityPermissions\">\n        <shared-entity-editor\n          v-if=\"parentSharedEntity && users && groups\"\n          v-model=\"parentSharedEntity\"\n          :users=\"users\"\n          :groups=\"groups\"\n          :readonly=\"true\"\n          class=\"mt-4\"\n        >\n          <span slot=\"permissions-header\"\n            >Inherited {{ parentEntityLabel }} Permissions\n            <!-- <small class=\"text-muted\" v-if=\"parentEntityOwner\">Owned by {{parentEntityOwner.firstName}} {{parentEntityOwner.lastName}} ({{parentEntityOwner.email}})</small> -->\n          </span>\n        </shared-entity-editor>\n      </template>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { models, services } from \"django-airavata-api\";\nimport SharedEntityEditor from \"./SharedEntityEditor.vue\";\n\nexport default {\n  name: \"share-button\",\n  props: {\n    entityId: String,\n    parentEntityId: String,\n    parentEntityLabel: {\n      type: String,\n      default: \"Parent\",\n    },\n    sharedEntity: models.SharedEntity,\n    autoAddDefaultGatewayUsersGroup: {\n      type: Boolean,\n      default: true,\n    },\n    autoAddAdminGroups: {\n      type: Boolean,\n      default: true,\n    },\n    disallowEditingAdminGroups: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  components: {\n    SharedEntityEditor,\n  },\n  data: function () {\n    return {\n      localSharedEntity: null,\n      parentSharedEntity: null,\n      sharedEntityCopy: null,\n      defaultGatewayUsersGroup: null,\n      adminsGroup: null,\n      readOnlyAdminsGroup: null,\n      users: null,\n      groups: null,\n    };\n  },\n  computed: {\n    title: function () {\n      return (\n        \"Shared with \" +\n        this.groupsCount +\n        \" groups\" +\n        (this.groupsCount > 0 ? \" (\" + this.groupNames.join(\", \") + \")\" : \"\") +\n        \" and \" +\n        this.usersCount +\n        \" users\" +\n        (this.usersCount > 0 ? \" (\" + this.userNames.join(\", \") + \")\" : \"\")\n      );\n    },\n    usersCount: function () {\n      return this.combinedUsers.length;\n    },\n    userNames: function () {\n      return this.combinedUsers.map((u) => u.firstName + \" \" + u.lastName);\n    },\n    combinedUsers() {\n      const users = [];\n      if (this.localSharedEntity && this.localSharedEntity.userPermissions) {\n        users.push(\n          ...this.localSharedEntity.userPermissions.map((up) => up.user)\n        );\n      }\n      if (this.parentSharedEntity && this.parentSharedEntity.userPermissions) {\n        users.push(\n          ...this.parentSharedEntity.userPermissions.map((up) => up.user)\n        );\n        if (this.parentEntityOwner) {\n          users.push(this.parentEntityOwner);\n        }\n      }\n      return users;\n    },\n    filteredGroupPermissions: function () {\n      if (this.localSharedEntity && this.localSharedEntity.groupPermissions) {\n        return this.localSharedEntity.groupPermissions;\n      } else {\n        return [];\n      }\n    },\n    combinedGroups() {\n      const groups = [];\n      groups.push(...this.filteredGroupPermissions.map((gp) => gp.group));\n      if (this.parentSharedEntity && this.parentSharedEntity.groupPermissions) {\n        groups.push(\n          ...this.parentSharedEntity.groupPermissions.map((gp) => gp.group)\n        );\n      }\n      return groups;\n    },\n    groupNames: function () {\n      return this.combinedGroups.map((g) => g.name);\n    },\n    groupsCount: function () {\n      return this.combinedGroups.length;\n    },\n    totalCount: function () {\n      return this.usersCount + this.groupsCount;\n    },\n    shareButtonEnabled: function () {\n      // Enable share button if new entity or user is the entity's owner\n      return (\n        this.localSharedEntity &&\n        (!this.localSharedEntity.entityId ||\n          this.localSharedEntity.isOwner ||\n          this.localSharedEntity.hasSharingPermission)\n      );\n    },\n    hasParentSharedEntityPermissions() {\n      return (\n        this.parentSharedEntity &&\n        (this.parentSharedEntity.userPermissions.length > 0 ||\n          this.parentSharedEntity.groupPermissions.length > 0)\n      );\n    },\n    parentEntityOwner() {\n      // Only show the parent entity owner when not the same as current user\n      if (this.parentSharedEntity && !this.parentSharedEntity.isOwner) {\n        return this.parentSharedEntity.owner;\n      } else {\n        return null;\n      }\n    },\n  },\n  methods: {\n    initialize: function () {\n      // First loaded needed data and then process it. This is to prevent one\n      // call to initialize clobbering a later call to initialize. That is, do\n      // all of the async stuff first and then make decisions based on the\n      // values of the props.\n      const promises = [];\n      let loadedSharedEntity = null;\n      if (this.entityId) {\n        promises.push(\n          this.loadSharedEntity(this.entityId).then(\n            (sharedEntity) => (loadedSharedEntity = sharedEntity)\n          )\n        );\n      }\n      if (\n        !this.entityId &&\n        (!this.sharedEntity || !this.sharedEntity.entityId) &&\n        (!this.defaultGatewayUsersGroup ||\n          !this.adminsGroup ||\n          !this.readOnlyAdminsGroup)\n      ) {\n        promises.push(\n          services.GroupService.list({ limit: -1 }).then((groups) => {\n            this.groups = groups;\n            this.defaultGatewayUsersGroup = groups.find(\n              (g) => g.isDefaultGatewayUsersGroup\n            );\n            this.adminsGroup = groups.find((g) => g.isGatewayAdminsGroup);\n            this.readOnlyAdminsGroup = groups.find(\n              (g) => g.isReadOnlyGatewayAdminsGroup\n            );\n          })\n        );\n      }\n      if (this.parentEntityId) {\n        promises.push(\n          this.loadSharedEntity(this.parentEntityId).then(\n            (sharedEntity) => (this.parentSharedEntity = sharedEntity)\n          )\n        );\n      }\n      Promise.all(promises).then(() => {\n        if (this.sharedEntity) {\n          this.localSharedEntity = this.sharedEntity.clone();\n        } else if (this.entityId) {\n          this.localSharedEntity = loadedSharedEntity;\n        } else {\n          this.localSharedEntity = new models.SharedEntity();\n        }\n        if (\n          !this.localSharedEntity.entityId &&\n          this.autoAddDefaultGatewayUsersGroup &&\n          this.defaultGatewayUsersGroup\n        ) {\n          this.localSharedEntity.addGroup({\n            group: this.defaultGatewayUsersGroup,\n          });\n          this.emitUnsavedEvent();\n        }\n        if (\n          !this.localSharedEntity.entityId &&\n          this.autoAddAdminGroups &&\n          this.adminsGroup &&\n          this.readOnlyAdminsGroup\n        ) {\n          this.localSharedEntity.addGroup({\n            group: this.adminsGroup,\n            permissionType: models.ResourcePermissionType.MANAGE_SHARING,\n          });\n          this.localSharedEntity.addGroup({ group: this.readOnlyAdminsGroup });\n          this.emitUnsavedEvent();\n        }\n        if (\n          this.localSharedEntity.entityId &&\n          this.autoAddAdminGroups &&\n          this.localSharedEntity.isOwner\n        ) {\n          // AIRAVATA-3297 Admins group used to get WRITE permission, but the\n          // new default is MANAGE_SHARING so update if necessary\n          // Since autoAddAdminGroups is true, there should already be an adminsGroupPermission\n          const adminsGroupPermission = this.localSharedEntity.groupPermissions.find(\n            (gp) => gp.group.isGatewayAdminsGroup\n          );\n          if (\n            adminsGroupPermission &&\n            adminsGroupPermission.permissionType !==\n              models.ResourcePermissionType.MANAGE_SHARING\n          ) {\n            adminsGroupPermission.permissionType =\n              models.ResourcePermissionType.MANAGE_SHARING;\n            this.emitUnsavedEvent();\n          }\n        }\n      });\n    },\n    loadSharedEntity(entityId) {\n      return services.SharedEntityService.retrieve({ lookup: entityId });\n    },\n    /**\n     * Merge the persisted SharedEntity with the local SharedEntity\n     * instance and save it, returning a Promise.\n     */\n    mergeAndSave: function (entityId) {\n      return services.SharedEntityService.merge({\n        lookup: entityId,\n        data: this.localSharedEntity,\n      }).then((sharedEntity) => {\n        this.localSharedEntity = sharedEntity;\n        this.emitSavedEvent();\n      });\n    },\n    saveSharedEntity: function () {\n      // If we don't have an entityId we can't create a SharedEntity. Instead,\n      // we'll just emit 'unsaved' to let parent know that sharing has changed.\n      // It will be up to parent to call `mergeAndSave(entityId)` once there is\n      // an entityId or merge the sharedEntity itself.\n      if (this.localSharedEntity.entityId) {\n        services.SharedEntityService.update({\n          data: this.localSharedEntity,\n          lookup: this.localSharedEntity.entityId,\n        }).then((sharedEntity) => {\n          this.localSharedEntity = sharedEntity;\n          this.emitSavedEvent();\n        });\n      } else {\n        this.emitUnsavedEvent();\n      }\n    },\n    emitSavedEvent() {\n      this.$emit(\"saved\", this.localSharedEntity);\n    },\n    emitUnsavedEvent() {\n      this.$emit(\"unsaved\", this.localSharedEntity);\n    },\n    cancelEditSharedEntity: function () {\n      this.localSharedEntity = this.sharedEntityCopy;\n    },\n    openSharingSettingsModal: function () {\n      this.$refs.sharingSettingsModal.show();\n    },\n    showSharingSettingsModal: function () {\n      this.sharedEntityCopy = this.localSharedEntity.clone();\n      if (!this.users) {\n        services.ServiceFactory.service(\"UserProfiles\")\n          .list()\n          .then((users) => (this.users = users));\n      }\n      if (!this.groups) {\n        services.GroupService.list({ limit: -1 }).then((groups) => {\n          this.groups = groups;\n        });\n      }\n    },\n  },\n  mounted: function () {\n    // Only run initialize when mounted since it may add the default gateways\n    // group automatically (autoAddDefaultGatewayUsersGroup)\n    this.initialize();\n  },\n  watch: {\n    sharedEntity(newSharedEntity) {\n      this.localSharedEntity = newSharedEntity\n        ? newSharedEntity.clone()\n        : new models.SharedEntity();\n    },\n    entityId(newEntityId, oldEntityId) {\n      if (newEntityId && newEntityId !== oldEntityId) {\n        this.loadSharedEntity(newEntityId).then(\n          (sharedEntity) => (this.localSharedEntity = sharedEntity)\n        );\n      }\n    },\n    parentEntityId(newParentEntityId) {\n      this.loadSharedEntity(newParentEntityId).then((sharedEntity) => {\n        this.parentSharedEntity = sharedEntity;\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\nbutton {\n  background-color: white;\n  white-space: nowrap;\n}\n.share-button {\n  display: inline-block;\n}\n.share-button >>> .modal-share-settings .modal-body {\n  max-height: 50vh;\n  min-height: 300px;\n  overflow: auto;\n}\n.share-button >>> .modal-dialog {\n  max-width: 800px;\n  width: 60vw;\n}\n</style>\n"]}]}