{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/SharedEntityEditor.vue?vue&type=style&index=0&id=e2a34480&scoped=true&lang=css&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/SharedEntityEditor.vue","mtime":1638641844579},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/css-loader/index.js","mtime":1638646228588},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1638646228900},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/postcss-loader/src/index.js","mtime":1638646228869},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#modal-user-table {\n  table-layout: fixed;\n}\n",{"version":3,"sources":["SharedEntityEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyVA;AACA;AACA","file":"SharedEntityEditor.vue","sourceRoot":"../../static/common/js/components","sourcesContent":["<template>\n  <div>\n    <b-form-group\n      v-if=\"!readonly\"\n      label=\"Search for users/groups\"\n      labelFor=\"user-groups-autocomplete\"\n    >\n      <autocomplete-text-input\n        id=\"user-groups-autocomplete\"\n        :suggestions=\"usersAndGroupsSuggestions\"\n        @selected=\"suggestionSelected\"\n      >\n        <template slot=\"suggestion\" slot-scope=\"slotProps\">\n          <span v-if=\"slotProps.suggestion.type == 'group'\">\n            <i class=\"fa fa-users\"></i> {{ slotProps.suggestion.name }}\n          </span>\n          <span v-if=\"slotProps.suggestion.type == 'user'\">\n            <i class=\"fa fa-user\"></i>\n            {{ slotProps.suggestion.user.firstName }}\n            {{ slotProps.suggestion.user.lastName }} ({{\n              slotProps.suggestion.user.userId\n            }}) - {{ slotProps.suggestion.user.email }}\n          </span>\n        </template>\n      </autocomplete-text-input>\n    </b-form-group>\n    <h5 v-if=\"totalCount > 0\">\n      <slot name=\"permissions-header\">Currently Shared With</slot>\n    </h5>\n    <b-table\n      v-if=\"usersCount > 0\"\n      id=\"modal-user-table\"\n      hover\n      :items=\"sortedUserPermissions\"\n      :fields=\"userFields\"\n    >\n      <template slot=\"cell(name)\" slot-scope=\"data\">\n        <span\n          :title=\"data.item.user.userId\"\n          :class=\"userDataClasses\"\n          v-if=\"!isPermissionReadOnly(data.item.permissionType)\"\n          >{{ data.item.user.firstName }} {{ data.item.user.lastName }}</span\n        >\n        <span v-else class=\"text-muted font-italic\"\n          >{{ data.item.user.firstName }} {{ data.item.user.lastName }}</span\n        >\n      </template>\n      <template slot=\"cell(email)\" slot-scope=\"data\">\n        <span\n          :class=\"userDataClasses\"\n          v-if=\"!isPermissionReadOnly(data.item.permissionType)\"\n          >{{ data.item.user.email }}</span\n        >\n        <span v-else class=\"text-muted font-italic\">{{\n          data.item.user.email\n        }}</span>\n      </template>\n      <template slot=\"cell(permission)\" slot-scope=\"data\">\n        <b-form-select\n          v-if=\"!isPermissionReadOnly(data.item.permissionType)\"\n          v-model=\"data.item.permissionType\"\n          :options=\"permissionOptions\"\n        />\n        <span\n          v-else\n          class=\"text-uppercase text-muted font-italic\"\n          :class=\"userDataClasses\"\n          >{{ data.item.permissionType.name }}</span\n        >\n      </template>\n      <template slot=\"cell(remove)\" slot-scope=\"data\">\n        <b-link\n          v-if=\"!isPermissionReadOnly(data.item.permissionType)\"\n          @click=\"removeUser(data.item.user)\"\n        >\n          <span class=\"fa fa-trash\"></span>\n        </b-link>\n      </template>\n    </b-table>\n    <b-table\n      v-if=\"groupsCount > 0\"\n      id=\"modal-group-table\"\n      hover\n      :items=\"sortedGroupPermissions\"\n      :fields=\"groupFields\"\n    >\n      <template slot=\"cell(name)\" slot-scope=\"data\">\n        <span\n          v-if=\"editingAllowed(data.item.group, data.item.permissionType)\"\n          >{{ data.item.group.name }}</span\n        >\n        <span v-else class=\"text-muted font-italic\">{{\n          data.item.group.name\n        }}</span>\n      </template>\n      <template slot=\"cell(permission)\" slot-scope=\"data\">\n        <b-form-select\n          v-if=\"editingAllowed(data.item.group, data.item.permissionType)\"\n          v-model=\"data.item.permissionType\"\n          :options=\"permissionOptions\"\n        />\n        <span v-else class=\"text-muted font-italic\">{{\n          data.item.permissionType.name\n        }}</span>\n      </template>\n      <template slot=\"cell(remove)\" slot-scope=\"data\">\n        <b-link\n          v-if=\"editingAllowed(data.item.group, data.item.permissionType)\"\n          @click=\"removeGroup(data.item.group)\"\n        >\n          <span class=\"fa fa-trash\"></span>\n        </b-link>\n      </template>\n    </b-table>\n  </div>\n</template>\n\n<script>\nimport { models, utils, session } from \"django-airavata-api\";\nimport AutocompleteTextInput from \"./AutocompleteTextInput.vue\";\nimport VModelMixin from \"../mixins/VModelMixin\";\n\nexport default {\n  name: \"shared-entity-editor\",\n  mixins: [VModelMixin],\n  props: {\n    value: {\n      type: models.SharedEntity,\n    },\n    users: {\n      type: Array,\n      required: true,\n    },\n    groups: {\n      type: Array,\n      required: true,\n    },\n    disallowEditingAdminGroups: {\n      type: Boolean,\n      default: true,\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  components: {\n    AutocompleteTextInput,\n  },\n  computed: {\n    userFields: function () {\n      return [\n        { key: \"name\", label: \"User Name\", class: \"text-truncate\" },\n        { key: \"email\", label: \"Email\", class: \"text-truncate\" },\n        { key: \"permission\", label: \"Permission\" },\n        { key: \"remove\", label: \"Remove\" },\n      ];\n    },\n    groupFields: function () {\n      return [\n        { key: \"name\", label: \"Group Name\" },\n        { key: \"permission\", label: \"Permission\" },\n        { key: \"remove\", label: \"Remove\" },\n      ];\n    },\n    usersCount: function () {\n      return this.data && this.data.userPermissions\n        ? this.data.userPermissions.length\n        : 0;\n    },\n    sortedUserPermissions: function () {\n      const userPermsCopy = this.data.userPermissions\n        ? this.data.userPermissions.slice()\n        : [];\n      const sortedUserPerms = utils.StringUtils.sortIgnoreCase(\n        userPermsCopy,\n        (userPerm) => userPerm.user.lastName + \", \" + userPerm.user.firstName\n      );\n      // When in readonly mode, if the current owner isn't the owner, display\n      // the user with the OWNER permission\n      if (this.readonly && !this.data.isOwner) {\n        sortedUserPerms.push(\n          new models.UserPermission({\n            user: this.data.owner,\n            permissionType: models.ResourcePermissionType.OWNER,\n          })\n        );\n      }\n      return sortedUserPerms;\n    },\n    userDataClasses() {\n      return {\n        \"text-muted\": this.readonly,\n        \"font-italic\": this.readonly,\n      };\n    },\n    filteredGroupPermissions: function () {\n      return this.data && this.data.groupPermissions\n        ? this.data.groupPermissions\n        : [];\n    },\n    sortedGroupPermissions: function () {\n      const groupPermsCopy = this.filteredGroupPermissions.slice();\n      // Sort by name, then admin groups should come last if editing is disallowed\n      utils.StringUtils.sortIgnoreCase(groupPermsCopy, (g) => g.group.name);\n      if (this.disallowEditingAdminGroups) {\n        groupPermsCopy.sort((a, b) => {\n          if (a.group.isAdminGroup && !b.group.isAdminGroup) {\n            return 1;\n          }\n        });\n      }\n      return groupPermsCopy;\n    },\n    groupsCount: function () {\n      return this.filteredGroupPermissions.length;\n    },\n    totalCount: function () {\n      return this.usersCount + this.groupsCount;\n    },\n    permissionOptions: function () {\n      var options = [\n        models.ResourcePermissionType.READ,\n        models.ResourcePermissionType.WRITE,\n      ];\n      // manage_sharing permission is visible only if the user is the owner or it is a new entity and owner is not defined\n      if (this.data.isOwner || this.data.isOwner === null) {\n        options.push(models.ResourcePermissionType.MANAGE_SHARING);\n      }\n      return options.map((perm) => {\n        return {\n          value: perm,\n          text: perm.name,\n        };\n      });\n    },\n    groupSuggestions: function () {\n      // filter out already selected groups\n      const currentGroupIds = this.filteredGroupPermissions.map(\n        (groupPerm) => groupPerm.group.id\n      );\n      return this.groups\n        .filter((group) => currentGroupIds.indexOf(group.id) < 0)\n        .filter((group) => {\n          // Filter out admin groups from options\n          if (this.disallowEditingAdminGroups) {\n            return !group.isAdminGroup;\n          } else {\n            return true;\n          }\n        })\n        .map((group) => {\n          return {\n            id: group.id,\n            name: group.name,\n            type: \"group\",\n          };\n        });\n    },\n    userSuggestions: function () {\n      // filter out already selected users\n      const currentUserIds = this.data.userPermissions\n        ? this.data.userPermissions.map(\n            (userPerm) => userPerm.user.airavataInternalUserId\n          )\n        : [];\n      return this.users\n        .filter(\n          (user) => currentUserIds.indexOf(user.airavataInternalUserId) < 0\n        )\n        .filter(\n          (user) =>\n            user.airavataInternalUserId !==\n            session.Session.airavataInternalUserId\n        )\n        .map((user) => {\n          return {\n            id: user.airavataInternalUserId,\n            name:\n              user.firstName +\n              \" \" +\n              user.lastName +\n              \" (\" +\n              user.userId +\n              \") \" +\n              user.email,\n            user: user,\n            type: \"user\",\n          };\n        });\n    },\n    usersAndGroupsSuggestions: function () {\n      return this.userSuggestions.concat(this.groupSuggestions);\n    },\n  },\n  methods: {\n    removeUser: function (user) {\n      this.data.removeUser(user);\n    },\n    removeGroup: function (group) {\n      this.data.removeGroup(group);\n    },\n    suggestionSelected: function (suggestion) {\n      if (suggestion.type === \"group\") {\n        const group = this.groups.find((group) => group.id === suggestion.id);\n        this.data.addGroup({ group });\n      } else if (suggestion.type === \"user\") {\n        const user = this.users.find(\n          (user) => user.airavataInternalUserId === suggestion.id\n        );\n        this.data.addUser(user);\n      }\n    },\n    /**\n     * For some entity types the backend automatically shares the entity with\n     * admin users and doesn't allow editing or removing those admin groups.\n     * For that reason the disallowEditingAdminGroups property was added and\n     * when it is true editing of the \"Admins\" and \"Read Only Admins\" groups\n     * should not be allowed.\n     */\n    editingAllowed(group, permission) {\n      return (\n        !this.readonly &&\n        (!this.disallowEditingAdminGroups || !group.isAdminGroup) &&\n        !(\n          !this.data.isOwner &&\n          permission === models.ResourcePermissionType.MANAGE_SHARING\n        )\n      );\n    },\n    isPermissionReadOnly: function (permission) {\n      // if it is a new entity, it will not be readonly\n      if (this.data.isOwner == null) {\n        return false;\n      }\n      return (\n        !this.data.isOwner &&\n        permission === models.ResourcePermissionType.MANAGE_SHARING\n      );\n    },\n  },\n};\n</script>\n\n<style scoped>\n#modal-user-table {\n  table-layout: fixed;\n}\n</style>\n"]}]}