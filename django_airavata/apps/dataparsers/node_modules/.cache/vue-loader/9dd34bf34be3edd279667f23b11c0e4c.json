{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/AutocompleteTextInput.vue?vue&type=style&index=0&id=e2aac1e4&scoped=true&lang=css&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/AutocompleteTextInput.vue","mtime":1638641844579},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/css-loader/index.js","mtime":1638646228588},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1638646228900},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/postcss-loader/src/index.js","mtime":1638646228869},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.autocomplete-text-input {\n  position: relative;\n}\n.autocomplete-suggestion-list {\n  width: 100%;\n  position: absolute;\n  z-index: 3;\n}\n",{"version":3,"sources":["AutocompleteTextInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AutocompleteTextInput.vue","sourceRoot":"../../static/common/js/components","sourcesContent":["<template>\n  <div class=\"autocomplete-text-input\">\n    <b-input-group>\n      <b-input-group-text slot=\"prepend\">\n        <i class=\"fa fa-search\"></i>\n      </b-input-group-text>\n      <b-form-input\n        type=\"text\"\n        :value=\"searchValue\"\n        :placeholder=\"placeholder\"\n        @input=\"updateSearchValue\"\n        @keydown.native.enter=\"enter\"\n        @keydown.native.down=\"down\"\n        @keydown.native.up=\"up\"\n      ></b-form-input>\n    </b-input-group>\n    <b-list-group class=\"autocomplete-suggestion-list\" v-if=\"open\">\n      <b-list-group-item\n        v-for=\"(suggestion, index) in filtered\"\n        v-bind:class=\"{ active: isActive(index) }\"\n        href=\"#\"\n        @click=\"suggestionClick(index)\"\n        v-bind:key=\"suggestion.id\"\n      >\n        <slot name=\"suggestion\" :suggestion=\"suggestion\">\n          {{ suggestion.name }}\n        </slot>\n      </b-list-group-item>\n    </b-list-group>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"autocomplete-text-input\",\n  props: {\n    suggestions: {\n      type: Array,\n      required: true,\n    },\n    placeholder: {\n      type: String,\n      default: \"Type to get suggestions...\",\n    },\n    maxMatches: {\n      type: Number,\n      default: 5,\n    },\n  },\n  data() {\n    return {\n      open: false,\n      current: 0,\n      searchValue: \"\",\n    };\n  },\n\n  computed: {\n    filtered() {\n      return this.suggestions\n        .filter((data) => {\n          // Case insensitive search\n          return (\n            data.name.toLowerCase().indexOf(this.searchValue.toLowerCase()) >= 0\n          );\n        })\n        .slice(0, this.maxMatches);\n    },\n  },\n  methods: {\n    updateSearchValue(value) {\n      if (this.open === false) {\n        this.open = true;\n        this.current = 0;\n      }\n      if (value === \"\") {\n        this.open = false;\n      }\n      this.searchValue = value;\n      this.$emit(\"search-changed\", value);\n    },\n    enter() {\n      if (this.filtered.length === 0) {\n        return;\n      }\n      this.emitSelectedItem(this.current);\n      this.searchValue = \"\";\n      this.open = false;\n    },\n    up() {\n      if (this.current > 0) {\n        this.current--;\n      }\n    },\n    down() {\n      if (this.current < this.filtered.length - 1) {\n        this.current++;\n      }\n    },\n    isActive(index) {\n      return index === this.current;\n    },\n    suggestionClick(index) {\n      this.emitSelectedItem(index);\n      this.searchValue = \"\";\n      this.open = false;\n    },\n    emitSelectedItem(index) {\n      this.$emit(\"selected\", this.filtered[index]);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.autocomplete-text-input {\n  position: relative;\n}\n.autocomplete-suggestion-list {\n  width: 100%;\n  position: absolute;\n  z-index: 3;\n}\n</style>\n"]}]}