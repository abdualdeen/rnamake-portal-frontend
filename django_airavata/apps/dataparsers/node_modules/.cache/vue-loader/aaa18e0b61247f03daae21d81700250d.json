{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/static/django_airavata_dataparsers/js/parser-components/ParserEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/static/django_airavata_dataparsers/js/parser-components/ParserEditor.vue","mtime":1638641844333},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/dataparsers/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { models, services } from \"django-airavata-api\";\nimport { layouts } from \"django-airavata-common-ui\";\n\nexport default {\n  props: {\n    parser: {\n      type: models.Parser,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      localParser: this.parser.clone(),\n      service: services.ServiceFactory.service(\"Parsers\"),\n      showDismissibleAlert: {\n        variant: \"success\",\n        message: \"no data\",\n        dismissable: false,\n      },\n      parserInputFields: [\n        {\n          label: \"Name\",\n          key: \"name\",\n        },\n        {\n          label: \"Required\",\n          key: \"requiredInput\",\n        },\n        {\n          label: \"Type\",\n          key: \"type\",\n          formatter: (value) => value.name,\n        },\n      ],\n      parserOutputFields: [\n        {\n          label: \"Name\",\n          key: \"name\",\n        },\n        {\n          label: \"Required\",\n          key: \"requiredOutput\",\n        },\n        {\n          label: \"Type\",\n          key: \"type\",\n          formatter: (value) => value.name,\n        },\n      ],\n    };\n  },\n  computed: {\n    title: function () {\n      return this.parser ? this.parser.id : \"New Parser\";\n    },\n  },\n  components: {\n    \"list-layout\": layouts.ListLayout,\n  },\n  methods: {\n    submitForm() {},\n    createInput: function () {},\n    createOutput: function () {},\n    saveParser: function () {\n      var persist = null;\n      if (this.parser) {\n        persist = this.service.update({\n          data: this.localParser,\n          lookup: this.parser.id,\n        });\n      } else {\n        //persist = this.service.create({ data: this.localParser }).then(data => {\n        // Merge sharing settings with default sharing settings created when\n        // Group Resource Profile was created\n        //const savedPArserId = data.id;\n        // });\n      }\n      persist.then(() => {\n        this.$emit(\"saved\");\n      });\n    },\n    removeParser: function () {},\n    cancel: function () {\n      this.$emit(\"cancelled\");\n    },\n  },\n};\n",{"version":3,"sources":["ParserEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyJA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ParserEditor.vue","sourceRoot":"static/django_airavata_dataparsers/js/parser-components","sourcesContent":["<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <h1 class=\"h4 mb-4\">{{ title }}</h1>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <b-alert\n              :variant=\"showDismissibleAlert.variant\"\n              dismissible\n              :show=\"showDismissibleAlert.dismissable\"\n              @dismissed=\"showDismissibleAlert.dismissable = false\"\n            >\n              {{ showDismissibleAlert.message }}\n            </b-alert>\n\n            <b-form>\n              <b-form-group\n                id=\"group1\"\n                label=\"Parser Name:\"\n                label-for=\"parser_name\"\n                description=\"Name should only contain Alpha Characters\"\n              >\n                <b-form-input\n                  id=\"parser_name\"\n                  type=\"text\"\n                  v-model=\"localParser.id\"\n                  required\n                  placeholder=\"Enter parser name\"\n                >\n                </b-form-input>\n              </b-form-group>\n\n              <b-form-group\n                id=\"group2\"\n                label=\"Docker Image:\"\n                label-for=\"docker-image\"\n              >\n                <b-form-input\n                  id=\"docker-image\"\n                  type=\"text\"\n                  v-model=\"localParser.imageName\"\n                  required\n                  placeholder=\"Enter the Docker Image name\"\n                >\n                </b-form-input>\n              </b-form-group>\n\n              <b-form-group\n                id=\"group3\"\n                label=\"Input Data Directory:\"\n                label-for=\"input-path\"\n              >\n                <b-form-input\n                  id=\"input-path\"\n                  type=\"text\"\n                  v-model=\"localParser.inputDirPath\"\n                  required\n                  placeholder=\"Enter input directory of the container\"\n                >\n                </b-form-input>\n              </b-form-group>\n\n              <b-form-group\n                id=\"group4\"\n                label=\"Output Data Directory:\"\n                label-for=\"output-path\"\n              >\n                <b-form-input\n                  id=\"output-path\"\n                  type=\"text\"\n                  v-model=\"localParser.outputDirPath\"\n                  required\n                  placeholder=\"Enter output directory of the container\"\n                >\n                </b-form-input>\n              </b-form-group>\n            </b-form>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col\">\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <list-layout\n              :items=\"localParser.inputFiles\"\n              title=\"Inputs\"\n              new-item-button-text=\"New Input\"\n              @add-new-item=\"createInput\"\n            >\n              <template slot=\"item-list\" slot-scope=\"slotProps\">\n                <b-table\n                  hover\n                  :fields=\"parserInputFields\"\n                  :items=\"slotProps.items\"\n                >\n                </b-table>\n              </template>\n            </list-layout>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col\">\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <list-layout\n              :items=\"localParser.outputFiles\"\n              title=\"Outputs\"\n              new-item-button-text=\"New Output\"\n              @add-new-item=\"createOutput\"\n            >\n              <template slot=\"item-list\" slot-scope=\"slotProps\">\n                <b-table\n                  hover\n                  :fields=\"parserOutputFields\"\n                  :items=\"slotProps.items\"\n                >\n                </b-table>\n              </template>\n            </list-layout>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col d-flex justify-content-end\">\n        <b-button variant=\"primary\" @click=\"saveParser\">Save</b-button>\n        <b-button\n          v-if=\"parser\"\n          class=\"ml-2\"\n          variant=\"danger\"\n          @click=\"removeParser\"\n          >Delete</b-button\n        >\n        <b-button class=\"ml-2\" variant=\"secondary\" @click=\"cancel\"\n          >Cancel</b-button\n        >\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { models, services } from \"django-airavata-api\";\nimport { layouts } from \"django-airavata-common-ui\";\n\nexport default {\n  props: {\n    parser: {\n      type: models.Parser,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      localParser: this.parser.clone(),\n      service: services.ServiceFactory.service(\"Parsers\"),\n      showDismissibleAlert: {\n        variant: \"success\",\n        message: \"no data\",\n        dismissable: false,\n      },\n      parserInputFields: [\n        {\n          label: \"Name\",\n          key: \"name\",\n        },\n        {\n          label: \"Required\",\n          key: \"requiredInput\",\n        },\n        {\n          label: \"Type\",\n          key: \"type\",\n          formatter: (value) => value.name,\n        },\n      ],\n      parserOutputFields: [\n        {\n          label: \"Name\",\n          key: \"name\",\n        },\n        {\n          label: \"Required\",\n          key: \"requiredOutput\",\n        },\n        {\n          label: \"Type\",\n          key: \"type\",\n          formatter: (value) => value.name,\n        },\n      ],\n    };\n  },\n  computed: {\n    title: function () {\n      return this.parser ? this.parser.id : \"New Parser\";\n    },\n  },\n  components: {\n    \"list-layout\": layouts.ListLayout,\n  },\n  methods: {\n    submitForm() {},\n    createInput: function () {},\n    createOutput: function () {},\n    saveParser: function () {\n      var persist = null;\n      if (this.parser) {\n        persist = this.service.update({\n          data: this.localParser,\n          lookup: this.parser.id,\n        });\n      } else {\n        //persist = this.service.create({ data: this.localParser }).then(data => {\n        // Merge sharing settings with default sharing settings created when\n        // Group Resource Profile was created\n        //const savedPArserId = data.id;\n        // });\n      }\n      persist.then(() => {\n        this.$emit(\"saved\");\n      });\n    },\n    removeParser: function () {},\n    cancel: function () {\n      this.$emit(\"cancelled\");\n    },\n  },\n};\n</script>\n"]}]}