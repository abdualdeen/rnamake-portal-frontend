{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/static/django_airavata_groups/js/group_components/GroupMembersEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/static/django_airavata_groups/js/group_components/GroupMembersEditor.vue","mtime":1638641844336},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/babel-loader/lib/index.js","mtime":1638646321845},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/vue-loader/lib/index.js","mtime":1638646324785}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { models, services } from \"django-airavata-api\";\nimport GroupMembersDetailsContainer from \"./GroupMembersDetailsContainer.vue\";\nexport default {\n  name: \"group-members-editor\",\n  components: {\n    GroupMembersDetailsContainer: GroupMembersDetailsContainer\n  },\n  props: {\n    group: {\n      type: models.Group,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      userProfiles: null,\n      newMembers: [],\n      userFilter: null,\n      memberFilter: null,\n      selectedMembers: [],\n      selectedUsers: [],\n      showingDetails: {},\n      showRemove: false,\n      showAdd: false\n    };\n  },\n  computed: {\n    members: function members() {\n      return this.group.members ? this.group.members : [];\n    },\n    admins: function admins() {\n      return this.group.admins;\n    },\n    memberFields: function memberFields() {\n      return [{\n        key: \"selected\",\n        label: \"\",\n        sortable: false\n      }, {\n        key: \"username\",\n        label: \"Username\",\n        sortable: true\n      }, {\n        key: \"action\",\n        label: \"Action\",\n        sortable: false\n      }];\n    },\n    userFields: function userFields() {\n      return [{\n        key: \"selected\",\n        label: \"\",\n        sortable: false\n      }, {\n        key: \"username\",\n        label: \"Username\",\n        sortable: true\n      }, {\n        key: \"action\",\n        label: \"Action\",\n        sortable: false\n      }];\n    },\n    userProfilesMap: function userProfilesMap() {\n      if (!this.userProfiles) {\n        return null;\n      }\n\n      var result = {};\n      this.userProfiles.forEach(function (up) {\n        result[up.airavataInternalUserId] = up;\n      });\n      return result;\n    },\n    currentMembers: function currentMembers() {\n      var _this = this;\n\n      if (!this.userProfilesMap) {\n        return [];\n      }\n\n      return this.members // Filter out users that are missing profiles\n      .filter(function (m) {\n        return m in _this.userProfilesMap;\n      }).map(function (m) {\n        var userProfile = _this.userProfilesMap[m];\n        var isAdmin = _this.admins.indexOf(m) >= 0;\n        var isOwner = _this.group.ownerId === m; // Owners can edit all members and admins can edit non-admin members\n        // (except the owners role isn't editable)\n\n        var editable = !isOwner && (_this.group.isOwner || _this.group.isAdmin && !isAdmin);\n        return {\n          id: m,\n          name: userProfile.firstName + \" \" + userProfile.lastName,\n          username: userProfile.userId,\n          email: userProfile.email,\n          role: isOwner ? \"OWNER\" : isAdmin ? \"ADMIN\" : \"MEMBER\",\n          editable: editable,\n          _showDetails: _this.showingDetails[m] || false,\n          _rowVariant: _this.newMembers.indexOf(m) >= 0 ? \"success\" : null,\n          _selectable: isOwner ? false : true\n        };\n      });\n    },\n    nonMembers: function nonMembers() {\n      var _this2 = this;\n\n      if (!this.userProfiles) {\n        return [];\n      }\n\n      return this.userProfiles // Filter out current members\n      .filter(function (userProfile) {\n        return _this2.group.members.indexOf(userProfile.airavataInternalUserId) < 0;\n      }).map(function (userProfile) {\n        return {\n          id: userProfile.airavataInternalUserId,\n          name: userProfile.firstName + \" \" + userProfile.lastName,\n          username: userProfile.userId,\n          email: userProfile.email,\n          _showDetails: _this2.showingDetails[userProfile.airavataInternalUserId] || false\n        };\n      });\n    },\n    membersCount: function membersCount() {\n      return this.members.length;\n    }\n  },\n  created: function created() {\n    var _this3 = this;\n\n    services.UserProfileService.list().then(function (userProfiles) {\n      _this3.userProfiles = userProfiles;\n    });\n  },\n  methods: {\n    toggleDetails: function toggleDetails(row) {\n      row.toggleDetails();\n      this.showingDetails[row.item.airavataInternalUserId] = !this.showingDetails[row.item.airavataInternalUserId];\n    },\n    isUserSelected: function isUserSelected(user) {\n      if (this.selectedUsers.length > 0) {\n        for (var i = 0; i < this.selectedUsers.length; i++) {\n          if (user == this.selectedUsers[i]) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    isMemberSelected: function isMemberSelected(member) {\n      if (this.selectedMembers.length > 0) {\n        for (var i = 0; i < this.selectedMembers.length; i++) {\n          if (member == this.selectedMembers[i]) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    addSelectedMembers: function addSelectedMembers() {\n      var _this4 = this;\n\n      this.selectedUsers.forEach(function (user) {\n        _this4.newMembers.push(user.id);\n\n        _this4.$emit(\"add-member\", user.id);\n      });\n      this.$refs.usersTable.clearSelected();\n      this.$refs.membersTable.clearSelected();\n      this.selectedUsers = [];\n      this.selectedMembers = [];\n    },\n    addAllMembers: function addAllMembers() {\n      var _this5 = this;\n\n      this.showAdd = false;\n      this.selectedUsers = this.nonMembers.filter(function (user) {\n        return _this5.filterUserProfile(user, _this5.userFilter);\n      }).map(function (x) {\n        return x;\n      });\n      this.addSelectedMembers();\n      this.userFilter = null;\n      this.memberfilter = null;\n    },\n    removeSelectedMembers: function removeSelectedMembers() {\n      var _this6 = this;\n\n      this.selectedMembers.forEach(function (member) {\n        if (member.role == \"MEMBER\" || member.role == \"ADMIN\") {\n          _this6.$emit(\"remove-member\", member.id);\n        }\n      });\n      this.$refs.membersTable.clearSelected();\n      this.selectedMembers = [];\n      this.selectedUsers = [];\n    },\n    removeAllMembers: function removeAllMembers() {\n      var _this7 = this;\n\n      this.showRemove = false;\n      this.selectedMembers = this.currentMembers.filter(function (member) {\n        return _this7.filterUserProfile(member, _this7.memberFilter);\n      }).map(function (x) {\n        return x;\n      });\n      this.removeSelectedMembers();\n      this.memberFilter = null;\n      this.userFields = null;\n    },\n    onMembersRowSelected: function onMembersRowSelected(items) {\n      this.selectedMembers = items;\n\n      if (this.selectedUsers) {\n        this.$refs.usersTable.clearSelected();\n        this.selectedUsers = [];\n      }\n    },\n    onUsersRowSelected: function onUsersRowSelected(items) {\n      this.selectedUsers = items;\n\n      if (this.selectedMembers) {\n        this.$refs.membersTable.clearSelected();\n        this.selectedMembers = [];\n      }\n    },\n    onUserFilterChange: function onUserFilterChange() {\n      this.selectedUsers = [];\n    },\n    onMemberFilterChange: function onMemberFilterChange() {\n      this.selectedMembers = [];\n    },\n    changeRole: function changeRole(item) {\n      if (item[1] === \"ADMIN\") {\n        this.$emit(\"change-role-to-admin\", item[0]);\n      } else {\n        this.$emit(\"change-role-to-member\", item[0]);\n      }\n    },\n    filterUserProfile: function filterUserProfile(profile, filter) {\n      if (filter) {\n        if (profile.email.toLowerCase().includes(filter.toLowerCase())) {\n          return true;\n        } else if (profile.name.toLowerCase().includes(filter.toLowerCase())) {\n          return true;\n        } else if (profile.username.toLowerCase().includes(filter.toLowerCase())) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return true;\n      }\n    },\n    handleOwnerSelected: function handleOwnerSelected(item, index) {\n      if (!item._selectable) {\n        this.$refs.membersTable.selectRow(index);\n      }\n    },\n    sortCompare: function sortCompare(aRow, bRow, key) {\n      // Sort new members before all others\n      var aNewIndex = this.newMembers.indexOf(aRow.id);\n      var bNewIndex = this.newMembers.indexOf(bRow.id);\n\n      if (aNewIndex >= 0 && bNewIndex >= 0) {\n        return aNewIndex - bNewIndex;\n      } else if (aNewIndex >= 0) {\n        return -1;\n      } else if (bNewIndex >= 0) {\n        return 1;\n      }\n\n      var a = aRow[key];\n      var b = bRow[key];\n\n      if (typeof a === \"number\" && typeof b === \"number\" || a instanceof Date && b instanceof Date) {\n        // If both compared fields are native numbers or both are dates\n        return a < b ? -1 : a > b ? 1 : 0;\n      } else {\n        // Otherwise stringify the field data and use String.prototype.localeCompare\n        return new String(a).localeCompare(new String(b));\n      }\n    }\n  }\n};",{"version":3,"sources":["GroupMembersEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2NA,SAAA,MAAA,EAAA,QAAA,QAAA,qBAAA;AACA,OAAA,4BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,sBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,4BAAA,EAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MAAA,CAAA,KADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GALA;AAWA,EAAA,IAXA,kBAWA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,IADA;AAEA,MAAA,UAAA,EAAA,EAFA;AAGA,MAAA,UAAA,EAAA,IAHA;AAIA,MAAA,YAAA,EAAA,IAJA;AAKA,MAAA,eAAA,EAAA,EALA;AAMA,MAAA,aAAA,EAAA,EANA;AAOA,MAAA,cAAA,EAAA,EAPA;AAQA,MAAA,UAAA,EAAA,KARA;AASA,MAAA,OAAA,EAAA;AATA,KAAA;AAWA,GAvBA;AAyBA,EAAA,QAAA,EAAA;AACA,IAAA,OADA,qBACA;AACA,aAAA,KAAA,KAAA,CAAA,OAAA,GAAA,KAAA,KAAA,CAAA,OAAA,GAAA,EAAA;AACA,KAHA;AAIA,IAAA,MAJA,oBAIA;AACA,aAAA,KAAA,KAAA,CAAA,MAAA;AACA,KANA;AAOA,IAAA,YAPA,0BAOA;AACA,aAAA,CACA;AAAA,QAAA,GAAA,EAAA,UAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OADA,EAEA;AAAA,QAAA,GAAA,EAAA,UAAA;AAAA,QAAA,KAAA,EAAA,UAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OAFA,EAGA;AAAA,QAAA,GAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,QAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OAHA,CAAA;AAKA,KAbA;AAcA,IAAA,UAdA,wBAcA;AACA,aAAA,CACA;AAAA,QAAA,GAAA,EAAA,UAAA;AAAA,QAAA,KAAA,EAAA,EAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OADA,EAEA;AAAA,QAAA,GAAA,EAAA,UAAA;AAAA,QAAA,KAAA,EAAA,UAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OAFA,EAGA;AAAA,QAAA,GAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,QAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OAHA,CAAA;AAKA,KApBA;AAqBA,IAAA,eArBA,6BAqBA;AACA,UAAA,CAAA,KAAA,YAAA,EAAA;AACA,eAAA,IAAA;AACA;;AACA,UAAA,MAAA,GAAA,EAAA;AACA,WAAA,YAAA,CAAA,OAAA,CAAA,UAAA,EAAA,EAAA;AACA,QAAA,MAAA,CAAA,EAAA,CAAA,sBAAA,CAAA,GAAA,EAAA;AACA,OAFA;AAGA,aAAA,MAAA;AACA,KA9BA;AA+BA,IAAA,cA/BA,4BA+BA;AAAA;;AACA,UAAA,CAAA,KAAA,eAAA,EAAA;AACA,eAAA,EAAA;AACA;;AACA,aACA,KAAA,OAAA,CACA;AADA,OAEA,MAFA,CAEA,UAAA,CAAA;AAAA,eAAA,CAAA,IAAA,KAAA,CAAA,eAAA;AAAA,OAFA,EAGA,GAHA,CAGA,UAAA,CAAA,EAAA;AACA,YAAA,WAAA,GAAA,KAAA,CAAA,eAAA,CAAA,CAAA,CAAA;AACA,YAAA,OAAA,GAAA,KAAA,CAAA,MAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CAAA;AACA,YAAA,OAAA,GAAA,KAAA,CAAA,KAAA,CAAA,OAAA,KAAA,CAAA,CAHA,CAIA;AACA;;AACA,YAAA,QAAA,GACA,CAAA,OAAA,KACA,KAAA,CAAA,KAAA,CAAA,OAAA,IAAA,KAAA,CAAA,KAAA,CAAA,OAAA,IAAA,CAAA,OADA,CADA;AAGA,eAAA;AACA,UAAA,EAAA,EAAA,CADA;AAEA,UAAA,IAAA,EAAA,WAAA,CAAA,SAAA,GAAA,GAAA,GAAA,WAAA,CAAA,QAFA;AAGA,UAAA,QAAA,EAAA,WAAA,CAAA,MAHA;AAIA,UAAA,KAAA,EAAA,WAAA,CAAA,KAJA;AAKA,UAAA,IAAA,EAAA,OAAA,GAAA,OAAA,GAAA,OAAA,GAAA,OAAA,GAAA,QALA;AAMA,UAAA,QAAA,EAAA,QANA;AAOA,UAAA,YAAA,EAAA,KAAA,CAAA,cAAA,CAAA,CAAA,KAAA,KAPA;AAQA,UAAA,WAAA,EAAA,KAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CAAA,GAAA,SAAA,GAAA,IARA;AASA,UAAA,WAAA,EAAA,OAAA,GAAA,KAAA,GAAA;AATA,SAAA;AAWA,OAvBA,CADA;AA0BA,KA7DA;AA8DA,IAAA,UA9DA,wBA8DA;AAAA;;AACA,UAAA,CAAA,KAAA,YAAA,EAAA;AACA,eAAA,EAAA;AACA;;AACA,aACA,KAAA,YAAA,CACA;AADA,OAEA,MAFA,CAGA,UAAA,WAAA;AAAA,eACA,MAAA,CAAA,KAAA,CAAA,OAAA,CAAA,OAAA,CAAA,WAAA,CAAA,sBAAA,IAAA,CADA;AAAA,OAHA,EAMA,GANA,CAMA,UAAA,WAAA,EAAA;AACA,eAAA;AACA,UAAA,EAAA,EAAA,WAAA,CAAA,sBADA;AAEA,UAAA,IAAA,EAAA,WAAA,CAAA,SAAA,GAAA,GAAA,GAAA,WAAA,CAAA,QAFA;AAGA,UAAA,QAAA,EAAA,WAAA,CAAA,MAHA;AAIA,UAAA,KAAA,EAAA,WAAA,CAAA,KAJA;AAKA,UAAA,YAAA,EAAA,MAAA,CAAA,cAAA,CAAA,WAAA,CAAA,sBAAA,KAAA;AALA,SAAA;AAOA,OAdA,CADA;AAiBA,KAnFA;AAqFA,IAAA,YArFA,0BAqFA;AACA,aAAA,KAAA,OAAA,CAAA,MAAA;AACA;AAvFA,GAzBA;AAmHA,EAAA,OAnHA,qBAmHA;AAAA;;AACA,IAAA,QAAA,CAAA,kBAAA,CAAA,IAAA,GAAA,IAAA,CAAA,UAAA,YAAA,EAAA;AACA,MAAA,MAAA,CAAA,YAAA,GAAA,YAAA;AACA,KAFA;AAGA,GAvHA;AAyHA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,yBACA,GADA,EACA;AACA,MAAA,GAAA,CAAA,aAAA;AACA,WAAA,cAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,IAAA,CAAA,KACA,cADA,CACA,GAAA,CAAA,IAAA,CAAA,sBADA,CAAA;AAEA,KALA;AAMA,IAAA,cANA,0BAMA,IANA,EAMA;AACA,UAAA,KAAA,aAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,aAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,IAAA,IAAA,KAAA,aAAA,CAAA,CAAA,CAAA,EAAA;AACA,mBAAA,IAAA;AACA;AACA;AACA;;AACA,aAAA,KAAA;AACA,KAfA;AAgBA,IAAA,gBAhBA,4BAgBA,MAhBA,EAgBA;AACA,UAAA,KAAA,eAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,eAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,MAAA,IAAA,KAAA,eAAA,CAAA,CAAA,CAAA,EAAA;AACA,mBAAA,IAAA;AACA;AACA;AACA;;AACA,aAAA,KAAA;AACA,KAzBA;AA0BA,IAAA,kBA1BA,gCA0BA;AAAA;;AACA,WAAA,aAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA,IAAA,CAAA,EAAA;;AACA,QAAA,MAAA,CAAA,KAAA,CAAA,YAAA,EAAA,IAAA,CAAA,EAAA;AACA,OAHA;AAKA,WAAA,KAAA,CAAA,UAAA,CAAA,aAAA;AACA,WAAA,KAAA,CAAA,YAAA,CAAA,aAAA;AACA,WAAA,aAAA,GAAA,EAAA;AACA,WAAA,eAAA,GAAA,EAAA;AACA,KApCA;AAqCA,IAAA,aArCA,2BAqCA;AAAA;;AACA,WAAA,OAAA,GAAA,KAAA;AACA,WAAA,aAAA,GAAA,KAAA,UAAA,CAAA,MAAA,CACA,UAAA,IAAA;AAAA,eACA,MAAA,CAAA,iBAAA,CAAA,IAAA,EAAA,MAAA,CAAA,UAAA,CADA;AAAA,OADA,EAGA,GAHA,CAGA,UAAA,CAAA;AAAA,eAAA,CAAA;AAAA,OAHA,CAAA;AAIA,WAAA,kBAAA;AACA,WAAA,UAAA,GAAA,IAAA;AACA,WAAA,YAAA,GAAA,IAAA;AACA,KA9CA;AA+CA,IAAA,qBA/CA,mCA+CA;AAAA;;AACA,WAAA,eAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,IAAA,IAAA,QAAA,IAAA,MAAA,CAAA,IAAA,IAAA,OAAA,EAAA;AACA,UAAA,MAAA,CAAA,KAAA,CAAA,eAAA,EAAA,MAAA,CAAA,EAAA;AACA;AAAA,OAHA;AAIA,WAAA,KAAA,CAAA,YAAA,CAAA,aAAA;AACA,WAAA,eAAA,GAAA,EAAA;AACA,WAAA,aAAA,GAAA,EAAA;AACA,KAvDA;AAwDA,IAAA,gBAxDA,8BAwDA;AAAA;;AACA,WAAA,UAAA,GAAA,KAAA;AACA,WAAA,eAAA,GAAA,KAAA,cAAA,CAAA,MAAA,CACA,UAAA,MAAA;AAAA,eACA,MAAA,CAAA,iBAAA,CAAA,MAAA,EAAA,MAAA,CAAA,YAAA,CADA;AAAA,OADA,EAGA,GAHA,CAGA,UAAA,CAAA;AAAA,eAAA,CAAA;AAAA,OAHA,CAAA;AAIA,WAAA,qBAAA;AACA,WAAA,YAAA,GAAA,IAAA;AACA,WAAA,UAAA,GAAA,IAAA;AACA,KAjEA;AAkEA,IAAA,oBAlEA,gCAkEA,KAlEA,EAkEA;AACA,WAAA,eAAA,GAAA,KAAA;;AACA,UAAA,KAAA,aAAA,EAAA;AACA,aAAA,KAAA,CAAA,UAAA,CAAA,aAAA;AACA,aAAA,aAAA,GAAA,EAAA;AACA;AACA,KAxEA;AAyEA,IAAA,kBAzEA,8BAyEA,KAzEA,EAyEA;AACA,WAAA,aAAA,GAAA,KAAA;;AACA,UAAA,KAAA,eAAA,EAAA;AACA,aAAA,KAAA,CAAA,YAAA,CAAA,aAAA;AACA,aAAA,eAAA,GAAA,EAAA;AACA;AACA,KA/EA;AAgFA,IAAA,kBAhFA,gCAgFA;AACA,WAAA,aAAA,GAAA,EAAA;AACA,KAlFA;AAmFA,IAAA,oBAnFA,kCAmFA;AACA,WAAA,eAAA,GAAA,EAAA;AACA,KArFA;AAsFA,IAAA,UAtFA,sBAsFA,IAtFA,EAsFA;AACA,UAAA,IAAA,CAAA,CAAA,CAAA,KAAA,OAAA,EAAA;AACA,aAAA,KAAA,CAAA,sBAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AACA,OAFA,MAEA;AACA,aAAA,KAAA,CAAA,uBAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AACA;AACA,KA5FA;AA6FA,IAAA,iBA7FA,6BA6FA,OA7FA,EA6FA,MA7FA,EA6FA;AACA,UAAA,MAAA,EAAA;AACA,YAAA,OAAA,CAAA,KAAA,CAAA,WAAA,GAAA,QAAA,CAAA,MAAA,CAAA,WAAA,EAAA,CAAA,EAAA;AACA,iBAAA,IAAA;AACA,SAFA,MAGA,IAAA,OAAA,CAAA,IAAA,CAAA,WAAA,GAAA,QAAA,CAAA,MAAA,CAAA,WAAA,EAAA,CAAA,EAAA;AACA,iBAAA,IAAA;AACA,SAFA,MAEA,IAAA,OAAA,CAAA,QAAA,CAAA,WAAA,GAAA,QAAA,CAAA,MAAA,CAAA,WAAA,EAAA,CAAA,EAAA;AACA,iBAAA,IAAA;AACA,SAFA,MAEA;AAAA,iBAAA,KAAA;AAAA;AACA,OATA,MASA;AACA,eAAA,IAAA;AACA;AACA,KA1GA;AA2GA,IAAA,mBA3GA,+BA2GA,IA3GA,EA2GA,KA3GA,EA2GA;AACA,UAAA,CAAA,IAAA,CAAA,WAAA,EAAA;AACA,aAAA,KAAA,CAAA,YAAA,CAAA,SAAA,CAAA,KAAA;AACA;AACA,KA/GA;AAgHA,IAAA,WAhHA,uBAgHA,IAhHA,EAgHA,IAhHA,EAgHA,GAhHA,EAgHA;AACA;AACA,UAAA,SAAA,GAAA,KAAA,UAAA,CAAA,OAAA,CAAA,IAAA,CAAA,EAAA,CAAA;AACA,UAAA,SAAA,GAAA,KAAA,UAAA,CAAA,OAAA,CAAA,IAAA,CAAA,EAAA,CAAA;;AACA,UAAA,SAAA,IAAA,CAAA,IAAA,SAAA,IAAA,CAAA,EAAA;AACA,eAAA,SAAA,GAAA,SAAA;AACA,OAFA,MAEA,IAAA,SAAA,IAAA,CAAA,EAAA;AACA,eAAA,CAAA,CAAA;AACA,OAFA,MAEA,IAAA,SAAA,IAAA,CAAA,EAAA;AACA,eAAA,CAAA;AACA;;AACA,UAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA;AACA,UAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA;;AACA,UACA,OAAA,CAAA,KAAA,QAAA,IAAA,OAAA,CAAA,KAAA,QAAA,IACA,CAAA,YAAA,IAAA,IAAA,CAAA,YAAA,IAFA,EAGA;AACA;AACA,eAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA;AACA,OANA,MAMA;AACA;AACA,eAAA,IAAA,MAAA,CAAA,CAAA,EAAA,aAAA,CAAA,IAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AACA;AACA;AAvIA;AAzHA,CAAA","sourcesContent":["<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <b-card title=\"Gateway Users\" title-tag=\"h6\">\n\n          <b-form-group>\n            <b-input-group>\n              <b-input-group-text slot=\"prepend\">\n                <i class=\"fa fa-filter\"></i>\n              </b-input-group-text>\n              <b-form-input\n                v-model=\"userFilter\"\n                placeholder=\"Filter list of users\"\n                @change=\"onUserFilterChange\"\n              />\n            </b-input-group>\n          </b-form-group>\n\n          <b-table\n            hover\n            selectable\n            sticky-header\n            :items=\"nonMembers\"\n            :fields=\"userFields\"\n            :filter=\"userFilter\"\n            :select-mode=\"multi\"\n            :sort-compare=\"sortCompare\"\n            responsive=\"sm\"\n            ref=\"usersTable\"\n            head-variant=\"light\"\n            sort-by=\"name\"\n            @row-selected=\"onUsersRowSelected\"\n          >\n           <template slot=\"cell(selected)\" slot-scope=\"data\">\n              <span v-if=\"isUserSelected(data.item)\">\n                <i class=\"far fa-check-circle\"></i>\n              </span>\n           </template>\n\n            <template slot=\"cell(action)\" slot-scope=\"data\">\n              <b-button @click=\"toggleDetails(data)\">\n                {{data.detailsShowing ? 'Hide' : 'Show'}} Details\n              </b-button>\n            </template>\n\n            <template slot=\"row-details\" slot-scope=\"data\">\n              <group-members-details-container\n                :userProfile=\"data.item\"\n                :name=\"data.item.name\"\n                :id=\"data.item.id\"\n                @change-role=\"changeRole\"\n              />\n            </template>\n\n          </b-table>\n\n        </b-card>\n      </div>\n\n      <div>\n        <b-button-group vertical>\n\n          <b-button\n            style=\"margin-top:10px; margin-bottom:10px;\"\n            variant=\"primary\"\n            :disabled = \"selectedUsers.length<1\"\n            @click=\"addSelectedMembers\">\n            <!--Add Selected Members-->\n            <i class=\"fas fa-angle-right fa-lg\"></i>\n          </b-button>\n\n          <b-button\n            style=\"margin-top:10px; margin-bottom:10px;\"\n            variant=\"primary\"\n            :disabled = \"nonMembers.length<1\"\n            @click=\"showAdd = true\">\n            <!--Add All Members-->\n            <i class=\"fas fa-angle-double-right fa-lg\"></i>\n          </b-button>\n\n          <b-button\n            style=\"margin-top:10px; margin-bottom:10px;\"\n            variant=\"primary\"\n            :disabled = \"membersCount<2\"\n            @click=\"showRemove = true\">\n            <i class=\"fas fa-angle-double-left fa-lg\"></i>\n            <!--Remove All Members-->\n          </b-button>\n\n          <b-button\n            style=\"margin-top:10px; margin-bottom:10px;\"\n            variant=\"primary\"\n            :disabled = \"selectedMembers.length<1\"\n              @click=\"removeSelectedMembers\">\n              <i class=\"fas fa-angle-left fa-lg\"></i>\n              <!--Remove Selected Members-->\n          </b-button>\n\n          <b-modal\n            v-model=\"showRemove\"\n            title=\"Are you sure?\">\n            <p class=\"my-4\">\n              Do you really want to remove all members from\n              '<strong>{{group.name}}</strong>'?\n            </p>\n            <div slot=\"modal-footer\" class=\"w-100\">\n              <b-button\n                class=\"float-right ml-1\"\n                @click=\"removeAllMembers\">\n                Yes\n              </b-button>\n              <b-button\n                class=\"float-right ml-1\"\n                @click=\"showRemove = false\">\n                No\n              </b-button>\n            </div>\n          </b-modal>\n\n          <b-modal\n            v-model=\"showAdd\"\n            title=\"Are you sure?\">\n            <p class=\"my-4\">\n              Do you really want to add all users to\n              '<strong>{{group.name}}</strong>'?\n            </p>\n            <div slot=\"modal-footer\" class=\"w-100\">\n              <b-button\n                class=\"float-right ml-1\"\n                @click=\"addAllMembers\">\n                Yes\n              </b-button>\n              <b-button\n                class=\"float-right ml-1\"\n                @click=\"showAdd = false\">\n                No\n              </b-button>\n            </div>\n          </b-modal>\n\n        </b-button-group>\n      </div>\n\n      <div class=\"col\">\n        <b-card title=\"Group Members\" title-tag=\"h6\">\n\n          <b-form-group>\n            <b-input-group>\n              <b-input-group-text slot=\"prepend\">\n                <i class=\"fa fa-filter\"></i>\n              </b-input-group-text>\n              <b-form-input\n                v-model=\"memberFilter\"\n                placeholder=\"Filter list of members\"\n                @change=\"onMemberFilterChange\"\n              />\n            </b-input-group>\n          </b-form-group>\n\n          <b-table\n            v-if=\"membersCount > 0\"\n            hover\n            selectable\n            sticky-header\n            :items=\"currentMembers\"\n            :fields=\"memberFields\"\n            :filter=\"memberFilter\"\n            :select-mode=\"selectMode\"\n            :sort-compare=\"sortCompare\"\n            head-variant=\"light\"\n            responsive=\"sm\"\n            ref=\"membersTable\"\n            sort-by=\"name\"\n            @row-selected=\"onMembersRowSelected\"\n            @row-clicked=\"handleOwnerSelected\"\n          >\n\n           <template slot=\"cell(selected)\" slot-scope=\"data\">\n              <span v-if=\"isMemberSelected(data.item)\">\n                <i class=\"far fa-check-circle\"></i>\n              </span>\n           </template>\n\n            <template slot=\"cell(username)\" slot-scope=\"data\" >\n              {{data.value}}\n              <span\n                v-if= \"data.item.role == 'OWNER'\"\n                class=\"badge badge-primary\">\n                  Owner\n              </span>\n            </template>\n\n            <template slot=\"cell(action)\" slot-scope=\"data\" >\n              <b-button @click=\"toggleDetails(data)\">\n                {{data.detailsShowing ? 'Hide' : 'Show'}} Details\n              </b-button>\n            </template>\n\n            <template slot=\"row-details\" slot-scope=\"data\">\n              <group-members-details-container\n                :userProfile=\"data.item\"\n                :name=\"data.item.name\"\n                :id=\"data.item.id\"\n                :role=\"data.item.role\"\n                :isOwner=\"group.isOwner\"\n                @change-role=\"changeRole\"\n              />\n            </template>\n\n          </b-table>\n\n        </b-card>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { models, services } from \"django-airavata-api\";\nimport GroupMembersDetailsContainer from \"./GroupMembersDetailsContainer.vue\";\n\nexport default {\n  name: \"group-members-editor\",\n  components: {\n    GroupMembersDetailsContainer,\n  },\n  props: {\n    group: {\n      type: models.Group,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      userProfiles: null,\n      newMembers: [],\n      userFilter:null,\n      memberFilter:null,\n      selectedMembers: [],\n      selectedUsers: [],\n      showingDetails: {},\n      showRemove: false,\n      showAdd: false,\n    };\n  },\n\n  computed: {\n    members() {\n      return this.group.members ? this.group.members : [];\n    },\n    admins() {\n      return this.group.admins;\n    },\n    memberFields() {\n      return [\n        { key: \"selected\", label: \"\", sortable: false },\n        { key: \"username\", label: \"Username\", sortable: true },\n        { key: \"action\", label: \"Action\", sortable: false },\n      ];\n    },\n    userFields() {\n      return [\n        { key: \"selected\", label: \"\", sortable: false },\n        { key: \"username\", label: \"Username\", sortable: true },\n        { key: \"action\", label: \"Action\", sortable: false },\n      ];\n    },\n    userProfilesMap() {\n      if (!this.userProfiles) {\n        return null;\n      }\n      const result = {};\n      this.userProfiles.forEach((up) => {\n        result[up.airavataInternalUserId] = up;\n      });\n      return result;\n    },\n    currentMembers() {\n      if (!this.userProfilesMap) {\n        return [];\n      }\n      return (\n        this.members\n          // Filter out users that are missing profiles\n          .filter((m) => m in this.userProfilesMap)\n          .map((m) => {\n            const userProfile = this.userProfilesMap[m];\n            const isAdmin = this.admins.indexOf(m) >= 0;\n            const isOwner = this.group.ownerId === m;\n            // Owners can edit all members and admins can edit non-admin members\n            // (except the owners role isn't editable)\n            const editable =\n              !isOwner &&\n              (this.group.isOwner || (this.group.isAdmin && !isAdmin));\n            return {\n              id: m,\n              name: userProfile.firstName + \" \" + userProfile.lastName,\n              username: userProfile.userId,\n              email: userProfile.email,\n              role: isOwner ? \"OWNER\" : isAdmin ? \"ADMIN\" : \"MEMBER\",\n              editable: editable,\n              _showDetails: this.showingDetails[m] || false,\n              _rowVariant: this.newMembers.indexOf(m) >= 0 ? \"success\" : null,\n              _selectable: isOwner ? false : true,\n            };\n          })\n      );\n    },\n    nonMembers(){\n      if (!this.userProfiles) {\n        return [];\n      }\n      return (\n        this.userProfiles\n          // Filter out current members\n          .filter(\n            (userProfile) =>\n              this.group.members.indexOf(userProfile.airavataInternalUserId) < 0\n          )\n          .map((userProfile) => {\n            return {\n              id: userProfile.airavataInternalUserId,\n              name: userProfile.firstName + \" \" + userProfile.lastName,\n              username: userProfile.userId,\n              email: userProfile.email,\n              _showDetails: this.showingDetails[userProfile.airavataInternalUserId] || false,\n            };\n          })\n      );\n    },\n\n    membersCount() {\n      return this.members.length;\n    },\n  },\n\n  created() {\n    services.UserProfileService.list().then((userProfiles) => {\n      this.userProfiles = userProfiles;\n    });\n  },\n\n  methods: {\n    toggleDetails(row) {\n      row.toggleDetails();\n      this.showingDetails[row.item.airavataInternalUserId] = !this\n        .showingDetails[row.item.airavataInternalUserId];\n    },\n    isUserSelected(user){\n      if (this.selectedUsers.length>0){\n        for (let i = 0; i<this.selectedUsers.length;i++){\n         if (user==this.selectedUsers[i]){\n           return true;\n          }\n        }\n      }\n      return false;\n    },\n    isMemberSelected(member){\n      if (this.selectedMembers.length>0){\n        for (let i = 0; i<this.selectedMembers.length;i++){\n         if (member==this.selectedMembers[i]){\n           return true;\n          }\n        }\n      }\n      return false;\n    },\n    addSelectedMembers(){\n      this.selectedUsers.forEach((user)=>  {\n        this.newMembers.push(user.id);\n        this.$emit(\"add-member\", user.id);\n        }\n      );\n      this.$refs.usersTable.clearSelected();\n      this.$refs.membersTable.clearSelected();\n      this.selectedUsers=[];\n      this.selectedMembers=[];\n    },\n    addAllMembers(){\n      this.showAdd = false;\n      this.selectedUsers = this.nonMembers.filter(\n      (user) =>\n              this.filterUserProfile(user, this.userFilter)\n          ).map((x)=>(x));\n      this.addSelectedMembers();\n      this.userFilter=null;\n      this.memberfilter=null;\n    },\n    removeSelectedMembers() {\n      this.selectedMembers.forEach((member)=>{\n         if (member.role == \"MEMBER\"|| member.role ==\"ADMIN\"){\n          this.$emit(\"remove-member\", member.id);\n        }});\n      this.$refs.membersTable.clearSelected();\n      this.selectedMembers = [];\n      this.selectedUsers=[];\n    },\n    removeAllMembers(){\n      this.showRemove = false;\n      this.selectedMembers = this.currentMembers.filter(\n      (member) =>\n              this.filterUserProfile(member, this.memberFilter)\n          ).map((x)=>(x));\n      this.removeSelectedMembers();\n      this.memberFilter=null;\n      this.userFields=null;\n    },\n    onMembersRowSelected(items){\n      this.selectedMembers = items;\n      if (this.selectedUsers){\n        this.$refs.usersTable.clearSelected();\n        this.selectedUsers = [];\n      }\n    },\n    onUsersRowSelected(items){\n      this.selectedUsers = items;\n      if (this.selectedMembers){\n        this.$refs.membersTable.clearSelected();\n        this.selectedMembers = [];\n      }\n    },\n    onUserFilterChange(){\n      this.selectedUsers = [];\n    },\n    onMemberFilterChange(){\n      this.selectedMembers = [];\n    },\n    changeRole(item) {\n      if (item[1] === \"ADMIN\") {\n        this.$emit(\"change-role-to-admin\", item[0]);\n      } else {\n        this.$emit(\"change-role-to-member\", item[0]);\n      }\n    },\n    filterUserProfile(profile, filter){\n      if(filter){\n      if (profile.email.toLowerCase().includes(filter.toLowerCase())){\n        return true;\n      }\n      else if(profile.name.toLowerCase().includes(filter.toLowerCase())){\n        return true;\n      }else if(profile.username.toLowerCase().includes(filter.toLowerCase())){\n        return true;\n      }else{return false;}\n      }else{\n        return true;\n      }\n    },\n    handleOwnerSelected(item, index){\n      if(!item._selectable){\n        this.$refs.membersTable.selectRow(index);\n      }\n    },\n    sortCompare(aRow, bRow, key) {\n      // Sort new members before all others\n      const aNewIndex = this.newMembers.indexOf(aRow.id);\n      const bNewIndex = this.newMembers.indexOf(bRow.id);\n      if (aNewIndex >= 0 && bNewIndex >= 0) {\n        return aNewIndex - bNewIndex;\n      } else if (aNewIndex >= 0) {\n        return -1;\n      } else if (bNewIndex >= 0) {\n        return 1;\n      }\n      const a = aRow[key];\n      const b = bRow[key];\n      if (\n        (typeof a === \"number\" && typeof b === \"number\") ||\n        (a instanceof Date && b instanceof Date)\n      ) {\n        // If both compared fields are native numbers or both are dates\n        return a < b ? -1 : a > b ? 1 : 0;\n      } else {\n        // Otherwise stringify the field data and use String.prototype.localeCompare\n        return new String(a).localeCompare(new String(b));\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"static/django_airavata_groups/js/group_components"}]}