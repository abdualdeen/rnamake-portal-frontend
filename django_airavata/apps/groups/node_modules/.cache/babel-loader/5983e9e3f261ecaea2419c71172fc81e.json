{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/FetchUtils.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/FetchUtils.js","mtime":1639684988534},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/babel-loader/lib/index.js","mtime":1638646321845},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.starts-with\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport UnhandledErrorDispatcher from \"../errors/UnhandledErrorDispatcher\";\nimport Cache from \"./Cache\";\nvar count = 0;\n\nvar parseQueryParams = function parseQueryParams(url) {\n  var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n  if (queryParams && typeof queryParams != \"string\") {\n    queryParams = Object.keys(queryParams).map(function (key) {\n      return encodeURIComponent(key) + \"=\" + encodeURIComponent(queryParams[key]);\n    }).join(\"&\");\n  }\n\n  if (queryParams && queryParams !== \"\") {\n    return url + \"?\" + queryParams;\n  } else {\n    return url;\n  }\n};\n\nvar setSpinnerDisplay = function setSpinnerDisplay(display) {\n  var spinner = document.getElementById(\"airavata-spinner\");\n  spinner.style.display = display;\n};\n\nvar incrementCount = function incrementCount() {\n  count++;\n\n  if (count == 1) {\n    setSpinnerDisplay(\"block\");\n  }\n};\n\nvar decrementCount = function decrementCount() {\n  if (count > 0) {\n    count--;\n\n    if (count == 0) {\n      setSpinnerDisplay(\"none\");\n    }\n  }\n};\n\nvar responseCache = new Cache();\nexport default {\n  showSpinner: function showSpinner(promise) {\n    incrementCount();\n    promise.then(decrementCount, decrementCount); // return the promise so that it can be chained\n\n    return promise;\n  },\n  getCSRFToken: function getCSRFToken() {\n    var csrfToken = document.cookie.split(\";\").map(function (val) {\n      return val.trim();\n    }).filter(function (val) {\n      return val.startsWith(\"csrftoken\" + \"=\");\n    }).map(function (val) {\n      return val.split(\"=\")[1];\n    });\n\n    if (csrfToken) {\n      return csrfToken[0];\n    } else {\n      return null;\n    }\n  },\n  // For POST, PUT, DELETE\n  createHeaders: function createHeaders() {\n    var contentType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"application/json\";\n    var accept = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"application/json\";\n    var csrfToken = this.getCSRFToken();\n    var headers = new Headers({\n      \"Content-Type\": contentType,\n      Accept: accept\n    });\n\n    if (csrfToken != null) {\n      headers.set(\"X-CSRFToken\", csrfToken);\n    }\n\n    return headers;\n  },\n  post: function post(url, body) {\n    var queryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n\n    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        _ref$mediaType = _ref.mediaType,\n        mediaType = _ref$mediaType === void 0 ? \"application/json\" : _ref$mediaType,\n        _ref$ignoreErrors = _ref.ignoreErrors,\n        ignoreErrors = _ref$ignoreErrors === void 0 ? false : _ref$ignoreErrors,\n        _ref$showSpinner = _ref.showSpinner,\n        showSpinner = _ref$showSpinner === void 0 ? true : _ref$showSpinner,\n        _ref$responseType = _ref.responseType,\n        responseType = _ref$responseType === void 0 ? \"json\" : _ref$responseType;\n\n    var headers = this.createHeaders(mediaType); // Browsers automatically handle content type for FormData request bodies\n\n    if (body instanceof FormData) {\n      headers.delete(\"Content-Type\");\n    }\n\n    url = parseQueryParams(url, queryParams);\n    return this.processFetch(url, {\n      method: \"post\",\n      body: body instanceof FormData || typeof body === \"string\" ? body : JSON.stringify(body),\n      headers: headers,\n      credentials: \"same-origin\",\n      ignoreErrors: ignoreErrors,\n      showSpinner: showSpinner,\n      responseType: responseType\n    });\n  },\n  put: function put(url, body) {\n    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref2$mediaType = _ref2.mediaType,\n        mediaType = _ref2$mediaType === void 0 ? \"application/json\" : _ref2$mediaType,\n        _ref2$ignoreErrors = _ref2.ignoreErrors,\n        ignoreErrors = _ref2$ignoreErrors === void 0 ? false : _ref2$ignoreErrors,\n        _ref2$showSpinner = _ref2.showSpinner,\n        showSpinner = _ref2$showSpinner === void 0 ? true : _ref2$showSpinner,\n        _ref2$responseType = _ref2.responseType,\n        responseType = _ref2$responseType === void 0 ? \"json\" : _ref2$responseType;\n\n    var headers = this.createHeaders(mediaType); // Browsers automatically handle content type for FormData request bodies\n\n    if (body instanceof FormData) {\n      headers.delete(\"Content-Type\");\n    }\n\n    return this.processFetch(url, {\n      method: \"put\",\n      body: body instanceof FormData || typeof body === \"string\" ? body : JSON.stringify(body),\n      headers: headers,\n      credentials: \"same-origin\",\n      ignoreErrors: ignoreErrors,\n      showSpinner: showSpinner,\n      responseType: responseType\n    });\n  },\n  get: function get(url) {\n    var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref3$mediaType = _ref3.mediaType,\n        mediaType = _ref3$mediaType === void 0 ? \"application/json\" : _ref3$mediaType,\n        _ref3$ignoreErrors = _ref3.ignoreErrors,\n        ignoreErrors = _ref3$ignoreErrors === void 0 ? false : _ref3$ignoreErrors,\n        _ref3$showSpinner = _ref3.showSpinner,\n        showSpinner = _ref3$showSpinner === void 0 ? true : _ref3$showSpinner,\n        _ref3$cache = _ref3.cache,\n        cache = _ref3$cache === void 0 ? false : _ref3$cache,\n        _ref3$responseType = _ref3.responseType,\n        responseType = _ref3$responseType === void 0 ? \"json\" : _ref3$responseType;\n\n    if (queryParams && typeof queryParams != \"string\") {\n      queryParams = Object.keys(queryParams).map(function (key) {\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(queryParams[key]);\n      }).join(\"&\");\n    }\n\n    if (queryParams) {\n      url = url + \"?\" + queryParams;\n    }\n\n    if (cache) {\n      if (responseCache.has(url)) {\n        return responseCache.get(url);\n      }\n    }\n\n    var headers = new Headers({\n      Accept: mediaType\n    });\n    var fetchRequest = this.processFetch(url, {\n      method: \"get\",\n      headers: headers,\n      credentials: \"same-origin\",\n      ignoreErrors: ignoreErrors,\n      showSpinner: showSpinner,\n      responseType: responseType\n    });\n\n    if (cache) {\n      responseCache.put({\n        key: url,\n        value: fetchRequest\n      });\n    }\n\n    return fetchRequest;\n  },\n  delete: function _delete(url) {\n    var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref4$ignoreErrors = _ref4.ignoreErrors,\n        ignoreErrors = _ref4$ignoreErrors === void 0 ? false : _ref4$ignoreErrors,\n        _ref4$showSpinner = _ref4.showSpinner,\n        showSpinner = _ref4$showSpinner === void 0 ? true : _ref4$showSpinner,\n        _ref4$responseType = _ref4.responseType,\n        responseType = _ref4$responseType === void 0 ? \"json\" : _ref4$responseType;\n\n    var headers = this.createHeaders();\n    return this.processFetch(url, {\n      method: \"delete\",\n      headers: headers,\n      credentials: \"same-origin\",\n      ignoreErrors: ignoreErrors,\n      showSpinner: showSpinner,\n      responseType: responseType\n    });\n  },\n  processFetch: function processFetch(url, _ref5) {\n    var _this = this;\n\n    var _ref5$method = _ref5.method,\n        method = _ref5$method === void 0 ? \"get\" : _ref5$method,\n        headers = _ref5.headers,\n        _ref5$credentials = _ref5.credentials,\n        credentials = _ref5$credentials === void 0 ? \"same-origin\" : _ref5$credentials,\n        body = _ref5.body,\n        _ref5$ignoreErrors = _ref5.ignoreErrors,\n        ignoreErrors = _ref5$ignoreErrors === void 0 ? false : _ref5$ignoreErrors,\n        _ref5$showSpinner = _ref5.showSpinner,\n        showSpinner = _ref5$showSpinner === void 0 ? true : _ref5$showSpinner,\n        _ref5$responseType = _ref5.responseType,\n        responseType = _ref5$responseType === void 0 ? \"json\" : _ref5$responseType;\n    var fetchConfig = {\n      method: method,\n      headers: headers,\n      credentials: credentials\n    };\n\n    if (body) {\n      fetchConfig.body = body;\n    }\n\n    if (showSpinner) {\n      incrementCount();\n    }\n\n    return fetch(url, fetchConfig).then(function (response) {\n      if (showSpinner) {\n        decrementCount();\n      }\n\n      if (response.ok) {\n        // No response body\n        if (response.status === 204) {\n          return Promise.resolve();\n        } else {\n          incrementCount();\n          return Promise.resolve(response[responseType]().then(function (responseData) {\n            decrementCount();\n            return responseData;\n          }));\n        }\n      } else {\n        return response.json().then(function (json) {\n          // if json doesn't have detail key, stringify body\n          var errorMessage = json.detail;\n\n          if (!(\"detail\" in json)) {\n            errorMessage = \"Error: \" + JSON.stringify(json);\n          }\n\n          var error = new Error(errorMessage);\n          error.details = _this.createErrorDetails({\n            url: url,\n            body: body,\n            status: response.status,\n            responseBody: json\n          });\n          throw error;\n        }, function () {\n          // In case JSON parsing fails\n          var error = new Error(response.statusText);\n          error.details = _this.createErrorDetails({\n            url: url,\n            body: body,\n            status: response.status\n          });\n          throw error;\n        });\n      }\n    }, function (error) {\n      error.details = _this.createErrorDetails({\n        url: url,\n        body: body\n      });\n      throw error;\n    }).catch(function (error) {\n      if (showSpinner) {\n        decrementCount();\n      }\n\n      if (!ignoreErrors) {\n        _this.reportError(error);\n      }\n\n      throw error;\n    });\n  },\n  createErrorDetails: function createErrorDetails() {\n    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        url = _ref6.url,\n        body = _ref6.body,\n        _ref6$status = _ref6.status,\n        status = _ref6$status === void 0 ? null : _ref6$status,\n        _ref6$responseBody = _ref6.responseBody,\n        responseBody = _ref6$responseBody === void 0 ? null : _ref6$responseBody;\n\n    return {\n      url: url,\n      body: body,\n      status: status,\n      response: responseBody\n    };\n  },\n  reportError: function reportError(error) {\n    UnhandledErrorDispatcher.reportError({\n      message: error.message,\n      error: error,\n      details: error.details\n    });\n  }\n};",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/FetchUtils.js"],"names":["UnhandledErrorDispatcher","Cache","count","parseQueryParams","url","queryParams","Object","keys","map","key","encodeURIComponent","join","setSpinnerDisplay","display","spinner","document","getElementById","style","incrementCount","decrementCount","responseCache","showSpinner","promise","then","getCSRFToken","csrfToken","cookie","split","val","trim","filter","startsWith","createHeaders","contentType","accept","headers","Headers","Accept","set","post","body","mediaType","ignoreErrors","responseType","FormData","delete","processFetch","method","JSON","stringify","credentials","put","get","cache","has","fetchRequest","value","fetchConfig","fetch","response","ok","status","Promise","resolve","responseData","json","errorMessage","detail","error","Error","details","createErrorDetails","responseBody","statusText","catch","reportError","message"],"mappings":"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","sourcesContent":["import UnhandledErrorDispatcher from \"../errors/UnhandledErrorDispatcher\";\nimport Cache from \"./Cache\";\n\nvar count = 0;\nconst parseQueryParams = function (url, queryParams = \"\") {\n  if (queryParams && typeof queryParams != \"string\") {\n    queryParams = Object.keys(queryParams)\n      .map(\n        (key) =>\n          encodeURIComponent(key) + \"=\" + encodeURIComponent(queryParams[key])\n      )\n      .join(\"&\");\n  }\n  if (queryParams && queryParams !== \"\") {\n    return url + \"?\" + queryParams;\n  } else {\n    return url;\n  }\n};\n\nconst setSpinnerDisplay = function (display) {\n  let spinner = document.getElementById(\"airavata-spinner\");\n  spinner.style.display = display;\n};\n\nconst incrementCount = function () {\n  count++;\n  if (count == 1) {\n    setSpinnerDisplay(\"block\");\n  }\n};\nconst decrementCount = function () {\n  if (count > 0) {\n    count--;\n    if (count == 0) {\n      setSpinnerDisplay(\"none\");\n    }\n  }\n};\n\nconst responseCache = new Cache();\n\nexport default {\n  showSpinner: function (promise) {\n    incrementCount();\n    promise.then(decrementCount, decrementCount);\n    // return the promise so that it can be chained\n    return promise;\n  },\n  getCSRFToken: function () {\n    var csrfToken = document.cookie\n      .split(\";\")\n      .map((val) => val.trim())\n      .filter((val) => val.startsWith(\"csrftoken\" + \"=\"))\n      .map((val) => val.split(\"=\")[1]);\n    if (csrfToken) {\n      return csrfToken[0];\n    } else {\n      return null;\n    }\n  },\n  // For POST, PUT, DELETE\n  createHeaders: function (\n    contentType = \"application/json\",\n    accept = \"application/json\"\n  ) {\n    var csrfToken = this.getCSRFToken();\n    var headers = new Headers({\n      \"Content-Type\": contentType,\n      Accept: accept,\n    });\n    if (csrfToken != null) {\n      headers.set(\"X-CSRFToken\", csrfToken);\n    }\n    return headers;\n  },\n  post: function (\n    url,\n    body,\n    queryParams = \"\",\n    {\n      mediaType = \"application/json\",\n      ignoreErrors = false,\n      showSpinner = true,\n      responseType = \"json\",\n    } = {}\n  ) {\n    var headers = this.createHeaders(mediaType);\n    // Browsers automatically handle content type for FormData request bodies\n    if (body instanceof FormData) {\n      headers.delete(\"Content-Type\");\n    }\n    url = parseQueryParams(url, queryParams);\n    return this.processFetch(url, {\n      method: \"post\",\n      body:\n        body instanceof FormData || typeof body === \"string\"\n          ? body\n          : JSON.stringify(body),\n      headers: headers,\n      credentials: \"same-origin\",\n      ignoreErrors,\n      showSpinner,\n      responseType,\n    });\n  },\n  put: function (\n    url,\n    body,\n    {\n      mediaType = \"application/json\",\n      ignoreErrors = false,\n      showSpinner = true,\n      responseType = \"json\",\n    } = {}\n  ) {\n    var headers = this.createHeaders(mediaType);\n    // Browsers automatically handle content type for FormData request bodies\n    if (body instanceof FormData) {\n      headers.delete(\"Content-Type\");\n    }\n    return this.processFetch(url, {\n      method: \"put\",\n      body:\n        body instanceof FormData || typeof body === \"string\"\n          ? body\n          : JSON.stringify(body),\n      headers: headers,\n      credentials: \"same-origin\",\n      ignoreErrors,\n      showSpinner,\n      responseType,\n    });\n  },\n  get: function (\n    url,\n    queryParams = \"\",\n    {\n      mediaType = \"application/json\",\n      ignoreErrors = false,\n      showSpinner = true,\n      cache = false,\n      responseType = \"json\",\n    } = {}\n  ) {\n    if (queryParams && typeof queryParams != \"string\") {\n      queryParams = Object.keys(queryParams)\n        .map(\n          (key) =>\n            encodeURIComponent(key) + \"=\" + encodeURIComponent(queryParams[key])\n        )\n        .join(\"&\");\n    }\n    if (queryParams) {\n      url = url + \"?\" + queryParams;\n    }\n    if (cache) {\n      if (responseCache.has(url)) {\n        return responseCache.get(url);\n      }\n    }\n    var headers = new Headers({ Accept: mediaType });\n    const fetchRequest = this.processFetch(url, {\n      method: \"get\",\n      headers: headers,\n      credentials: \"same-origin\",\n      ignoreErrors,\n      showSpinner,\n      responseType,\n    });\n    if (cache) {\n      responseCache.put({ key: url, value: fetchRequest });\n    }\n    return fetchRequest;\n  },\n  delete: function (\n    url,\n    { ignoreErrors = false, showSpinner = true, responseType = \"json\" } = {}\n  ) {\n    var headers = this.createHeaders();\n    return this.processFetch(url, {\n      method: \"delete\",\n      headers: headers,\n      credentials: \"same-origin\",\n      ignoreErrors,\n      showSpinner,\n      responseType,\n    });\n  },\n  processFetch: function (\n    url,\n    {\n      method = \"get\",\n      headers,\n      credentials = \"same-origin\",\n      body,\n      ignoreErrors = false,\n      showSpinner = true,\n      responseType = \"json\",\n    }\n  ) {\n    const fetchConfig = {\n      method,\n      headers,\n      credentials,\n    };\n    if (body) {\n      fetchConfig.body = body;\n    }\n    if (showSpinner) {\n      incrementCount();\n    }\n    return fetch(url, fetchConfig)\n      .then(\n        (response) => {\n          if (showSpinner) {\n            decrementCount();\n          }\n          if (response.ok) {\n            // No response body\n            if (response.status === 204) {\n              return Promise.resolve();\n            } else {\n              incrementCount();\n              return Promise.resolve(\n                response[responseType]().then((responseData) => {\n                  decrementCount();\n                  return responseData;\n                })\n              );\n            }\n          } else {\n            return response.json().then(\n              (json) => {\n                // if json doesn't have detail key, stringify body\n                let errorMessage = json.detail;\n                if (!(\"detail\" in json)) {\n                  errorMessage = \"Error: \" + JSON.stringify(json);\n                }\n                const error = new Error(errorMessage);\n                error.details = this.createErrorDetails({\n                  url,\n                  body,\n                  status: response.status,\n                  responseBody: json,\n                });\n                throw error;\n              },\n              () => {\n                // In case JSON parsing fails\n                const error = new Error(response.statusText);\n                error.details = this.createErrorDetails({\n                  url,\n                  body,\n                  status: response.status,\n                });\n                throw error;\n              }\n            );\n          }\n        },\n        (error) => {\n          error.details = this.createErrorDetails({ url, body });\n          throw error;\n        }\n      )\n      .catch((error) => {\n        if (showSpinner) {\n          decrementCount();\n        }\n        if (!ignoreErrors) {\n          this.reportError(error);\n        }\n        throw error;\n      });\n  },\n  createErrorDetails: function ({\n    url,\n    body,\n    status = null,\n    responseBody = null,\n  } = {}) {\n    return {\n      url,\n      body,\n      status,\n      response: responseBody,\n    };\n  },\n  reportError(error) {\n    UnhandledErrorDispatcher.reportError({\n      message: error.message,\n      error: error,\n      details: error.details,\n    });\n  },\n};\n"]}]}