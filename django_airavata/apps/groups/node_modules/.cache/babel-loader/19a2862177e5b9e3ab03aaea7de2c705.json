{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/BaseModel.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/BaseModel.js","mtime":1638641844319},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/babel-loader/lib/index.js","mtime":1638646321845},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _classCallCheck from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport BaseEnum from \"./BaseEnum\";\n\nvar BaseModel = /*#__PURE__*/function () {\n  /**\n   * Create and optionally populate fields of a model instance.\n   * - fields: an Array of field definitions. Each field definition can either\n   *   be just the name of the field as a string, or an object with the\n   *   following properties:\n   *   - name (required)\n   *   - type (required: one of 'string', 'boolean', 'number', 'date', or a class reference)\n   *   - list (optional, boolean)\n   *   - default (optional, the default value to be used, if not specified then null is used)\n   * - data: a data object, typically a deserialized JSON response\n   */\n  function BaseModel(fields) {\n    var _this = this;\n\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, BaseModel);\n\n    fields.forEach(function (fieldDefinition) {\n      if (typeof fieldDefinition === \"string\") {\n        _this[fieldDefinition] = _this.convertSimpleField(data[fieldDefinition], null);\n      } else {\n        // fieldDefinition must be an object\n        var fieldName = fieldDefinition.name;\n        var fieldType = fieldDefinition.type;\n        var fieldIsList = typeof fieldDefinition.list !== \"undefined\" ? fieldDefinition.list : false;\n        var fieldDefault = typeof fieldDefinition.default !== \"undefined\" ? _this.getDefaultValue(fieldDefinition.default) : null;\n        var fieldValue = data[fieldName];\n\n        if (fieldIsList) {\n          _this[fieldName] = fieldValue ? fieldValue.map(function (item) {\n            return _this.convertField(fieldType, item, fieldDefault);\n          }) : fieldDefault;\n        } else {\n          _this[fieldName] = _this.convertField(fieldType, fieldValue, fieldDefault);\n        }\n      }\n    });\n  }\n\n  _createClass(BaseModel, [{\n    key: \"convertField\",\n    value: function convertField(fieldType, fieldValue, fieldDefault) {\n      if (fieldValue === null || typeof fieldValue === \"undefined\") {\n        return fieldDefault;\n      } else if (fieldType === \"string\" || fieldType === \"boolean\" || fieldType === \"number\") {\n        return this.convertSimpleField(fieldValue, fieldDefault);\n      } else if (fieldType === \"date\") {\n        return this.convertDateField(fieldValue, fieldDefault);\n      } else if (typeof fieldType === \"function\") {\n        // Assume that it is another BaseModel class\n        return this.convertModelField(fieldType, fieldValue, fieldDefault);\n      }\n    }\n  }, {\n    key: \"convertSimpleField\",\n    value: function convertSimpleField(fieldValue, fieldDefault) {\n      return typeof fieldValue !== \"undefined\" ? fieldValue : fieldDefault;\n    }\n  }, {\n    key: \"convertDateField\",\n    value: function convertDateField(fieldValue, fieldDefault) {\n      return typeof fieldValue !== \"undefined\" ? new Date(fieldValue) : fieldDefault;\n    }\n  }, {\n    key: \"convertModelField\",\n    value: function convertModelField(modelClass, fieldValue, fieldDefault) {\n      if (typeof fieldValue !== \"undefined\") {\n        if (modelClass.prototype instanceof BaseEnum) {\n          // When cloning the fieldValue is an enum instance\n          if (fieldValue instanceof BaseEnum) {\n            return fieldValue;\n          }\n\n          var enumValue = null;\n\n          if (typeof fieldValue === \"string\") {\n            // convert by name if type is string\n            enumValue = modelClass.byName(fieldValue);\n          } else {\n            // Otherwise it is an integer that we need to convert to enum\n            enumValue = modelClass.byValue(fieldValue);\n          }\n\n          if (!enumValue) {\n            // enum wasn't found, construct an enum instance from the value\n            return new BaseEnum(\"Unknown value: \".concat(fieldValue), fieldValue);\n          } else {\n            return enumValue;\n          }\n        } else if (fieldValue instanceof modelClass) {\n          // No conversion necessary, just return the fieldValue\n          return fieldValue;\n        } else {\n          return new modelClass(fieldValue);\n        }\n      }\n\n      return fieldDefault;\n    }\n  }, {\n    key: \"getDefaultValue\",\n    value: function getDefaultValue(fieldDefault) {\n      if (typeof fieldDefault === \"function\") {\n        return fieldDefault();\n      } else {\n        return fieldDefault;\n      }\n    }\n  }, {\n    key: \"validate\",\n    value:\n    /**\n     * Override to provide validation. If there are validation errors this\n     * method should return a dictionary where keys are property names and\n     * values are an array of error messages.\n     */\n    function validate() {\n      return null;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty(value) {\n      return value === null || typeof value === \"string\" && value.trim() === \"\" || value instanceof Array && value.length === 0;\n    }\n    /**\n     * Return a fully deep cloned instance of this instance.\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(this);\n    }\n  }], [{\n    key: \"defaultNewInstance\",\n    value: function defaultNewInstance(classRef) {\n      return function () {\n        return new classRef();\n      };\n    }\n  }]);\n\n  return BaseModel;\n}();\n\nexport { BaseModel as default };",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/BaseModel.js"],"names":["BaseEnum","BaseModel","fields","data","forEach","fieldDefinition","convertSimpleField","fieldName","name","fieldType","type","fieldIsList","list","fieldDefault","default","getDefaultValue","fieldValue","map","item","convertField","convertDateField","convertModelField","Date","modelClass","prototype","enumValue","byName","byValue","value","trim","Array","length","constructor","classRef"],"mappings":"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","sourcesContent":["import BaseEnum from \"./BaseEnum\";\n\nexport default class BaseModel {\n  /**\n   * Create and optionally populate fields of a model instance.\n   * - fields: an Array of field definitions. Each field definition can either\n   *   be just the name of the field as a string, or an object with the\n   *   following properties:\n   *   - name (required)\n   *   - type (required: one of 'string', 'boolean', 'number', 'date', or a class reference)\n   *   - list (optional, boolean)\n   *   - default (optional, the default value to be used, if not specified then null is used)\n   * - data: a data object, typically a deserialized JSON response\n   */\n  constructor(fields, data = {}) {\n    fields.forEach((fieldDefinition) => {\n      if (typeof fieldDefinition === \"string\") {\n        this[fieldDefinition] = this.convertSimpleField(\n          data[fieldDefinition],\n          null\n        );\n      } else {\n        // fieldDefinition must be an object\n        let fieldName = fieldDefinition.name;\n        let fieldType = fieldDefinition.type;\n        let fieldIsList =\n          typeof fieldDefinition.list !== \"undefined\"\n            ? fieldDefinition.list\n            : false;\n        let fieldDefault =\n          typeof fieldDefinition.default !== \"undefined\"\n            ? this.getDefaultValue(fieldDefinition.default)\n            : null;\n        let fieldValue = data[fieldName];\n        if (fieldIsList) {\n          this[fieldName] = fieldValue\n            ? fieldValue.map((item) =>\n                this.convertField(fieldType, item, fieldDefault)\n              )\n            : fieldDefault;\n        } else {\n          this[fieldName] = this.convertField(\n            fieldType,\n            fieldValue,\n            fieldDefault\n          );\n        }\n      }\n    });\n  }\n\n  convertField(fieldType, fieldValue, fieldDefault) {\n    if (fieldValue === null || typeof fieldValue === \"undefined\") {\n      return fieldDefault;\n    } else if (\n      fieldType === \"string\" ||\n      fieldType === \"boolean\" ||\n      fieldType === \"number\"\n    ) {\n      return this.convertSimpleField(fieldValue, fieldDefault);\n    } else if (fieldType === \"date\") {\n      return this.convertDateField(fieldValue, fieldDefault);\n    } else if (typeof fieldType === \"function\") {\n      // Assume that it is another BaseModel class\n      return this.convertModelField(fieldType, fieldValue, fieldDefault);\n    }\n  }\n\n  convertSimpleField(fieldValue, fieldDefault) {\n    return typeof fieldValue !== \"undefined\" ? fieldValue : fieldDefault;\n  }\n\n  convertDateField(fieldValue, fieldDefault) {\n    return typeof fieldValue !== \"undefined\"\n      ? new Date(fieldValue)\n      : fieldDefault;\n  }\n\n  convertModelField(modelClass, fieldValue, fieldDefault) {\n    if (typeof fieldValue !== \"undefined\") {\n      if (modelClass.prototype instanceof BaseEnum) {\n        // When cloning the fieldValue is an enum instance\n        if (fieldValue instanceof BaseEnum) {\n          return fieldValue;\n        }\n        let enumValue = null;\n        if (typeof fieldValue === \"string\") {\n          // convert by name if type is string\n          enumValue = modelClass.byName(fieldValue);\n        } else {\n          // Otherwise it is an integer that we need to convert to enum\n          enumValue = modelClass.byValue(fieldValue);\n        }\n        if (!enumValue) {\n          // enum wasn't found, construct an enum instance from the value\n          return new BaseEnum(`Unknown value: ${fieldValue}`, fieldValue);\n        } else {\n          return enumValue;\n        }\n      } else if (fieldValue instanceof modelClass) {\n        // No conversion necessary, just return the fieldValue\n        return fieldValue;\n      } else {\n        return new modelClass(fieldValue);\n      }\n    }\n    return fieldDefault;\n  }\n\n  getDefaultValue(fieldDefault) {\n    if (typeof fieldDefault === \"function\") {\n      return fieldDefault();\n    } else {\n      return fieldDefault;\n    }\n  }\n\n  static defaultNewInstance(classRef) {\n    return () => new classRef();\n  }\n\n  /**\n   * Override to provide validation. If there are validation errors this\n   * method should return a dictionary where keys are property names and\n   * values are an array of error messages.\n   */\n  validate() {\n    return null;\n  }\n\n  isEmpty(value) {\n    return (\n      value === null ||\n      (typeof value === \"string\" && value.trim() === \"\") ||\n      (value instanceof Array && value.length === 0)\n    );\n  }\n\n  /**\n   * Return a fully deep cloned instance of this instance.\n   */\n  clone() {\n    return new this.constructor(this);\n  }\n}\n"]}]}