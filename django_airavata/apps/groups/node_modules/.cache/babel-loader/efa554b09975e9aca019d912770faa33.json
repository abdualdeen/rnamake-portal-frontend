{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/Uppy.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/Uppy.vue","mtime":1638641844579},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/babel-loader/lib/index.js","mtime":1638646321845},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/vue-loader/lib/index.js","mtime":1638646324785}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { services, utils } from \"django-airavata-api\";\nimport Uppy from \"@uppy/core\";\nimport DragDrop from \"@uppy/drag-drop\";\nimport StatusBar from \"@uppy/status-bar\";\nimport Tus from \"@uppy/tus\";\nimport XHRUpload from \"@uppy/xhr-upload\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/status-bar/dist/style.min.css\";\nimport \"@uppy/drag-drop/dist/style.min.css\";\nexport default {\n  name: \"uppy\",\n  props: {\n    xhrUploadEndpoint: {\n      type: String,\n      required: true\n    },\n    // endpoint should accept POST request. Request will include form data with\n    // the key uploadURL.\n    tusUploadFinishEndpoint: {\n      type: String,\n      required: false\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    services.SettingsService.get().then(function (s) {\n      _this.settings = s;\n\n      _this.initUppy();\n    });\n  },\n  destroyed: function destroyed() {\n    if (this.uppy) {\n      this.uppy.close();\n    }\n  },\n  data: function data() {\n    return {\n      uppy: null,\n      restrictionFailedMessage: null,\n      settings: null\n    };\n  },\n  computed: {\n    maxFileUploadSizeMB: function maxFileUploadSizeMB() {\n      return this.settings ? this.settings.fileUploadMaxFileSize / 1024 / 1024 : 0;\n    },\n    maxFileUploadSizeMessage: function maxFileUploadSizeMessage() {\n      if (this.maxFileUploadSizeMB) {\n        return \"Max file upload size is \" + Math.round(this.maxFileUploadSizeMB) + \" MB\";\n      } else {\n        return null;\n      }\n    },\n    restrictionFailed: function restrictionFailed() {\n      return this.restrictionFailedMessage != null;\n    }\n  },\n  methods: {\n    initUppy: function initUppy() {\n      var _this2 = this;\n\n      this.uppy = Uppy({\n        autoProceed: true,\n        debug: true,\n        restrictions: {\n          maxNumberOfFiles: this.multiple ? null : 1,\n          maxFileSize: this.settings.fileUploadMaxFileSize\n        }\n      });\n      this.uppy.use(DragDrop, {\n        target: this.$refs.dragDrop,\n        note: this.maxFileUploadSizeMessage\n      });\n      this.uppy.use(StatusBar, {\n        target: this.$refs.statusBar,\n        hideUploadButton: true,\n        hideAfterFinish: false\n      });\n\n      if (this.settings.tusEndpoint) {\n        this.uppy.use(Tus, {\n          endpoint: this.settings.tusEndpoint\n        });\n        this.uppy.on(\"upload-success\", function (file, response) {\n          var data = new FormData();\n          data.append(\"uploadURL\", response.uploadURL);\n          utils.FetchUtils.post(_this2.tusUploadFinishEndpoint, data, \"\", {\n            showSpinner: false\n          }).then(function (result) {\n            _this2.$emit(\"upload-success\", result);\n          });\n        });\n      } else {\n        this.uppy.use(XHRUpload, {\n          endpoint: this.xhrUploadEndpoint,\n          withCredentials: true,\n          headers: {\n            \"X-CSRFToken\": utils.FetchUtils.getCSRFToken()\n          },\n          fieldName: \"file\"\n        });\n        this.uppy.on(\"upload-success\", function (file, response) {\n          _this2.$emit(\"upload-success\", response.body);\n        });\n      }\n\n      this.uppy.on(\"upload\", function () {\n        _this2.$emit(\"upload-started\");\n      });\n      this.uppy.on(\"complete\", function () {\n        _this2.$emit(\"upload-finished\");\n\n        _this2.restrictionFailedMessage = null;\n      });\n      this.uppy.on(\"restriction-failed\", function (file, error) {\n        _this2.restrictionFailedMessage = \"\".concat(file.name, \": \").concat(error.message);\n      });\n    },\n    reset: function reset() {\n      this.uppy.reset();\n    }\n  },\n  watch: {\n    xhrUploadEndpoint: function xhrUploadEndpoint(val) {\n      // Update the xhrUploadEndpoint configuration on XHRUpload whenever it changes\n      if (this.uppy && this.settings && !this.settings.tusEndpoint) {\n        this.uppy.getPlugin(\"XHRUpload\").setOptions({\n          endpoint: val\n        });\n      }\n    }\n  }\n};",{"version":3,"sources":["Uppy.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA,SAAA,QAAA,EAAA,KAAA,QAAA,qBAAA;AAEA,OAAA,IAAA,MAAA,YAAA;AACA,OAAA,QAAA,MAAA,iBAAA;AACA,OAAA,SAAA,MAAA,kBAAA;AACA,OAAA,GAAA,MAAA,WAAA;AACA,OAAA,SAAA,MAAA,kBAAA;AAEA,OAAA,+BAAA;AACA,OAAA,qCAAA;AACA,OAAA,oCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,iBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA;AACA;AACA,IAAA,uBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KAPA;AAWA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAXA,GAFA;AAkBA,EAAA,OAlBA,qBAkBA;AAAA;;AACA,IAAA,QAAA,CAAA,eAAA,CAAA,GAAA,GAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AACA,MAAA,KAAA,CAAA,QAAA,GAAA,CAAA;;AACA,MAAA,KAAA,CAAA,QAAA;AACA,KAHA;AAIA,GAvBA;AAwBA,EAAA,SAxBA,uBAwBA;AACA,QAAA,KAAA,IAAA,EAAA;AACA,WAAA,IAAA,CAAA,KAAA;AACA;AACA,GA5BA;AA6BA,EAAA,IA7BA,kBA6BA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,IADA;AAEA,MAAA,wBAAA,EAAA,IAFA;AAGA,MAAA,QAAA,EAAA;AAHA,KAAA;AAKA,GAnCA;AAoCA,EAAA,QAAA,EAAA;AACA,IAAA,mBADA,iCACA;AACA,aAAA,KAAA,QAAA,GACA,KAAA,QAAA,CAAA,qBAAA,GAAA,IAAA,GAAA,IADA,GAEA,CAFA;AAGA,KALA;AAMA,IAAA,wBANA,sCAMA;AACA,UAAA,KAAA,mBAAA,EAAA;AACA,eACA,6BACA,IAAA,CAAA,KAAA,CAAA,KAAA,mBAAA,CADA,GAEA,KAHA;AAKA,OANA,MAMA;AACA,eAAA,IAAA;AACA;AACA,KAhBA;AAiBA,IAAA,iBAjBA,+BAiBA;AACA,aAAA,KAAA,wBAAA,IAAA,IAAA;AACA;AAnBA,GApCA;AAyDA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AAAA;;AACA,WAAA,IAAA,GAAA,IAAA,CAAA;AACA,QAAA,WAAA,EAAA,IADA;AAEA,QAAA,KAAA,EAAA,IAFA;AAGA,QAAA,YAAA,EAAA;AACA,UAAA,gBAAA,EAAA,KAAA,QAAA,GAAA,IAAA,GAAA,CADA;AAEA,UAAA,WAAA,EAAA,KAAA,QAAA,CAAA;AAFA;AAHA,OAAA,CAAA;AAQA,WAAA,IAAA,CAAA,GAAA,CAAA,QAAA,EAAA;AACA,QAAA,MAAA,EAAA,KAAA,KAAA,CAAA,QADA;AAEA,QAAA,IAAA,EAAA,KAAA;AAFA,OAAA;AAIA,WAAA,IAAA,CAAA,GAAA,CAAA,SAAA,EAAA;AACA,QAAA,MAAA,EAAA,KAAA,KAAA,CAAA,SADA;AAEA,QAAA,gBAAA,EAAA,IAFA;AAGA,QAAA,eAAA,EAAA;AAHA,OAAA;;AAKA,UAAA,KAAA,QAAA,CAAA,WAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,GAAA,EAAA;AAAA,UAAA,QAAA,EAAA,KAAA,QAAA,CAAA;AAAA,SAAA;AACA,aAAA,IAAA,CAAA,EAAA,CAAA,gBAAA,EAAA,UAAA,IAAA,EAAA,QAAA,EAAA;AACA,cAAA,IAAA,GAAA,IAAA,QAAA,EAAA;AACA,UAAA,IAAA,CAAA,MAAA,CAAA,WAAA,EAAA,QAAA,CAAA,SAAA;AACA,UAAA,KAAA,CAAA,UAAA,CAAA,IAAA,CAAA,MAAA,CAAA,uBAAA,EAAA,IAAA,EAAA,EAAA,EAAA;AACA,YAAA,WAAA,EAAA;AADA,WAAA,EAEA,IAFA,CAEA,UAAA,MAAA,EAAA;AACA,YAAA,MAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,MAAA;AACA,WAJA;AAKA,SARA;AASA,OAXA,MAWA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,SAAA,EAAA;AACA,UAAA,QAAA,EAAA,KAAA,iBADA;AAEA,UAAA,eAAA,EAAA,IAFA;AAGA,UAAA,OAAA,EAAA;AACA,2BAAA,KAAA,CAAA,UAAA,CAAA,YAAA;AADA,WAHA;AAMA,UAAA,SAAA,EAAA;AANA,SAAA;AAQA,aAAA,IAAA,CAAA,EAAA,CAAA,gBAAA,EAAA,UAAA,IAAA,EAAA,QAAA,EAAA;AACA,UAAA,MAAA,CAAA,KAAA,CAAA,gBAAA,EAAA,QAAA,CAAA,IAAA;AACA,SAFA;AAGA;;AACA,WAAA,IAAA,CAAA,EAAA,CAAA,QAAA,EAAA,YAAA;AACA,QAAA,MAAA,CAAA,KAAA,CAAA,gBAAA;AACA,OAFA;AAGA,WAAA,IAAA,CAAA,EAAA,CAAA,UAAA,EAAA,YAAA;AACA,QAAA,MAAA,CAAA,KAAA,CAAA,iBAAA;;AACA,QAAA,MAAA,CAAA,wBAAA,GAAA,IAAA;AACA,OAHA;AAIA,WAAA,IAAA,CAAA,EAAA,CAAA,oBAAA,EAAA,UAAA,IAAA,EAAA,KAAA,EAAA;AACA,QAAA,MAAA,CAAA,wBAAA,aAAA,IAAA,CAAA,IAAA,eAAA,KAAA,CAAA,OAAA;AACA,OAFA;AAGA,KArDA;AAsDA,IAAA,KAtDA,mBAsDA;AACA,WAAA,IAAA,CAAA,KAAA;AACA;AAxDA,GAzDA;AAmHA,EAAA,KAAA,EAAA;AACA,IAAA,iBADA,6BACA,GADA,EACA;AACA;AACA,UAAA,KAAA,IAAA,IAAA,KAAA,QAAA,IAAA,CAAA,KAAA,QAAA,CAAA,WAAA,EAAA;AACA,aAAA,IAAA,CAAA,SAAA,CAAA,WAAA,EAAA,UAAA,CAAA;AACA,UAAA,QAAA,EAAA;AADA,SAAA;AAGA;AACA;AARA;AAnHA,CAAA","sourcesContent":["<template>\n  <div class=\"custom-Uppy\">\n    <div ref=\"dragDrop\" />\n    <div ref=\"statusBar\" />\n    <b-alert class=\"mt-1\" :show=\"restrictionFailed\" variant=\"danger\">{{\n      restrictionFailedMessage\n    }}</b-alert>\n  </div>\n</template>\n\n<script>\nimport { services, utils } from \"django-airavata-api\";\n\nimport Uppy from \"@uppy/core\";\nimport DragDrop from \"@uppy/drag-drop\";\nimport StatusBar from \"@uppy/status-bar\";\nimport Tus from \"@uppy/tus\";\nimport XHRUpload from \"@uppy/xhr-upload\";\n\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/status-bar/dist/style.min.css\";\nimport \"@uppy/drag-drop/dist/style.min.css\";\n\nexport default {\n  name: \"uppy\",\n  props: {\n    xhrUploadEndpoint: {\n      type: String,\n      required: true,\n    },\n    // endpoint should accept POST request. Request will include form data with\n    // the key uploadURL.\n    tusUploadFinishEndpoint: {\n      type: String,\n      required: false,\n    },\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  mounted() {\n    services.SettingsService.get().then((s) => {\n      this.settings = s;\n      this.initUppy();\n    });\n  },\n  destroyed() {\n    if (this.uppy) {\n      this.uppy.close();\n    }\n  },\n  data() {\n    return {\n      uppy: null,\n      restrictionFailedMessage: null,\n      settings: null,\n    };\n  },\n  computed: {\n    maxFileUploadSizeMB() {\n      return this.settings\n        ? this.settings.fileUploadMaxFileSize / 1024 / 1024\n        : 0;\n    },\n    maxFileUploadSizeMessage() {\n      if (this.maxFileUploadSizeMB) {\n        return (\n          \"Max file upload size is \" +\n          Math.round(this.maxFileUploadSizeMB) +\n          \" MB\"\n        );\n      } else {\n        return null;\n      }\n    },\n    restrictionFailed() {\n      return this.restrictionFailedMessage != null;\n    },\n  },\n  methods: {\n    initUppy() {\n      this.uppy = Uppy({\n        autoProceed: true,\n        debug: true,\n        restrictions: {\n          maxNumberOfFiles: this.multiple ? null : 1,\n          maxFileSize: this.settings.fileUploadMaxFileSize,\n        },\n      });\n      this.uppy.use(DragDrop, {\n        target: this.$refs.dragDrop,\n        note: this.maxFileUploadSizeMessage,\n      });\n      this.uppy.use(StatusBar, {\n        target: this.$refs.statusBar,\n        hideUploadButton: true,\n        hideAfterFinish: false,\n      });\n      if (this.settings.tusEndpoint) {\n        this.uppy.use(Tus, { endpoint: this.settings.tusEndpoint });\n        this.uppy.on(\"upload-success\", (file, response) => {\n          const data = new FormData();\n          data.append(\"uploadURL\", response.uploadURL);\n          utils.FetchUtils.post(this.tusUploadFinishEndpoint, data, \"\", {\n            showSpinner: false,\n          }).then((result) => {\n            this.$emit(\"upload-success\", result);\n          });\n        });\n      } else {\n        this.uppy.use(XHRUpload, {\n          endpoint: this.xhrUploadEndpoint,\n          withCredentials: true,\n          headers: {\n            \"X-CSRFToken\": utils.FetchUtils.getCSRFToken(),\n          },\n          fieldName: \"file\",\n        });\n        this.uppy.on(\"upload-success\", (file, response) => {\n          this.$emit(\"upload-success\", response.body);\n        });\n      }\n      this.uppy.on(\"upload\", () => {\n        this.$emit(\"upload-started\");\n      });\n      this.uppy.on(\"complete\", () => {\n        this.$emit(\"upload-finished\");\n        this.restrictionFailedMessage = null;\n      });\n      this.uppy.on(\"restriction-failed\", (file, error) => {\n        this.restrictionFailedMessage = `${file.name}: ${error.message}`;\n      });\n    },\n    reset() {\n      this.uppy.reset();\n    },\n  },\n  watch: {\n    xhrUploadEndpoint(val) {\n      // Update the xhrUploadEndpoint configuration on XHRUpload whenever it changes\n      if (this.uppy && this.settings && !this.settings.tusEndpoint) {\n        this.uppy.getPlugin(\"XHRUpload\").setOptions({\n          endpoint: val,\n        });\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.custom-Uppy >>> .uppy-DragDrop-inner {\n  padding: 5px 0px;\n}\n.custom-Uppy >>> .UppyIcon {\n  display: none;\n}\n.custom-Uppy >>> .uppy-DragDrop-label {\n  margin-bottom: 0px;\n}\n.custom-Uppy >>> .uppy-StatusBar {\n  background-color: inherit;\n}\n</style>\n"],"sourceRoot":"../../static/common/js/components"}]}