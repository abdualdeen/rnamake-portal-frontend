{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/Linkify.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/Linkify.vue","mtime":1639684988547},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/babel-loader/lib/index.js","mtime":1638646321845},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/vue-loader/lib/index.js","mtime":1638646324785}],"contextDependencies":[],"result":["\nimport * as linkify from \"linkifyjs\";\n\nexport default {\n  name: \"linkify\",\n\n  render: function (createElement) {\n    // Find top level text nodes and run linkify on the text, converting them\n    // into an array of links and text nodes\n    const children = this.$slots.default\n      .map((node) => {\n        if (node.text) {\n          const tokens = linkify.tokenize(node.text);\n          return tokens.map((t) => {\n            if (t.isLink) {\n              return createElement(\n                \"a\",\n                {\n                  attrs: { href: t.toHref(\"https\"), target: \"_blank\" },\n                  on: {\n                    click: this.clickHandler,\n                  },\n                },\n                t.toString()\n              );\n            } else {\n              return t.toString();\n            }\n          });\n        } else {\n          return node;\n        }\n      })\n      // Flatten array since text nodes are mapped to arrays\n      .flat();\n    return createElement(\"span\", null, children);\n  },\n  methods: {\n    clickHandler(e) {\n      // stop click event from bubbling up\n      e.stopPropagation();\n    },\n  },\n};\n",{"version":3,"sources":["Linkify.vue"],"names":[],"mappings":";AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Linkify.vue","sourceRoot":"../../static/common/js/components","sourcesContent":["<script>\nimport * as linkify from \"linkifyjs\";\n\nexport default {\n  name: \"linkify\",\n\n  render: function (createElement) {\n    // Find top level text nodes and run linkify on the text, converting them\n    // into an array of links and text nodes\n    const children = this.$slots.default\n      .map((node) => {\n        if (node.text) {\n          const tokens = linkify.tokenize(node.text);\n          return tokens.map((t) => {\n            if (t.isLink) {\n              return createElement(\n                \"a\",\n                {\n                  attrs: { href: t.toHref(\"https\"), target: \"_blank\" },\n                  on: {\n                    click: this.clickHandler,\n                  },\n                },\n                t.toString()\n              );\n            } else {\n              return t.toString();\n            }\n          });\n        } else {\n          return node;\n        }\n      })\n      // Flatten array since text nodes are mapped to arrays\n      .flat();\n    return createElement(\"span\", null, children);\n  },\n  methods: {\n    clickHandler(e) {\n      // stop click event from bubbling up\n      e.stopPropagation();\n    },\n  },\n};\n</script>\n"]}]}