{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/static/django_airavata_groups/js/group_components/GroupMembersEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/static/django_airavata_groups/js/group_components/GroupMembersEditor.vue","mtime":1638641844336},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/babel-loader/lib/index.js","mtime":1638646321845},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/groups/node_modules/vue-loader/lib/index.js","mtime":1638646324785}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { models, services } from \"django-airavata-api\";\nimport GroupMembersDetailsContainer from \"./GroupMembersDetailsContainer.vue\";\n\nexport default {\n  name: \"group-members-editor\",\n  components: {\n    GroupMembersDetailsContainer,\n  },\n  props: {\n    group: {\n      type: models.Group,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      userProfiles: null,\n      newMembers: [],\n      userFilter:null,\n      memberFilter:null,\n      selectedMembers: [],\n      selectedUsers: [],\n      showingDetails: {},\n      showRemove: false,\n      showAdd: false,\n    };\n  },\n\n  computed: {\n    members() {\n      return this.group.members ? this.group.members : [];\n    },\n    admins() {\n      return this.group.admins;\n    },\n    memberFields() {\n      return [\n        { key: \"selected\", label: \"\", sortable: false },\n        { key: \"username\", label: \"Username\", sortable: true },\n        { key: \"action\", label: \"Action\", sortable: false },\n      ];\n    },\n    userFields() {\n      return [\n        { key: \"selected\", label: \"\", sortable: false },\n        { key: \"username\", label: \"Username\", sortable: true },\n        { key: \"action\", label: \"Action\", sortable: false },\n      ];\n    },\n    userProfilesMap() {\n      if (!this.userProfiles) {\n        return null;\n      }\n      const result = {};\n      this.userProfiles.forEach((up) => {\n        result[up.airavataInternalUserId] = up;\n      });\n      return result;\n    },\n    currentMembers() {\n      if (!this.userProfilesMap) {\n        return [];\n      }\n      return (\n        this.members\n          // Filter out users that are missing profiles\n          .filter((m) => m in this.userProfilesMap)\n          .map((m) => {\n            const userProfile = this.userProfilesMap[m];\n            const isAdmin = this.admins.indexOf(m) >= 0;\n            const isOwner = this.group.ownerId === m;\n            // Owners can edit all members and admins can edit non-admin members\n            // (except the owners role isn't editable)\n            const editable =\n              !isOwner &&\n              (this.group.isOwner || (this.group.isAdmin && !isAdmin));\n            return {\n              id: m,\n              name: userProfile.firstName + \" \" + userProfile.lastName,\n              username: userProfile.userId,\n              email: userProfile.email,\n              role: isOwner ? \"OWNER\" : isAdmin ? \"ADMIN\" : \"MEMBER\",\n              editable: editable,\n              _showDetails: this.showingDetails[m] || false,\n              _rowVariant: this.newMembers.indexOf(m) >= 0 ? \"success\" : null,\n              _selectable: isOwner ? false : true,\n            };\n          })\n      );\n    },\n    nonMembers(){\n      if (!this.userProfiles) {\n        return [];\n      }\n      return (\n        this.userProfiles\n          // Filter out current members\n          .filter(\n            (userProfile) =>\n              this.group.members.indexOf(userProfile.airavataInternalUserId) < 0\n          )\n          .map((userProfile) => {\n            return {\n              id: userProfile.airavataInternalUserId,\n              name: userProfile.firstName + \" \" + userProfile.lastName,\n              username: userProfile.userId,\n              email: userProfile.email,\n              _showDetails: this.showingDetails[userProfile.airavataInternalUserId] || false,\n            };\n          })\n      );\n    },\n\n    membersCount() {\n      return this.members.length;\n    },\n  },\n\n  created() {\n    services.UserProfileService.list().then((userProfiles) => {\n      this.userProfiles = userProfiles;\n    });\n  },\n\n  methods: {\n    toggleDetails(row) {\n      row.toggleDetails();\n      this.showingDetails[row.item.airavataInternalUserId] = !this\n        .showingDetails[row.item.airavataInternalUserId];\n    },\n    isUserSelected(user){\n      if (this.selectedUsers.length>0){\n        for (let i = 0; i<this.selectedUsers.length;i++){\n         if (user==this.selectedUsers[i]){\n           return true;\n          }\n        }\n      }\n      return false;\n    },\n    isMemberSelected(member){\n      if (this.selectedMembers.length>0){\n        for (let i = 0; i<this.selectedMembers.length;i++){\n         if (member==this.selectedMembers[i]){\n           return true;\n          }\n        }\n      }\n      return false;\n    },\n    addSelectedMembers(){\n      this.selectedUsers.forEach((user)=>  {\n        this.newMembers.push(user.id);\n        this.$emit(\"add-member\", user.id);\n        }\n      );\n      this.$refs.usersTable.clearSelected();\n      this.$refs.membersTable.clearSelected();\n      this.selectedUsers=[];\n      this.selectedMembers=[];\n    },\n    addAllMembers(){\n      this.showAdd = false;\n      this.selectedUsers = this.nonMembers.filter(\n      (user) =>\n              this.filterUserProfile(user, this.userFilter)\n          ).map((x)=>(x));\n      this.addSelectedMembers();\n      this.userFilter=null;\n      this.memberfilter=null;\n    },\n    removeSelectedMembers() {\n      this.selectedMembers.forEach((member)=>{\n         if (member.role == \"MEMBER\"|| member.role ==\"ADMIN\"){\n          this.$emit(\"remove-member\", member.id);\n        }});\n      this.$refs.membersTable.clearSelected();\n      this.selectedMembers = [];\n      this.selectedUsers=[];\n    },\n    removeAllMembers(){\n      this.showRemove = false;\n      this.selectedMembers = this.currentMembers.filter(\n      (member) =>\n              this.filterUserProfile(member, this.memberFilter)\n          ).map((x)=>(x));\n      this.removeSelectedMembers();\n      this.memberFilter=null;\n      this.userFields=null;\n    },\n    onMembersRowSelected(items){\n      this.selectedMembers = items;\n      if (this.selectedUsers){\n        this.$refs.usersTable.clearSelected();\n        this.selectedUsers = [];\n      }\n    },\n    onUsersRowSelected(items){\n      this.selectedUsers = items;\n      if (this.selectedMembers){\n        this.$refs.membersTable.clearSelected();\n        this.selectedMembers = [];\n      }\n    },\n    onUserFilterChange(){\n      this.selectedUsers = [];\n    },\n    onMemberFilterChange(){\n      this.selectedMembers = [];\n    },\n    changeRole(item) {\n      if (item[1] === \"ADMIN\") {\n        this.$emit(\"change-role-to-admin\", item[0]);\n      } else {\n        this.$emit(\"change-role-to-member\", item[0]);\n      }\n    },\n    filterUserProfile(profile, filter){\n      if(filter){\n      if (profile.email.toLowerCase().includes(filter.toLowerCase())){\n        return true;\n      }\n      else if(profile.name.toLowerCase().includes(filter.toLowerCase())){\n        return true;\n      }else if(profile.username.toLowerCase().includes(filter.toLowerCase())){\n        return true;\n      }else{return false;}\n      }else{\n        return true;\n      }\n    },\n    handleOwnerSelected(item, index){\n      if(!item._selectable){\n        this.$refs.membersTable.selectRow(index);\n      }\n    },\n    sortCompare(aRow, bRow, key) {\n      // Sort new members before all others\n      const aNewIndex = this.newMembers.indexOf(aRow.id);\n      const bNewIndex = this.newMembers.indexOf(bRow.id);\n      if (aNewIndex >= 0 && bNewIndex >= 0) {\n        return aNewIndex - bNewIndex;\n      } else if (aNewIndex >= 0) {\n        return -1;\n      } else if (bNewIndex >= 0) {\n        return 1;\n      }\n      const a = aRow[key];\n      const b = bRow[key];\n      if (\n        (typeof a === \"number\" && typeof b === \"number\") ||\n        (a instanceof Date && b instanceof Date)\n      ) {\n        // If both compared fields are native numbers or both are dates\n        return a < b ? -1 : a > b ? 1 : 0;\n      } else {\n        // Otherwise stringify the field data and use String.prototype.localeCompare\n        return new String(a).localeCompare(new String(b));\n      }\n    },\n  },\n};\n",{"version":3,"sources":["GroupMembersEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2NA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GroupMembersEditor.vue","sourceRoot":"static/django_airavata_groups/js/group_components","sourcesContent":["<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <b-card title=\"Gateway Users\" title-tag=\"h6\">\n\n          <b-form-group>\n            <b-input-group>\n              <b-input-group-text slot=\"prepend\">\n                <i class=\"fa fa-filter\"></i>\n              </b-input-group-text>\n              <b-form-input\n                v-model=\"userFilter\"\n                placeholder=\"Filter list of users\"\n                @change=\"onUserFilterChange\"\n              />\n            </b-input-group>\n          </b-form-group>\n\n          <b-table\n            hover\n            selectable\n            sticky-header\n            :items=\"nonMembers\"\n            :fields=\"userFields\"\n            :filter=\"userFilter\"\n            :select-mode=\"multi\"\n            :sort-compare=\"sortCompare\"\n            responsive=\"sm\"\n            ref=\"usersTable\"\n            head-variant=\"light\"\n            sort-by=\"name\"\n            @row-selected=\"onUsersRowSelected\"\n          >\n           <template slot=\"cell(selected)\" slot-scope=\"data\">\n              <span v-if=\"isUserSelected(data.item)\">\n                <i class=\"far fa-check-circle\"></i>\n              </span>\n           </template>\n\n            <template slot=\"cell(action)\" slot-scope=\"data\">\n              <b-button @click=\"toggleDetails(data)\">\n                {{data.detailsShowing ? 'Hide' : 'Show'}} Details\n              </b-button>\n            </template>\n\n            <template slot=\"row-details\" slot-scope=\"data\">\n              <group-members-details-container\n                :userProfile=\"data.item\"\n                :name=\"data.item.name\"\n                :id=\"data.item.id\"\n                @change-role=\"changeRole\"\n              />\n            </template>\n\n          </b-table>\n\n        </b-card>\n      </div>\n\n      <div>\n        <b-button-group vertical>\n\n          <b-button\n            style=\"margin-top:10px; margin-bottom:10px;\"\n            variant=\"primary\"\n            :disabled = \"selectedUsers.length<1\"\n            @click=\"addSelectedMembers\">\n            <!--Add Selected Members-->\n            <i class=\"fas fa-angle-right fa-lg\"></i>\n          </b-button>\n\n          <b-button\n            style=\"margin-top:10px; margin-bottom:10px;\"\n            variant=\"primary\"\n            :disabled = \"nonMembers.length<1\"\n            @click=\"showAdd = true\">\n            <!--Add All Members-->\n            <i class=\"fas fa-angle-double-right fa-lg\"></i>\n          </b-button>\n\n          <b-button\n            style=\"margin-top:10px; margin-bottom:10px;\"\n            variant=\"primary\"\n            :disabled = \"membersCount<2\"\n            @click=\"showRemove = true\">\n            <i class=\"fas fa-angle-double-left fa-lg\"></i>\n            <!--Remove All Members-->\n          </b-button>\n\n          <b-button\n            style=\"margin-top:10px; margin-bottom:10px;\"\n            variant=\"primary\"\n            :disabled = \"selectedMembers.length<1\"\n              @click=\"removeSelectedMembers\">\n              <i class=\"fas fa-angle-left fa-lg\"></i>\n              <!--Remove Selected Members-->\n          </b-button>\n\n          <b-modal\n            v-model=\"showRemove\"\n            title=\"Are you sure?\">\n            <p class=\"my-4\">\n              Do you really want to remove all members from\n              '<strong>{{group.name}}</strong>'?\n            </p>\n            <div slot=\"modal-footer\" class=\"w-100\">\n              <b-button\n                class=\"float-right ml-1\"\n                @click=\"removeAllMembers\">\n                Yes\n              </b-button>\n              <b-button\n                class=\"float-right ml-1\"\n                @click=\"showRemove = false\">\n                No\n              </b-button>\n            </div>\n          </b-modal>\n\n          <b-modal\n            v-model=\"showAdd\"\n            title=\"Are you sure?\">\n            <p class=\"my-4\">\n              Do you really want to add all users to\n              '<strong>{{group.name}}</strong>'?\n            </p>\n            <div slot=\"modal-footer\" class=\"w-100\">\n              <b-button\n                class=\"float-right ml-1\"\n                @click=\"addAllMembers\">\n                Yes\n              </b-button>\n              <b-button\n                class=\"float-right ml-1\"\n                @click=\"showAdd = false\">\n                No\n              </b-button>\n            </div>\n          </b-modal>\n\n        </b-button-group>\n      </div>\n\n      <div class=\"col\">\n        <b-card title=\"Group Members\" title-tag=\"h6\">\n\n          <b-form-group>\n            <b-input-group>\n              <b-input-group-text slot=\"prepend\">\n                <i class=\"fa fa-filter\"></i>\n              </b-input-group-text>\n              <b-form-input\n                v-model=\"memberFilter\"\n                placeholder=\"Filter list of members\"\n                @change=\"onMemberFilterChange\"\n              />\n            </b-input-group>\n          </b-form-group>\n\n          <b-table\n            v-if=\"membersCount > 0\"\n            hover\n            selectable\n            sticky-header\n            :items=\"currentMembers\"\n            :fields=\"memberFields\"\n            :filter=\"memberFilter\"\n            :select-mode=\"selectMode\"\n            :sort-compare=\"sortCompare\"\n            head-variant=\"light\"\n            responsive=\"sm\"\n            ref=\"membersTable\"\n            sort-by=\"name\"\n            @row-selected=\"onMembersRowSelected\"\n            @row-clicked=\"handleOwnerSelected\"\n          >\n\n           <template slot=\"cell(selected)\" slot-scope=\"data\">\n              <span v-if=\"isMemberSelected(data.item)\">\n                <i class=\"far fa-check-circle\"></i>\n              </span>\n           </template>\n\n            <template slot=\"cell(username)\" slot-scope=\"data\" >\n              {{data.value}}\n              <span\n                v-if= \"data.item.role == 'OWNER'\"\n                class=\"badge badge-primary\">\n                  Owner\n              </span>\n            </template>\n\n            <template slot=\"cell(action)\" slot-scope=\"data\" >\n              <b-button @click=\"toggleDetails(data)\">\n                {{data.detailsShowing ? 'Hide' : 'Show'}} Details\n              </b-button>\n            </template>\n\n            <template slot=\"row-details\" slot-scope=\"data\">\n              <group-members-details-container\n                :userProfile=\"data.item\"\n                :name=\"data.item.name\"\n                :id=\"data.item.id\"\n                :role=\"data.item.role\"\n                :isOwner=\"group.isOwner\"\n                @change-role=\"changeRole\"\n              />\n            </template>\n\n          </b-table>\n\n        </b-card>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { models, services } from \"django-airavata-api\";\nimport GroupMembersDetailsContainer from \"./GroupMembersDetailsContainer.vue\";\n\nexport default {\n  name: \"group-members-editor\",\n  components: {\n    GroupMembersDetailsContainer,\n  },\n  props: {\n    group: {\n      type: models.Group,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      userProfiles: null,\n      newMembers: [],\n      userFilter:null,\n      memberFilter:null,\n      selectedMembers: [],\n      selectedUsers: [],\n      showingDetails: {},\n      showRemove: false,\n      showAdd: false,\n    };\n  },\n\n  computed: {\n    members() {\n      return this.group.members ? this.group.members : [];\n    },\n    admins() {\n      return this.group.admins;\n    },\n    memberFields() {\n      return [\n        { key: \"selected\", label: \"\", sortable: false },\n        { key: \"username\", label: \"Username\", sortable: true },\n        { key: \"action\", label: \"Action\", sortable: false },\n      ];\n    },\n    userFields() {\n      return [\n        { key: \"selected\", label: \"\", sortable: false },\n        { key: \"username\", label: \"Username\", sortable: true },\n        { key: \"action\", label: \"Action\", sortable: false },\n      ];\n    },\n    userProfilesMap() {\n      if (!this.userProfiles) {\n        return null;\n      }\n      const result = {};\n      this.userProfiles.forEach((up) => {\n        result[up.airavataInternalUserId] = up;\n      });\n      return result;\n    },\n    currentMembers() {\n      if (!this.userProfilesMap) {\n        return [];\n      }\n      return (\n        this.members\n          // Filter out users that are missing profiles\n          .filter((m) => m in this.userProfilesMap)\n          .map((m) => {\n            const userProfile = this.userProfilesMap[m];\n            const isAdmin = this.admins.indexOf(m) >= 0;\n            const isOwner = this.group.ownerId === m;\n            // Owners can edit all members and admins can edit non-admin members\n            // (except the owners role isn't editable)\n            const editable =\n              !isOwner &&\n              (this.group.isOwner || (this.group.isAdmin && !isAdmin));\n            return {\n              id: m,\n              name: userProfile.firstName + \" \" + userProfile.lastName,\n              username: userProfile.userId,\n              email: userProfile.email,\n              role: isOwner ? \"OWNER\" : isAdmin ? \"ADMIN\" : \"MEMBER\",\n              editable: editable,\n              _showDetails: this.showingDetails[m] || false,\n              _rowVariant: this.newMembers.indexOf(m) >= 0 ? \"success\" : null,\n              _selectable: isOwner ? false : true,\n            };\n          })\n      );\n    },\n    nonMembers(){\n      if (!this.userProfiles) {\n        return [];\n      }\n      return (\n        this.userProfiles\n          // Filter out current members\n          .filter(\n            (userProfile) =>\n              this.group.members.indexOf(userProfile.airavataInternalUserId) < 0\n          )\n          .map((userProfile) => {\n            return {\n              id: userProfile.airavataInternalUserId,\n              name: userProfile.firstName + \" \" + userProfile.lastName,\n              username: userProfile.userId,\n              email: userProfile.email,\n              _showDetails: this.showingDetails[userProfile.airavataInternalUserId] || false,\n            };\n          })\n      );\n    },\n\n    membersCount() {\n      return this.members.length;\n    },\n  },\n\n  created() {\n    services.UserProfileService.list().then((userProfiles) => {\n      this.userProfiles = userProfiles;\n    });\n  },\n\n  methods: {\n    toggleDetails(row) {\n      row.toggleDetails();\n      this.showingDetails[row.item.airavataInternalUserId] = !this\n        .showingDetails[row.item.airavataInternalUserId];\n    },\n    isUserSelected(user){\n      if (this.selectedUsers.length>0){\n        for (let i = 0; i<this.selectedUsers.length;i++){\n         if (user==this.selectedUsers[i]){\n           return true;\n          }\n        }\n      }\n      return false;\n    },\n    isMemberSelected(member){\n      if (this.selectedMembers.length>0){\n        for (let i = 0; i<this.selectedMembers.length;i++){\n         if (member==this.selectedMembers[i]){\n           return true;\n          }\n        }\n      }\n      return false;\n    },\n    addSelectedMembers(){\n      this.selectedUsers.forEach((user)=>  {\n        this.newMembers.push(user.id);\n        this.$emit(\"add-member\", user.id);\n        }\n      );\n      this.$refs.usersTable.clearSelected();\n      this.$refs.membersTable.clearSelected();\n      this.selectedUsers=[];\n      this.selectedMembers=[];\n    },\n    addAllMembers(){\n      this.showAdd = false;\n      this.selectedUsers = this.nonMembers.filter(\n      (user) =>\n              this.filterUserProfile(user, this.userFilter)\n          ).map((x)=>(x));\n      this.addSelectedMembers();\n      this.userFilter=null;\n      this.memberfilter=null;\n    },\n    removeSelectedMembers() {\n      this.selectedMembers.forEach((member)=>{\n         if (member.role == \"MEMBER\"|| member.role ==\"ADMIN\"){\n          this.$emit(\"remove-member\", member.id);\n        }});\n      this.$refs.membersTable.clearSelected();\n      this.selectedMembers = [];\n      this.selectedUsers=[];\n    },\n    removeAllMembers(){\n      this.showRemove = false;\n      this.selectedMembers = this.currentMembers.filter(\n      (member) =>\n              this.filterUserProfile(member, this.memberFilter)\n          ).map((x)=>(x));\n      this.removeSelectedMembers();\n      this.memberFilter=null;\n      this.userFields=null;\n    },\n    onMembersRowSelected(items){\n      this.selectedMembers = items;\n      if (this.selectedUsers){\n        this.$refs.usersTable.clearSelected();\n        this.selectedUsers = [];\n      }\n    },\n    onUsersRowSelected(items){\n      this.selectedUsers = items;\n      if (this.selectedMembers){\n        this.$refs.membersTable.clearSelected();\n        this.selectedMembers = [];\n      }\n    },\n    onUserFilterChange(){\n      this.selectedUsers = [];\n    },\n    onMemberFilterChange(){\n      this.selectedMembers = [];\n    },\n    changeRole(item) {\n      if (item[1] === \"ADMIN\") {\n        this.$emit(\"change-role-to-admin\", item[0]);\n      } else {\n        this.$emit(\"change-role-to-member\", item[0]);\n      }\n    },\n    filterUserProfile(profile, filter){\n      if(filter){\n      if (profile.email.toLowerCase().includes(filter.toLowerCase())){\n        return true;\n      }\n      else if(profile.name.toLowerCase().includes(filter.toLowerCase())){\n        return true;\n      }else if(profile.username.toLowerCase().includes(filter.toLowerCase())){\n        return true;\n      }else{return false;}\n      }else{\n        return true;\n      }\n    },\n    handleOwnerSelected(item, index){\n      if(!item._selectable){\n        this.$refs.membersTable.selectRow(index);\n      }\n    },\n    sortCompare(aRow, bRow, key) {\n      // Sort new members before all others\n      const aNewIndex = this.newMembers.indexOf(aRow.id);\n      const bNewIndex = this.newMembers.indexOf(bRow.id);\n      if (aNewIndex >= 0 && bNewIndex >= 0) {\n        return aNewIndex - bNewIndex;\n      } else if (aNewIndex >= 0) {\n        return -1;\n      } else if (bNewIndex >= 0) {\n        return 1;\n      }\n      const a = aRow[key];\n      const b = bRow[key];\n      if (\n        (typeof a === \"number\" && typeof b === \"number\") ||\n        (a instanceof Date && b instanceof Date)\n      ) {\n        // If both compared fields are native numbers or both are dates\n        return a < b ? -1 : a > b ? 1 : 0;\n      } else {\n        // Otherwise stringify the field data and use String.prototype.localeCompare\n        return new String(a).localeCompare(new String(b));\n      }\n    },\n  },\n};\n</script>\n"]}]}