{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/dependencies/BooleanExpressionEvaluator.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/dependencies/BooleanExpressionEvaluator.js","mtime":1638641844323},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js","mtime":1638646261191},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import _typeof from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _classCallCheck from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar BooleanExpressionEvaluator = /*#__PURE__*/function () {\n  /**\n   * Context to use for looking up values of variables in expressions.\n   * @param {object} context\n   */\n  function BooleanExpressionEvaluator(context) {\n    _classCallCheck(this, BooleanExpressionEvaluator);\n\n    this.context = context;\n  }\n  /**\n   * Evaluates boolean expression and returns boolean result.\n   * @param {object} expression\n   */\n\n\n  _createClass(BooleanExpressionEvaluator, [{\n    key: \"evaluate\",\n    value: function evaluate(expression) {\n      var _this = this;\n\n      var keys = Object.keys(expression);\n\n      if (keys.length > 1) {\n        // Implicitly AND together several expressions\n        return this.evaluate({\n          AND: keys.map(function (k) {\n            var exp = {};\n            exp[k] = expression[k];\n            return exp;\n          })\n        });\n      }\n\n      if (keys.length < 1) {\n        throw new Error(\"Expression does not contain a key: \" + JSON.stringify(expression));\n      }\n\n      var key = keys[0];\n      var value = expression[key];\n\n      if (key === \"AND\") {\n        if (value instanceof Array) {\n          var evaluations = value.map(function (exp) {\n            return _this.evaluate(exp);\n          });\n          return evaluations.reduce(function (acc, curr) {\n            return acc && curr;\n          });\n        } else {\n          throw new Error(\"Unrecognized operand value for AND: \" + JSON.stringify(value));\n        }\n      } else if (key === \"OR\") {\n        if (value instanceof Array) {\n          var _evaluations = value.map(function (exp) {\n            return _this.evaluate(exp);\n          });\n\n          return _evaluations.reduce(function (acc, curr) {\n            return acc || curr;\n          });\n        } else {\n          throw new Error(\"Unrecognized operand value for OR: \" + JSON.stringify(value));\n        }\n      } else if (key === \"NOT\") {\n        if (_typeof(value) === \"object\" && !(value instanceof Array)) {\n          return !this.evaluate(value);\n        } else {\n          throw new Error(\"Unrecognized operand value for NOT: \" + JSON.stringify(value));\n        }\n      }\n\n      if (_typeof(value) === \"object\") {\n        if (!(key in this.context)) {\n          throw new Error(\"Missing context value for expression \" + JSON.stringify(expression) + \" in context \" + JSON.stringify(this.context));\n        }\n\n        var contextValue = this.context[key];\n        return this._evaluateComparison(contextValue, value);\n      }\n    }\n  }, {\n    key: \"_evaluateComparison\",\n    value: function _evaluateComparison(value, comparisonDefinition) {\n      var comparison = comparisonDefinition[\"comparison\"];\n\n      if (!comparison) {\n        throw new Error(\"Expression definition is missing 'comparison' property: \" + JSON.stringify(comparisonDefinition));\n      }\n\n      if (comparison === \"equals\") {\n        return value === this._getComparisonValue(comparisonDefinition);\n      }\n\n      throw new Error(\"Unrecognized comparison \" + JSON.stringify(comparison));\n    }\n  }, {\n    key: \"_getComparisonValue\",\n    value: function _getComparisonValue(comparisonDefinition) {\n      if (!(\"value\" in comparisonDefinition)) {\n        throw new Error(\"Missing required 'value' property in comparison definition: \" + JSON.stringify(comparisonDefinition));\n      }\n\n      return comparisonDefinition[\"value\"];\n    }\n  }]);\n\n  return BooleanExpressionEvaluator;\n}();\n\nexport { BooleanExpressionEvaluator as default };",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/dependencies/BooleanExpressionEvaluator.js"],"names":["BooleanExpressionEvaluator","context","expression","keys","Object","length","evaluate","AND","map","k","exp","Error","JSON","stringify","key","value","Array","evaluations","reduce","acc","curr","contextValue","_evaluateComparison","comparisonDefinition","comparison","_getComparisonValue"],"mappings":"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","sourcesContent":["export default class BooleanExpressionEvaluator {\n  /**\n   * Context to use for looking up values of variables in expressions.\n   * @param {object} context\n   */\n  constructor(context) {\n    this.context = context;\n  }\n  /**\n   * Evaluates boolean expression and returns boolean result.\n   * @param {object} expression\n   */\n  evaluate(expression) {\n    const keys = Object.keys(expression);\n    if (keys.length > 1) {\n      // Implicitly AND together several expressions\n      return this.evaluate({\n        AND: keys.map((k) => {\n          const exp = {};\n          exp[k] = expression[k];\n          return exp;\n        }),\n      });\n    }\n    if (keys.length < 1) {\n      throw new Error(\n        \"Expression does not contain a key: \" + JSON.stringify(expression)\n      );\n    }\n\n    const key = keys[0];\n    const value = expression[key];\n    if (key === \"AND\") {\n      if (value instanceof Array) {\n        const evaluations = value.map((exp) => this.evaluate(exp));\n        return evaluations.reduce((acc, curr) => acc && curr);\n      } else {\n        throw new Error(\n          \"Unrecognized operand value for AND: \" + JSON.stringify(value)\n        );\n      }\n    } else if (key === \"OR\") {\n      if (value instanceof Array) {\n        const evaluations = value.map((exp) => this.evaluate(exp));\n        return evaluations.reduce((acc, curr) => acc || curr);\n      } else {\n        throw new Error(\n          \"Unrecognized operand value for OR: \" + JSON.stringify(value)\n        );\n      }\n    } else if (key === \"NOT\") {\n      if (typeof value === \"object\" && !(value instanceof Array)) {\n        return !this.evaluate(value);\n      } else {\n        throw new Error(\n          \"Unrecognized operand value for NOT: \" + JSON.stringify(value)\n        );\n      }\n    }\n\n    if (typeof value === \"object\") {\n      if (!(key in this.context)) {\n        throw new Error(\n          \"Missing context value for expression \" +\n            JSON.stringify(expression) +\n            \" in context \" +\n            JSON.stringify(this.context)\n        );\n      }\n      const contextValue = this.context[key];\n      return this._evaluateComparison(contextValue, value);\n    }\n  }\n\n  _evaluateComparison(value, comparisonDefinition) {\n    const comparison = comparisonDefinition[\"comparison\"];\n    if (!comparison) {\n      throw new Error(\n        \"Expression definition is missing 'comparison' property: \" +\n          JSON.stringify(comparisonDefinition)\n      );\n    }\n    if (comparison === \"equals\") {\n      return value === this._getComparisonValue(comparisonDefinition);\n    }\n    throw new Error(\"Unrecognized comparison \" + JSON.stringify(comparison));\n  }\n\n  _getComparisonValue(comparisonDefinition) {\n    if (!(\"value\" in comparisonDefinition)) {\n      throw new Error(\n        \"Missing required 'value' property in comparison definition: \" +\n          JSON.stringify(comparisonDefinition)\n      );\n    }\n    return comparisonDefinition[\"value\"];\n  }\n}\n"]}]}