{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/NotificationsDisplay.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/NotificationsDisplay.vue","mtime":1638641844579},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js","mtime":1638646261191},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/vue-loader/lib/index.js","mtime":1638646266152}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { errors, services } from \"django-airavata-api\";\nimport NotificationList from \"../notifications/NotificationList\";\nexport default {\n  name: \"notifications-display\",\n  data: function data() {\n    return {\n      notifications: NotificationList.list,\n      unhandledErrors: errors.UnhandledErrorDisplayList.list,\n      apiServerBackUp: null,\n      apiServerBackUpTimestamp: null,\n      pollingDelay: 10000\n    };\n  },\n  methods: {\n    dismissNotification: function dismissNotification(notification) {\n      NotificationList.remove(notification);\n    },\n    dismissUnhandledError: function dismissUnhandledError(unhandledError) {\n      errors.UnhandledErrorDisplayList.remove(unhandledError);\n    },\n    variant: function variant(notification) {\n      if (notification.type === \"SUCCESS\") {\n        return \"success\";\n      } else if (notification.type === \"ERROR\") {\n        return \"danger\";\n      } else if (notification.type === \"WARNING\") {\n        return \"warning\";\n      } else {\n        return \"secondary\";\n      }\n    },\n    loadAPIServerStatus: function loadAPIServerStatus() {\n      var _this = this;\n\n      return services.APIServerStatusCheckService.get({}, {\n        ignoreErrors: true,\n        showSpinner: false\n      }).then(function (status) {\n        if (status.apiServerUp === true) {\n          _this.apiServerBackUp = true;\n          _this.apiServerBackUpTimestamp = Date.now();\n        }\n      });\n    },\n    initPollingAPIServerStatus: function initPollingAPIServerStatus() {\n      var pollAPIServerStatus = function () {\n        var _this2 = this;\n\n        if (!this.apiServerBackUp) {\n          var repoll = function repoll() {\n            return setTimeout(pollAPIServerStatus.bind(_this2), _this2.pollingDelay);\n          };\n\n          this.loadAPIServerStatus().then(repoll, repoll);\n        }\n      }.bind(this);\n\n      setTimeout(pollAPIServerStatus.bind(this), this.pollingDelay);\n    }\n  },\n  computed: {\n    apiServerDown: function apiServerDown() {\n      var _this3 = this;\n\n      // Return true if any notifications indicate that the API Server is down,\n      // but excludes notifications that came before the timestamp of the last\n      // API server status check\n      var notificationsApiServerDown = this.notifications ? this.notifications.filter(function (n) {\n        if (_this3.apiServerBackUpTimestamp) {\n          return n.createdDate.getTime() - _this3.apiServerBackUpTimestamp > 0;\n        } else {\n          return true;\n        }\n      }).some(function (n) {\n        return n.details && n.details.response && n.details.response.apiServerDown;\n      }) : false;\n      var unhandledErrorsApiServerDown = this.unhandledErrors ? this.unhandledErrors.filter(function (n) {\n        if (_this3.apiServerBackUpTimestamp) {\n          return n.createdDate.getTime() - _this3.apiServerBackUpTimestamp > 0;\n        } else {\n          return true;\n        }\n      }).some(function (e) {\n        return e.details && e.details.response && e.details.response.apiServerDown;\n      }) : false;\n      return notificationsApiServerDown || unhandledErrorsApiServerDown;\n    }\n  },\n  watch: {\n    /*\n     * Whenever notifications indicate that the API server is down, start\n     * polling the API server status so we can let the user know when it is\n     * back up.\n     */\n    apiServerDown: function apiServerDown(newValue) {\n      if (newValue) {\n        this.apiServerBackUp = false;\n        this.initPollingAPIServerStatus();\n      }\n    }\n  }\n};",{"version":3,"sources":["NotificationsDisplay.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"notifications-display\">\n    <transition-group name=\"fade\" tag=\"div\">\n      <b-alert\n        v-for=\"unhandledError in unhandledErrors\"\n        variant=\"danger\"\n        :key=\"unhandledError.id\"\n        show\n        dismissible\n        @dismissed=\"dismissUnhandledError(unhandledError)\"\n      >\n        {{ unhandledError.message }}\n      </b-alert>\n      <b-alert\n        v-for=\"notification in notifications\"\n        :variant=\"variant(notification)\"\n        :key=\"notification.id\"\n        :show=\"notification.duration > 0 ? notification.duration : true\"\n        dismissible\n        @dismissed=\"dismissNotification(notification)\"\n      >\n        {{ notification.message }}\n      </b-alert>\n    </transition-group>\n    <b-alert variant=\"danger\" :show=\"apiServerBackUp === false\">\n      <p>API Server is down.</p>\n      <i class=\"fa fa-sync-alt fa-spin\"></i> Checking status ...\n    </b-alert>\n    <b-alert variant=\"success\" :show=\"apiServerBackUp\" dismissible>\n      API Server is back up. Please try again.\n    </b-alert>\n  </div>\n</template>\n\n<script>\nimport { errors, services } from \"django-airavata-api\";\nimport NotificationList from \"../notifications/NotificationList\";\n\nexport default {\n  name: \"notifications-display\",\n  data() {\n    return {\n      notifications: NotificationList.list,\n      unhandledErrors: errors.UnhandledErrorDisplayList.list,\n      apiServerBackUp: null,\n      apiServerBackUpTimestamp: null,\n      pollingDelay: 10000,\n    };\n  },\n  methods: {\n    dismissNotification: function (notification) {\n      NotificationList.remove(notification);\n    },\n    dismissUnhandledError: function (unhandledError) {\n      errors.UnhandledErrorDisplayList.remove(unhandledError);\n    },\n    variant: function (notification) {\n      if (notification.type === \"SUCCESS\") {\n        return \"success\";\n      } else if (notification.type === \"ERROR\") {\n        return \"danger\";\n      } else if (notification.type === \"WARNING\") {\n        return \"warning\";\n      } else {\n        return \"secondary\";\n      }\n    },\n    loadAPIServerStatus() {\n      return services.APIServerStatusCheckService.get(\n        {},\n        { ignoreErrors: true, showSpinner: false }\n      ).then((status) => {\n        if (status.apiServerUp === true) {\n          this.apiServerBackUp = true;\n          this.apiServerBackUpTimestamp = Date.now();\n        }\n      });\n    },\n    initPollingAPIServerStatus: function () {\n      const pollAPIServerStatus = function () {\n        if (!this.apiServerBackUp) {\n          const repoll = () =>\n            setTimeout(pollAPIServerStatus.bind(this), this.pollingDelay);\n          this.loadAPIServerStatus().then(repoll, repoll);\n        }\n      }.bind(this);\n      setTimeout(pollAPIServerStatus.bind(this), this.pollingDelay);\n    },\n  },\n  computed: {\n    apiServerDown() {\n      // Return true if any notifications indicate that the API Server is down,\n      // but excludes notifications that came before the timestamp of the last\n      // API server status check\n      const notificationsApiServerDown = this.notifications\n        ? this.notifications\n            .filter((n) => {\n              if (this.apiServerBackUpTimestamp) {\n                return (\n                  n.createdDate.getTime() - this.apiServerBackUpTimestamp > 0\n                );\n              } else {\n                return true;\n              }\n            })\n            .some(\n              (n) =>\n                n.details &&\n                n.details.response &&\n                n.details.response.apiServerDown\n            )\n        : false;\n      const unhandledErrorsApiServerDown = this.unhandledErrors\n        ? this.unhandledErrors\n            .filter((n) => {\n              if (this.apiServerBackUpTimestamp) {\n                return (\n                  n.createdDate.getTime() - this.apiServerBackUpTimestamp > 0\n                );\n              } else {\n                return true;\n              }\n            })\n            .some(\n              (e) =>\n                e.details &&\n                e.details.response &&\n                e.details.response.apiServerDown\n            )\n        : false;\n      return notificationsApiServerDown || unhandledErrorsApiServerDown;\n    },\n  },\n  watch: {\n    /*\n     * Whenever notifications indicate that the API server is down, start\n     * polling the API server status so we can let the user know when it is\n     * back up.\n     */\n    apiServerDown(newValue) {\n      if (newValue) {\n        this.apiServerBackUp = false;\n        this.initPollingAPIServerStatus();\n      }\n    },\n  },\n};\n</script>\n\n<style>\n#notifications-display {\n  position: fixed;\n  top: 75px;\n  left: 20vw;\n  width: 60vw;\n  z-index: 10000;\n}\n</style>\n"],"sourceRoot":"../../static/common/js/components"}]}