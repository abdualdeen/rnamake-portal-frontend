{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/ComputationalResourceSchedulingModel.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/ComputationalResourceSchedulingModel.js","mtime":1638641844319},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js","mtime":1638646261191},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.reflect.construct\";\nimport _classCallCheck from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport BaseModel from \"./BaseModel\";\nvar FIELDS = [\"resourceHostId\", \"totalCPUCount\", \"nodeCount\", \"numberOfThreads\", \"queueName\", \"wallTimeLimit\", \"totalPhysicalMemory\", \"chessisNumber\", \"staticWorkingDir\", \"overrideLoginUserName\", \"overrideScratchLocation\", \"overrideAllocationProjectNumber\"];\n\nvar ComputationalResourceSchedulingModel = /*#__PURE__*/function (_BaseModel) {\n  _inherits(ComputationalResourceSchedulingModel, _BaseModel);\n\n  var _super = _createSuper(ComputationalResourceSchedulingModel);\n\n  function ComputationalResourceSchedulingModel() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ComputationalResourceSchedulingModel);\n\n    return _super.call(this, FIELDS, data);\n  }\n\n  _createClass(ComputationalResourceSchedulingModel, [{\n    key: \"validate\",\n    value: function validate() {\n      var queueInfo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var batchQueueResourcePolicy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var validationResults = {};\n\n      if (this.isEmpty(this.resourceHostId)) {\n        validationResults[\"resourceHostId\"] = \"Please select a compute resource.\";\n      }\n\n      if (this.isEmpty(this.queueName)) {\n        validationResults[\"queueName\"] = \"Please select a queue.\";\n      }\n\n      if (!(this.nodeCount > 0)) {\n        validationResults[\"nodeCount\"] = \"Enter a node count greater than 0.\";\n      } else if (batchQueueResourcePolicy && this.nodeCount > batchQueueResourcePolicy.maxAllowedNodes) {\n        validationResults[\"nodeCount\"] = \"Enter a node count no greater than \".concat(batchQueueResourcePolicy.maxAllowedNodes, \".\");\n      } else if (queueInfo && queueInfo.maxNodes && this.nodeCount > queueInfo.maxNodes) {\n        validationResults[\"nodeCount\"] = \"Enter a node count no greater than \".concat(queueInfo.maxNodes, \".\");\n      }\n\n      if (!(this.totalCPUCount > 0)) {\n        validationResults[\"totalCPUCount\"] = \"Enter a core count greater than 0.\";\n      } else if (batchQueueResourcePolicy && this.totalCPUCount > batchQueueResourcePolicy.maxAllowedCores) {\n        validationResults[\"totalCPUCount\"] = \"Enter a core count no greater than \".concat(batchQueueResourcePolicy.maxAllowedCores, \".\");\n      } else if (queueInfo && queueInfo.maxProcessors && this.totalCPUCount > queueInfo.maxProcessors) {\n        validationResults[\"totalCPUCount\"] = \"Enter a core count no greater than \".concat(queueInfo.maxProcessors, \".\");\n      }\n\n      if (!(this.wallTimeLimit > 0)) {\n        validationResults[\"wallTimeLimit\"] = \"Enter a wall time limit greater than 0.\";\n      } else if (batchQueueResourcePolicy && this.wallTimeLimit > batchQueueResourcePolicy.maxAllowedWalltime) {\n        validationResults[\"wallTimeLimit\"] = \"Enter a wall time limit no greater than \".concat(batchQueueResourcePolicy.maxAllowedWalltime, \".\");\n      } else if (queueInfo && queueInfo.maxRunTime && this.wallTimeLimit > queueInfo.maxRunTime) {\n        validationResults[\"wallTimeLimit\"] = \"Enter a wall time limit no greater than \".concat(queueInfo.maxRunTime, \".\");\n      }\n\n      if (!(this.totalPhysicalMemory >= 0)) {\n        validationResults[\"totalPhysicalMemory\"] = \"Enter a total physical memory greater than or equal to 0.\";\n      } else if (queueInfo && queueInfo.maxMemory && this.totalPhysicalMemory > queueInfo.maxMemory) {\n        validationResults[\"totalPhysicalMemory\"] = \"Enter a total physical memory no greater than \".concat(queueInfo.maxMemory, \".\");\n      }\n\n      return validationResults;\n    }\n  }]);\n\n  return ComputationalResourceSchedulingModel;\n}(BaseModel);\n\nexport { ComputationalResourceSchedulingModel as default };",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/ComputationalResourceSchedulingModel.js"],"names":["BaseModel","FIELDS","ComputationalResourceSchedulingModel","data","queueInfo","batchQueueResourcePolicy","validationResults","isEmpty","resourceHostId","queueName","nodeCount","maxAllowedNodes","maxNodes","totalCPUCount","maxAllowedCores","maxProcessors","wallTimeLimit","maxAllowedWalltime","maxRunTime","totalPhysicalMemory","maxMemory"],"mappings":"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","sourcesContent":["import BaseModel from \"./BaseModel\";\n\nconst FIELDS = [\n  \"resourceHostId\",\n  \"totalCPUCount\",\n  \"nodeCount\",\n  \"numberOfThreads\",\n  \"queueName\",\n  \"wallTimeLimit\",\n  \"totalPhysicalMemory\",\n  \"chessisNumber\",\n  \"staticWorkingDir\",\n  \"overrideLoginUserName\",\n  \"overrideScratchLocation\",\n  \"overrideAllocationProjectNumber\",\n];\n\nexport default class ComputationalResourceSchedulingModel extends BaseModel {\n  constructor(data = {}) {\n    super(FIELDS, data);\n  }\n\n  validate(queueInfo = null, batchQueueResourcePolicy = null) {\n    const validationResults = {};\n    if (this.isEmpty(this.resourceHostId)) {\n      validationResults[\"resourceHostId\"] = \"Please select a compute resource.\";\n    }\n    if (this.isEmpty(this.queueName)) {\n      validationResults[\"queueName\"] = \"Please select a queue.\";\n    }\n    if (!(this.nodeCount > 0)) {\n      validationResults[\"nodeCount\"] = \"Enter a node count greater than 0.\";\n    } else if (\n      batchQueueResourcePolicy &&\n      this.nodeCount > batchQueueResourcePolicy.maxAllowedNodes\n    ) {\n      validationResults[\n        \"nodeCount\"\n      ] = `Enter a node count no greater than ${batchQueueResourcePolicy.maxAllowedNodes}.`;\n    } else if (\n      queueInfo &&\n      queueInfo.maxNodes &&\n      this.nodeCount > queueInfo.maxNodes\n    ) {\n      validationResults[\n        \"nodeCount\"\n      ] = `Enter a node count no greater than ${queueInfo.maxNodes}.`;\n    }\n    if (!(this.totalCPUCount > 0)) {\n      validationResults[\"totalCPUCount\"] = \"Enter a core count greater than 0.\";\n    } else if (\n      batchQueueResourcePolicy &&\n      this.totalCPUCount > batchQueueResourcePolicy.maxAllowedCores\n    ) {\n      validationResults[\n        \"totalCPUCount\"\n      ] = `Enter a core count no greater than ${batchQueueResourcePolicy.maxAllowedCores}.`;\n    } else if (\n      queueInfo &&\n      queueInfo.maxProcessors &&\n      this.totalCPUCount > queueInfo.maxProcessors\n    ) {\n      validationResults[\n        \"totalCPUCount\"\n      ] = `Enter a core count no greater than ${queueInfo.maxProcessors}.`;\n    }\n    if (!(this.wallTimeLimit > 0)) {\n      validationResults[\"wallTimeLimit\"] =\n        \"Enter a wall time limit greater than 0.\";\n    } else if (\n      batchQueueResourcePolicy &&\n      this.wallTimeLimit > batchQueueResourcePolicy.maxAllowedWalltime\n    ) {\n      validationResults[\n        \"wallTimeLimit\"\n      ] = `Enter a wall time limit no greater than ${batchQueueResourcePolicy.maxAllowedWalltime}.`;\n    } else if (\n      queueInfo &&\n      queueInfo.maxRunTime &&\n      this.wallTimeLimit > queueInfo.maxRunTime\n    ) {\n      validationResults[\n        \"wallTimeLimit\"\n      ] = `Enter a wall time limit no greater than ${queueInfo.maxRunTime}.`;\n    }\n    if (!(this.totalPhysicalMemory >= 0)) {\n      validationResults[\"totalPhysicalMemory\"] =\n        \"Enter a total physical memory greater than or equal to 0.\";\n    } else if (\n      queueInfo &&\n      queueInfo.maxMemory &&\n      this.totalPhysicalMemory > queueInfo.maxMemory\n    ) {\n      validationResults[\n        \"totalPhysicalMemory\"\n      ] = `Enter a total physical memory no greater than ${queueInfo.maxMemory}.`;\n    }\n    return validationResults;\n  }\n}\n"]}]}