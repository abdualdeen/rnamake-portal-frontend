{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/ExperimentSummary.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/ExperimentSummary.js","mtime":1638641844319},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js","mtime":1638646261191},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.reflect.construct\";\nimport \"core-js/modules/es6.function.name\";\nimport _classCallCheck from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport BaseModel from \"./BaseModel\";\nimport Experiment from \"./Experiment\";\nimport ExperimentStatus from \"./ExperimentStatus\";\nimport ExperimentState from \"./ExperimentState\";\nvar FIELDS = [\"experimentId\", \"projectId\", \"gatewayId\", {\n  name: \"creationTime\",\n  type: \"date\"\n}, \"userName\", \"name\", \"description\", \"executionId\", \"resourceHostId\", {\n  name: \"experimentStatus\",\n  type: ExperimentState\n}, {\n  name: \"statusUpdateTime\",\n  type: \"date\"\n}, {\n  name: \"userHasWriteAccess\",\n  type: \"boolean\",\n  default: false\n}];\n\nvar ExperimentSummary = /*#__PURE__*/function (_BaseModel) {\n  _inherits(ExperimentSummary, _BaseModel);\n\n  var _super = _createSuper(ExperimentSummary);\n\n  function ExperimentSummary() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ExperimentSummary);\n\n    return _super.call(this, FIELDS, data);\n  }\n\n  _createClass(ExperimentSummary, [{\n    key: \"convertToExperiment\",\n    value: function convertToExperiment() {\n      // Purpose of this is to be able to access computed properties on\n      // Experiment.js\n      return new Experiment(Object.assign({}, this, {\n        // Most properties are named the same as on Experiment, but the\n        // following require some conversion\n        experimentName: this.name,\n        experimentStatus: [new ExperimentStatus({\n          state: this.experimentStatus,\n          timeOfStateChange: this.statusUpdateTime\n        })]\n      }));\n    }\n  }, {\n    key: \"isEditable\",\n    get: function get() {\n      return this.convertToExperiment().isEditable;\n    }\n  }]);\n\n  return ExperimentSummary;\n}(BaseModel);\n\nexport { ExperimentSummary as default };",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/ExperimentSummary.js"],"names":["BaseModel","Experiment","ExperimentStatus","ExperimentState","FIELDS","name","type","default","ExperimentSummary","data","Object","assign","experimentName","experimentStatus","state","timeOfStateChange","statusUpdateTime","convertToExperiment","isEditable"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,SAAP;AACA,OAAOC,UAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,eAAP;AAEA,IAAMC,MAAM,GAAG,CACb,cADa,EAEb,WAFa,EAGb,WAHa,EAIb;AACEC,EAAAA,IAAI,EAAE,cADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAJa,EAQb,UARa,EASb,MATa,EAUb,aAVa,EAWb,aAXa,EAYb,gBAZa,EAab;AACED,EAAAA,IAAI,EAAE,kBADR;AAEEC,EAAAA,IAAI,EAAEH;AAFR,CAba,EAiBb;AACEE,EAAAA,IAAI,EAAE,kBADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAjBa,EAqBb;AACED,EAAAA,IAAI,EAAE,oBADR;AAEEC,EAAAA,IAAI,EAAE,SAFR;AAGEC,EAAAA,OAAO,EAAE;AAHX,CArBa,CAAf;;IA4BqBC,iB;;;;;AACnB,+BAAuB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AAAA,6BACfL,MADe,EACPK,IADO;AAEtB;;;;0CAMqB;AACpB;AACA;AACA,aAAO,IAAIR,UAAJ,CACLS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,IAAlB,EAAwB;AACtB;AACA;AACAC,QAAAA,cAAc,EAAE,KAAKP,IAHC;AAItBQ,QAAAA,gBAAgB,EAAE,CAChB,IAAIX,gBAAJ,CAAqB;AACnBY,UAAAA,KAAK,EAAE,KAAKD,gBADO;AAEnBE,UAAAA,iBAAiB,EAAE,KAAKC;AAFL,SAArB,CADgB;AAJI,OAAxB,CADK,CAAP;AAaD;;;wBApBgB;AACf,aAAO,KAAKC,mBAAL,GAA2BC,UAAlC;AACD;;;;EAP4ClB,S;;SAA1BQ,iB","sourcesContent":["import BaseModel from \"./BaseModel\";\nimport Experiment from \"./Experiment\";\nimport ExperimentStatus from \"./ExperimentStatus\";\nimport ExperimentState from \"./ExperimentState\";\n\nconst FIELDS = [\n  \"experimentId\",\n  \"projectId\",\n  \"gatewayId\",\n  {\n    name: \"creationTime\",\n    type: \"date\",\n  },\n  \"userName\",\n  \"name\",\n  \"description\",\n  \"executionId\",\n  \"resourceHostId\",\n  {\n    name: \"experimentStatus\",\n    type: ExperimentState,\n  },\n  {\n    name: \"statusUpdateTime\",\n    type: \"date\",\n  },\n  {\n    name: \"userHasWriteAccess\",\n    type: \"boolean\",\n    default: false,\n  },\n];\n\nexport default class ExperimentSummary extends BaseModel {\n  constructor(data = {}) {\n    super(FIELDS, data);\n  }\n\n  get isEditable() {\n    return this.convertToExperiment().isEditable;\n  }\n\n  convertToExperiment() {\n    // Purpose of this is to be able to access computed properties on\n    // Experiment.js\n    return new Experiment(\n      Object.assign({}, this, {\n        // Most properties are named the same as on Experiment, but the\n        // following require some conversion\n        experimentName: this.name,\n        experimentStatus: [\n          new ExperimentStatus({\n            state: this.experimentStatus,\n            timeOfStateChange: this.statusUpdateTime,\n          }),\n        ],\n      })\n    );\n  }\n}\n"]}]}