{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/validators/RegularExpressionValidator.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/validators/RegularExpressionValidator.js","mtime":1638641844323},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js","mtime":1638646261191},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport _classCallCheck from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar RegularExpressionValidator = /*#__PURE__*/function () {\n  function RegularExpressionValidator(config) {\n    _classCallCheck(this, RegularExpressionValidator);\n\n    this.regex = new RegExp(config[\"value\"]);\n\n    if (\"message\" in config) {\n      this.customErrorMessage = config[\"message\"];\n    }\n  }\n\n  _createClass(RegularExpressionValidator, [{\n    key: \"validate\",\n    value: function validate(value) {\n      if (value === null || typeof value === \"undefined\") {\n        return null;\n      }\n\n      if (typeof value !== \"string\") {\n        value = value.toString();\n      }\n\n      if (!value.match(this.regex)) {\n        return this.getErrorMessage(value);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getErrorMessage\",\n    value: function getErrorMessage() {\n      if (this.customErrorMessage) {\n        return this.customErrorMessage;\n      } else {\n        return \"The value must match the regular expression \" + this.regex;\n      }\n    }\n  }]);\n\n  return RegularExpressionValidator;\n}();\n\nexport { RegularExpressionValidator as default };",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/validators/RegularExpressionValidator.js"],"names":["RegularExpressionValidator","config","regex","RegExp","customErrorMessage","value","toString","match","getErrorMessage"],"mappings":";;;;;;IAAqBA,0B;AACnB,sCAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKC,KAAL,GAAa,IAAIC,MAAJ,CAAWF,MAAM,CAAC,OAAD,CAAjB,CAAb;;AACA,QAAI,aAAaA,MAAjB,EAAyB;AACvB,WAAKG,kBAAL,GAA0BH,MAAM,CAAC,SAAD,CAAhC;AACD;AACF;;;;6BAEQI,K,EAAO;AACd,UAAIA,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,WAAvC,EAAoD;AAClD,eAAO,IAAP;AACD;;AACD,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,QAAAA,KAAK,GAAGA,KAAK,CAACC,QAAN,EAAR;AACD;;AACD,UAAI,CAACD,KAAK,CAACE,KAAN,CAAY,KAAKL,KAAjB,CAAL,EAA8B;AAC5B,eAAO,KAAKM,eAAL,CAAqBH,KAArB,CAAP;AACD;;AACD,aAAO,IAAP;AACD;;;sCAEiB;AAChB,UAAI,KAAKD,kBAAT,EAA6B;AAC3B,eAAO,KAAKA,kBAAZ;AACD,OAFD,MAEO;AACL,eAAO,iDAAiD,KAAKF,KAA7D;AACD;AACF;;;;;;SA3BkBF,0B","sourcesContent":["export default class RegularExpressionValidator {\n  constructor(config) {\n    this.regex = new RegExp(config[\"value\"]);\n    if (\"message\" in config) {\n      this.customErrorMessage = config[\"message\"];\n    }\n  }\n\n  validate(value) {\n    if (value === null || typeof value === \"undefined\") {\n      return null;\n    }\n    if (typeof value !== \"string\") {\n      value = value.toString();\n    }\n    if (!value.match(this.regex)) {\n      return this.getErrorMessage(value);\n    }\n    return null;\n  }\n\n  getErrorMessage() {\n    if (this.customErrorMessage) {\n      return this.customErrorMessage;\n    } else {\n      return \"The value must match the regular expression \" + this.regex;\n    }\n  }\n}\n"]}]}