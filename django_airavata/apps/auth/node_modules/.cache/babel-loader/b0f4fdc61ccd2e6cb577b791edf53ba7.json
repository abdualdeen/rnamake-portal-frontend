{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/ShareButton.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/ShareButton.vue","mtime":1638641844579},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js","mtime":1638646261191},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/vue-loader/lib/index.js","mtime":1638646266152}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { models, services } from \"django-airavata-api\";\nimport SharedEntityEditor from \"./SharedEntityEditor.vue\";\nexport default {\n  name: \"share-button\",\n  props: {\n    entityId: String,\n    parentEntityId: String,\n    parentEntityLabel: {\n      type: String,\n      default: \"Parent\"\n    },\n    sharedEntity: models.SharedEntity,\n    autoAddDefaultGatewayUsersGroup: {\n      type: Boolean,\n      default: true\n    },\n    autoAddAdminGroups: {\n      type: Boolean,\n      default: true\n    },\n    disallowEditingAdminGroups: {\n      type: Boolean,\n      default: true\n    }\n  },\n  components: {\n    SharedEntityEditor: SharedEntityEditor\n  },\n  data: function data() {\n    return {\n      localSharedEntity: null,\n      parentSharedEntity: null,\n      sharedEntityCopy: null,\n      defaultGatewayUsersGroup: null,\n      adminsGroup: null,\n      readOnlyAdminsGroup: null,\n      users: null,\n      groups: null\n    };\n  },\n  computed: {\n    title: function title() {\n      return \"Shared with \" + this.groupsCount + \" groups\" + (this.groupsCount > 0 ? \" (\" + this.groupNames.join(\", \") + \")\" : \"\") + \" and \" + this.usersCount + \" users\" + (this.usersCount > 0 ? \" (\" + this.userNames.join(\", \") + \")\" : \"\");\n    },\n    usersCount: function usersCount() {\n      return this.combinedUsers.length;\n    },\n    userNames: function userNames() {\n      return this.combinedUsers.map(function (u) {\n        return u.firstName + \" \" + u.lastName;\n      });\n    },\n    combinedUsers: function combinedUsers() {\n      var users = [];\n\n      if (this.localSharedEntity && this.localSharedEntity.userPermissions) {\n        users.push.apply(users, _toConsumableArray(this.localSharedEntity.userPermissions.map(function (up) {\n          return up.user;\n        })));\n      }\n\n      if (this.parentSharedEntity && this.parentSharedEntity.userPermissions) {\n        users.push.apply(users, _toConsumableArray(this.parentSharedEntity.userPermissions.map(function (up) {\n          return up.user;\n        })));\n\n        if (this.parentEntityOwner) {\n          users.push(this.parentEntityOwner);\n        }\n      }\n\n      return users;\n    },\n    filteredGroupPermissions: function filteredGroupPermissions() {\n      if (this.localSharedEntity && this.localSharedEntity.groupPermissions) {\n        return this.localSharedEntity.groupPermissions;\n      } else {\n        return [];\n      }\n    },\n    combinedGroups: function combinedGroups() {\n      var groups = [];\n      groups.push.apply(groups, _toConsumableArray(this.filteredGroupPermissions.map(function (gp) {\n        return gp.group;\n      })));\n\n      if (this.parentSharedEntity && this.parentSharedEntity.groupPermissions) {\n        groups.push.apply(groups, _toConsumableArray(this.parentSharedEntity.groupPermissions.map(function (gp) {\n          return gp.group;\n        })));\n      }\n\n      return groups;\n    },\n    groupNames: function groupNames() {\n      return this.combinedGroups.map(function (g) {\n        return g.name;\n      });\n    },\n    groupsCount: function groupsCount() {\n      return this.combinedGroups.length;\n    },\n    totalCount: function totalCount() {\n      return this.usersCount + this.groupsCount;\n    },\n    shareButtonEnabled: function shareButtonEnabled() {\n      // Enable share button if new entity or user is the entity's owner\n      return this.localSharedEntity && (!this.localSharedEntity.entityId || this.localSharedEntity.isOwner || this.localSharedEntity.hasSharingPermission);\n    },\n    hasParentSharedEntityPermissions: function hasParentSharedEntityPermissions() {\n      return this.parentSharedEntity && (this.parentSharedEntity.userPermissions.length > 0 || this.parentSharedEntity.groupPermissions.length > 0);\n    },\n    parentEntityOwner: function parentEntityOwner() {\n      // Only show the parent entity owner when not the same as current user\n      if (this.parentSharedEntity && !this.parentSharedEntity.isOwner) {\n        return this.parentSharedEntity.owner;\n      } else {\n        return null;\n      }\n    }\n  },\n  methods: {\n    initialize: function initialize() {\n      var _this = this;\n\n      // First loaded needed data and then process it. This is to prevent one\n      // call to initialize clobbering a later call to initialize. That is, do\n      // all of the async stuff first and then make decisions based on the\n      // values of the props.\n      var promises = [];\n      var loadedSharedEntity = null;\n\n      if (this.entityId) {\n        promises.push(this.loadSharedEntity(this.entityId).then(function (sharedEntity) {\n          return loadedSharedEntity = sharedEntity;\n        }));\n      }\n\n      if (!this.entityId && (!this.sharedEntity || !this.sharedEntity.entityId) && (!this.defaultGatewayUsersGroup || !this.adminsGroup || !this.readOnlyAdminsGroup)) {\n        promises.push(services.GroupService.list({\n          limit: -1\n        }).then(function (groups) {\n          _this.groups = groups;\n          _this.defaultGatewayUsersGroup = groups.find(function (g) {\n            return g.isDefaultGatewayUsersGroup;\n          });\n          _this.adminsGroup = groups.find(function (g) {\n            return g.isGatewayAdminsGroup;\n          });\n          _this.readOnlyAdminsGroup = groups.find(function (g) {\n            return g.isReadOnlyGatewayAdminsGroup;\n          });\n        }));\n      }\n\n      if (this.parentEntityId) {\n        promises.push(this.loadSharedEntity(this.parentEntityId).then(function (sharedEntity) {\n          return _this.parentSharedEntity = sharedEntity;\n        }));\n      }\n\n      Promise.all(promises).then(function () {\n        if (_this.sharedEntity) {\n          _this.localSharedEntity = _this.sharedEntity.clone();\n        } else if (_this.entityId) {\n          _this.localSharedEntity = loadedSharedEntity;\n        } else {\n          _this.localSharedEntity = new models.SharedEntity();\n        }\n\n        if (!_this.localSharedEntity.entityId && _this.autoAddDefaultGatewayUsersGroup && _this.defaultGatewayUsersGroup) {\n          _this.localSharedEntity.addGroup({\n            group: _this.defaultGatewayUsersGroup\n          });\n\n          _this.emitUnsavedEvent();\n        }\n\n        if (!_this.localSharedEntity.entityId && _this.autoAddAdminGroups && _this.adminsGroup && _this.readOnlyAdminsGroup) {\n          _this.localSharedEntity.addGroup({\n            group: _this.adminsGroup,\n            permissionType: models.ResourcePermissionType.MANAGE_SHARING\n          });\n\n          _this.localSharedEntity.addGroup({\n            group: _this.readOnlyAdminsGroup\n          });\n\n          _this.emitUnsavedEvent();\n        }\n\n        if (_this.localSharedEntity.entityId && _this.autoAddAdminGroups && _this.localSharedEntity.isOwner) {\n          // AIRAVATA-3297 Admins group used to get WRITE permission, but the\n          // new default is MANAGE_SHARING so update if necessary\n          // Since autoAddAdminGroups is true, there should already be an adminsGroupPermission\n          var adminsGroupPermission = _this.localSharedEntity.groupPermissions.find(function (gp) {\n            return gp.group.isGatewayAdminsGroup;\n          });\n\n          if (adminsGroupPermission && adminsGroupPermission.permissionType !== models.ResourcePermissionType.MANAGE_SHARING) {\n            adminsGroupPermission.permissionType = models.ResourcePermissionType.MANAGE_SHARING;\n\n            _this.emitUnsavedEvent();\n          }\n        }\n      });\n    },\n    loadSharedEntity: function loadSharedEntity(entityId) {\n      return services.SharedEntityService.retrieve({\n        lookup: entityId\n      });\n    },\n\n    /**\n     * Merge the persisted SharedEntity with the local SharedEntity\n     * instance and save it, returning a Promise.\n     */\n    mergeAndSave: function mergeAndSave(entityId) {\n      var _this2 = this;\n\n      return services.SharedEntityService.merge({\n        lookup: entityId,\n        data: this.localSharedEntity\n      }).then(function (sharedEntity) {\n        _this2.localSharedEntity = sharedEntity;\n\n        _this2.emitSavedEvent();\n      });\n    },\n    saveSharedEntity: function saveSharedEntity() {\n      var _this3 = this;\n\n      // If we don't have an entityId we can't create a SharedEntity. Instead,\n      // we'll just emit 'unsaved' to let parent know that sharing has changed.\n      // It will be up to parent to call `mergeAndSave(entityId)` once there is\n      // an entityId or merge the sharedEntity itself.\n      if (this.localSharedEntity.entityId) {\n        services.SharedEntityService.update({\n          data: this.localSharedEntity,\n          lookup: this.localSharedEntity.entityId\n        }).then(function (sharedEntity) {\n          _this3.localSharedEntity = sharedEntity;\n\n          _this3.emitSavedEvent();\n        });\n      } else {\n        this.emitUnsavedEvent();\n      }\n    },\n    emitSavedEvent: function emitSavedEvent() {\n      this.$emit(\"saved\", this.localSharedEntity);\n    },\n    emitUnsavedEvent: function emitUnsavedEvent() {\n      this.$emit(\"unsaved\", this.localSharedEntity);\n    },\n    cancelEditSharedEntity: function cancelEditSharedEntity() {\n      this.localSharedEntity = this.sharedEntityCopy;\n    },\n    openSharingSettingsModal: function openSharingSettingsModal() {\n      this.$refs.sharingSettingsModal.show();\n    },\n    showSharingSettingsModal: function showSharingSettingsModal() {\n      var _this4 = this;\n\n      this.sharedEntityCopy = this.localSharedEntity.clone();\n\n      if (!this.users) {\n        services.ServiceFactory.service(\"UserProfiles\").list().then(function (users) {\n          return _this4.users = users;\n        });\n      }\n\n      if (!this.groups) {\n        services.GroupService.list({\n          limit: -1\n        }).then(function (groups) {\n          _this4.groups = groups;\n        });\n      }\n    }\n  },\n  mounted: function mounted() {\n    // Only run initialize when mounted since it may add the default gateways\n    // group automatically (autoAddDefaultGatewayUsersGroup)\n    this.initialize();\n  },\n  watch: {\n    sharedEntity: function sharedEntity(newSharedEntity) {\n      this.localSharedEntity = newSharedEntity ? newSharedEntity.clone() : new models.SharedEntity();\n    },\n    entityId: function entityId(newEntityId, oldEntityId) {\n      var _this5 = this;\n\n      if (newEntityId && newEntityId !== oldEntityId) {\n        this.loadSharedEntity(newEntityId).then(function (sharedEntity) {\n          return _this5.localSharedEntity = sharedEntity;\n        });\n      }\n    },\n    parentEntityId: function parentEntityId(newParentEntityId) {\n      var _this6 = this;\n\n      this.loadSharedEntity(newParentEntityId).then(function (sharedEntity) {\n        _this6.parentSharedEntity = sharedEntity;\n      });\n    }\n  }\n};",{"version":3,"sources":["ShareButton.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"share-button btn-container\">\n    <b-button\n      :variant=\"'outline-primary'\"\n      :title=\"title\"\n      :disabled=\"!shareButtonEnabled\"\n      @click=\"openSharingSettingsModal\"\n    >\n      Share\n      <b-badge>{{ totalCount }}</b-badge>\n    </b-button>\n    <b-modal\n      class=\"modal-share-settings\"\n      title=\"Sharing Settings\"\n      ref=\"sharingSettingsModal\"\n      ok-title=\"Save\"\n      @ok=\"saveSharedEntity\"\n      @cancel=\"cancelEditSharedEntity\"\n      no-close-on-esc\n      no-close-on-backdrop\n      hide-header-close\n      @show=\"showSharingSettingsModal\"\n    >\n      <shared-entity-editor\n        v-if=\"localSharedEntity && users && groups\"\n        v-model=\"localSharedEntity\"\n        :users=\"users\"\n        :groups=\"groups\"\n        :disallow-editing-admin-groups=\"disallowEditingAdminGroups\"\n      />\n      <!-- Only show parent entity permissions for new entities -->\n      <template v-if=\"hasParentSharedEntityPermissions\">\n        <shared-entity-editor\n          v-if=\"parentSharedEntity && users && groups\"\n          v-model=\"parentSharedEntity\"\n          :users=\"users\"\n          :groups=\"groups\"\n          :readonly=\"true\"\n          class=\"mt-4\"\n        >\n          <span slot=\"permissions-header\"\n            >Inherited {{ parentEntityLabel }} Permissions\n            <!-- <small class=\"text-muted\" v-if=\"parentEntityOwner\">Owned by {{parentEntityOwner.firstName}} {{parentEntityOwner.lastName}} ({{parentEntityOwner.email}})</small> -->\n          </span>\n        </shared-entity-editor>\n      </template>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { models, services } from \"django-airavata-api\";\nimport SharedEntityEditor from \"./SharedEntityEditor.vue\";\n\nexport default {\n  name: \"share-button\",\n  props: {\n    entityId: String,\n    parentEntityId: String,\n    parentEntityLabel: {\n      type: String,\n      default: \"Parent\",\n    },\n    sharedEntity: models.SharedEntity,\n    autoAddDefaultGatewayUsersGroup: {\n      type: Boolean,\n      default: true,\n    },\n    autoAddAdminGroups: {\n      type: Boolean,\n      default: true,\n    },\n    disallowEditingAdminGroups: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  components: {\n    SharedEntityEditor,\n  },\n  data: function () {\n    return {\n      localSharedEntity: null,\n      parentSharedEntity: null,\n      sharedEntityCopy: null,\n      defaultGatewayUsersGroup: null,\n      adminsGroup: null,\n      readOnlyAdminsGroup: null,\n      users: null,\n      groups: null,\n    };\n  },\n  computed: {\n    title: function () {\n      return (\n        \"Shared with \" +\n        this.groupsCount +\n        \" groups\" +\n        (this.groupsCount > 0 ? \" (\" + this.groupNames.join(\", \") + \")\" : \"\") +\n        \" and \" +\n        this.usersCount +\n        \" users\" +\n        (this.usersCount > 0 ? \" (\" + this.userNames.join(\", \") + \")\" : \"\")\n      );\n    },\n    usersCount: function () {\n      return this.combinedUsers.length;\n    },\n    userNames: function () {\n      return this.combinedUsers.map((u) => u.firstName + \" \" + u.lastName);\n    },\n    combinedUsers() {\n      const users = [];\n      if (this.localSharedEntity && this.localSharedEntity.userPermissions) {\n        users.push(\n          ...this.localSharedEntity.userPermissions.map((up) => up.user)\n        );\n      }\n      if (this.parentSharedEntity && this.parentSharedEntity.userPermissions) {\n        users.push(\n          ...this.parentSharedEntity.userPermissions.map((up) => up.user)\n        );\n        if (this.parentEntityOwner) {\n          users.push(this.parentEntityOwner);\n        }\n      }\n      return users;\n    },\n    filteredGroupPermissions: function () {\n      if (this.localSharedEntity && this.localSharedEntity.groupPermissions) {\n        return this.localSharedEntity.groupPermissions;\n      } else {\n        return [];\n      }\n    },\n    combinedGroups() {\n      const groups = [];\n      groups.push(...this.filteredGroupPermissions.map((gp) => gp.group));\n      if (this.parentSharedEntity && this.parentSharedEntity.groupPermissions) {\n        groups.push(\n          ...this.parentSharedEntity.groupPermissions.map((gp) => gp.group)\n        );\n      }\n      return groups;\n    },\n    groupNames: function () {\n      return this.combinedGroups.map((g) => g.name);\n    },\n    groupsCount: function () {\n      return this.combinedGroups.length;\n    },\n    totalCount: function () {\n      return this.usersCount + this.groupsCount;\n    },\n    shareButtonEnabled: function () {\n      // Enable share button if new entity or user is the entity's owner\n      return (\n        this.localSharedEntity &&\n        (!this.localSharedEntity.entityId ||\n          this.localSharedEntity.isOwner ||\n          this.localSharedEntity.hasSharingPermission)\n      );\n    },\n    hasParentSharedEntityPermissions() {\n      return (\n        this.parentSharedEntity &&\n        (this.parentSharedEntity.userPermissions.length > 0 ||\n          this.parentSharedEntity.groupPermissions.length > 0)\n      );\n    },\n    parentEntityOwner() {\n      // Only show the parent entity owner when not the same as current user\n      if (this.parentSharedEntity && !this.parentSharedEntity.isOwner) {\n        return this.parentSharedEntity.owner;\n      } else {\n        return null;\n      }\n    },\n  },\n  methods: {\n    initialize: function () {\n      // First loaded needed data and then process it. This is to prevent one\n      // call to initialize clobbering a later call to initialize. That is, do\n      // all of the async stuff first and then make decisions based on the\n      // values of the props.\n      const promises = [];\n      let loadedSharedEntity = null;\n      if (this.entityId) {\n        promises.push(\n          this.loadSharedEntity(this.entityId).then(\n            (sharedEntity) => (loadedSharedEntity = sharedEntity)\n          )\n        );\n      }\n      if (\n        !this.entityId &&\n        (!this.sharedEntity || !this.sharedEntity.entityId) &&\n        (!this.defaultGatewayUsersGroup ||\n          !this.adminsGroup ||\n          !this.readOnlyAdminsGroup)\n      ) {\n        promises.push(\n          services.GroupService.list({ limit: -1 }).then((groups) => {\n            this.groups = groups;\n            this.defaultGatewayUsersGroup = groups.find(\n              (g) => g.isDefaultGatewayUsersGroup\n            );\n            this.adminsGroup = groups.find((g) => g.isGatewayAdminsGroup);\n            this.readOnlyAdminsGroup = groups.find(\n              (g) => g.isReadOnlyGatewayAdminsGroup\n            );\n          })\n        );\n      }\n      if (this.parentEntityId) {\n        promises.push(\n          this.loadSharedEntity(this.parentEntityId).then(\n            (sharedEntity) => (this.parentSharedEntity = sharedEntity)\n          )\n        );\n      }\n      Promise.all(promises).then(() => {\n        if (this.sharedEntity) {\n          this.localSharedEntity = this.sharedEntity.clone();\n        } else if (this.entityId) {\n          this.localSharedEntity = loadedSharedEntity;\n        } else {\n          this.localSharedEntity = new models.SharedEntity();\n        }\n        if (\n          !this.localSharedEntity.entityId &&\n          this.autoAddDefaultGatewayUsersGroup &&\n          this.defaultGatewayUsersGroup\n        ) {\n          this.localSharedEntity.addGroup({\n            group: this.defaultGatewayUsersGroup,\n          });\n          this.emitUnsavedEvent();\n        }\n        if (\n          !this.localSharedEntity.entityId &&\n          this.autoAddAdminGroups &&\n          this.adminsGroup &&\n          this.readOnlyAdminsGroup\n        ) {\n          this.localSharedEntity.addGroup({\n            group: this.adminsGroup,\n            permissionType: models.ResourcePermissionType.MANAGE_SHARING,\n          });\n          this.localSharedEntity.addGroup({ group: this.readOnlyAdminsGroup });\n          this.emitUnsavedEvent();\n        }\n        if (\n          this.localSharedEntity.entityId &&\n          this.autoAddAdminGroups &&\n          this.localSharedEntity.isOwner\n        ) {\n          // AIRAVATA-3297 Admins group used to get WRITE permission, but the\n          // new default is MANAGE_SHARING so update if necessary\n          // Since autoAddAdminGroups is true, there should already be an adminsGroupPermission\n          const adminsGroupPermission = this.localSharedEntity.groupPermissions.find(\n            (gp) => gp.group.isGatewayAdminsGroup\n          );\n          if (\n            adminsGroupPermission &&\n            adminsGroupPermission.permissionType !==\n              models.ResourcePermissionType.MANAGE_SHARING\n          ) {\n            adminsGroupPermission.permissionType =\n              models.ResourcePermissionType.MANAGE_SHARING;\n            this.emitUnsavedEvent();\n          }\n        }\n      });\n    },\n    loadSharedEntity(entityId) {\n      return services.SharedEntityService.retrieve({ lookup: entityId });\n    },\n    /**\n     * Merge the persisted SharedEntity with the local SharedEntity\n     * instance and save it, returning a Promise.\n     */\n    mergeAndSave: function (entityId) {\n      return services.SharedEntityService.merge({\n        lookup: entityId,\n        data: this.localSharedEntity,\n      }).then((sharedEntity) => {\n        this.localSharedEntity = sharedEntity;\n        this.emitSavedEvent();\n      });\n    },\n    saveSharedEntity: function () {\n      // If we don't have an entityId we can't create a SharedEntity. Instead,\n      // we'll just emit 'unsaved' to let parent know that sharing has changed.\n      // It will be up to parent to call `mergeAndSave(entityId)` once there is\n      // an entityId or merge the sharedEntity itself.\n      if (this.localSharedEntity.entityId) {\n        services.SharedEntityService.update({\n          data: this.localSharedEntity,\n          lookup: this.localSharedEntity.entityId,\n        }).then((sharedEntity) => {\n          this.localSharedEntity = sharedEntity;\n          this.emitSavedEvent();\n        });\n      } else {\n        this.emitUnsavedEvent();\n      }\n    },\n    emitSavedEvent() {\n      this.$emit(\"saved\", this.localSharedEntity);\n    },\n    emitUnsavedEvent() {\n      this.$emit(\"unsaved\", this.localSharedEntity);\n    },\n    cancelEditSharedEntity: function () {\n      this.localSharedEntity = this.sharedEntityCopy;\n    },\n    openSharingSettingsModal: function () {\n      this.$refs.sharingSettingsModal.show();\n    },\n    showSharingSettingsModal: function () {\n      this.sharedEntityCopy = this.localSharedEntity.clone();\n      if (!this.users) {\n        services.ServiceFactory.service(\"UserProfiles\")\n          .list()\n          .then((users) => (this.users = users));\n      }\n      if (!this.groups) {\n        services.GroupService.list({ limit: -1 }).then((groups) => {\n          this.groups = groups;\n        });\n      }\n    },\n  },\n  mounted: function () {\n    // Only run initialize when mounted since it may add the default gateways\n    // group automatically (autoAddDefaultGatewayUsersGroup)\n    this.initialize();\n  },\n  watch: {\n    sharedEntity(newSharedEntity) {\n      this.localSharedEntity = newSharedEntity\n        ? newSharedEntity.clone()\n        : new models.SharedEntity();\n    },\n    entityId(newEntityId, oldEntityId) {\n      if (newEntityId && newEntityId !== oldEntityId) {\n        this.loadSharedEntity(newEntityId).then(\n          (sharedEntity) => (this.localSharedEntity = sharedEntity)\n        );\n      }\n    },\n    parentEntityId(newParentEntityId) {\n      this.loadSharedEntity(newParentEntityId).then((sharedEntity) => {\n        this.parentSharedEntity = sharedEntity;\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\nbutton {\n  background-color: white;\n  white-space: nowrap;\n}\n.share-button {\n  display: inline-block;\n}\n.share-button >>> .modal-share-settings .modal-body {\n  max-height: 50vh;\n  min-height: 300px;\n  overflow: auto;\n}\n.share-button >>> .modal-dialog {\n  max-width: 800px;\n  width: 60vw;\n}\n</style>\n"],"sourceRoot":"../../static/common/js/components"}]}