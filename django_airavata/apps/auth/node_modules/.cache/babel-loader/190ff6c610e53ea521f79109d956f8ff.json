{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/services/ServiceFactory.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/services/ServiceFactory.js","mtime":1638641844323},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js","mtime":1638646261191},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _classCallCheck from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.string.ends-with\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.constructor\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport PaginationIterator from \"../utils/PaginationIterator\";\nimport FetchUtils from \"../utils/FetchUtils\";\nimport serviceConfiguration from \"../service_config\";\nvar postKey = \"post\";\nvar getKey = \"get\";\nvar putKey = \"put\";\nvar delKey = \"delete\";\n\nvar parsePathParams = function parsePathParams(url) {\n  var pathParamsRegEx = new RegExp(\"<[a-zA-Z0-9_]+(:[a-zA-Z0-9_]*)?>\", \"g\");\n  var pathParamsMatch = url.match(pathParamsRegEx);\n  var pathParams = {};\n\n  if (!pathParamsMatch) {\n    return pathParams;\n  }\n\n  var _iterator = _createForOfIteratorHelper(pathParamsMatch),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var pathParamMatch = _step.value;\n      var pathParam = pathParamMatch.split(\":\");\n\n      if (pathParam.length == 2) {\n        pathParams[pathParam[1]] = pathParam[0].replace(/<|>/gi, \"\");\n      } else {\n        pathParams[pathParam[0].replace(/<|>/gi, \"\")] = null;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return pathParams;\n};\n\nvar parseServiceMapping = function parseServiceMapping(serviceConfiguration) {\n  var mappedFunctions = {};\n  var viewSetFunctions = [];\n\n  if (serviceConfiguration.viewSet === true) {\n    viewSetFunctions = [\"list\", \"create\", \"update\", \"delete\", \"retrieve\"];\n  } else if (serviceConfiguration.viewSet instanceof Array) {\n    viewSetFunctions = serviceConfiguration.viewSet;\n  }\n\n  var url = serviceConfiguration.url;\n\n  if (!url.endsWith(\"/\")) {\n    url = url + \"/\";\n  }\n\n  var modelClass = serviceConfiguration.modelClass;\n  var queryParams = serviceConfiguration.queryParams;\n  var defaultPagination = serviceConfiguration.pagination ? true : false;\n  var encodePathParams = \"encodePathParams\" in serviceConfiguration ? serviceConfiguration.encodePathParams : true;\n\n  var _iterator2 = _createForOfIteratorHelper(viewSetFunctions),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var viewSetFunction = _step2.value;\n      var viewSetFunctionName = viewSetFunction;\n      var pagination = defaultPagination;\n\n      if (typeof viewSetFunctionName !== \"string\") {\n        viewSetFunctionName = viewSetFunction.name;\n\n        if (\"pagination\" in viewSetFunction) {\n          pagination = viewSetFunction.pagination;\n        }\n      }\n\n      switch (viewSetFunctionName) {\n        case \"list\":\n          mappedFunctions[\"list\"] = {\n            url: url,\n            requestType: getKey,\n            modelClass: modelClass,\n            queryParams: queryParams,\n            initialDataParam: viewSetFunction.initialDataParam,\n            encodePathParams: encodePathParams\n          };\n          break;\n\n        case \"create\":\n          mappedFunctions[\"create\"] = {\n            url: url,\n            requestType: postKey,\n            bodyParams: {\n              name: \"data\"\n            },\n            modelClass: modelClass,\n            queryParams: queryParams,\n            encodePathParams: encodePathParams\n          };\n          break;\n\n        case \"update\":\n          mappedFunctions[\"update\"] = {\n            url: url + \"<lookup>/\",\n            requestType: putKey,\n            bodyParams: {\n              name: \"data\"\n            },\n            modelClass: modelClass,\n            queryParams: queryParams,\n            encodePathParams: encodePathParams\n          };\n          break;\n\n        case \"retrieve\":\n          mappedFunctions[\"retrieve\"] = {\n            url: url + \"<lookup>/\",\n            requestType: getKey,\n            modelClass: modelClass,\n            queryParams: queryParams,\n            initialDataParam: viewSetFunction.initialDataParam,\n            encodePathParams: encodePathParams\n          };\n          break;\n\n        case \"delete\":\n          mappedFunctions[\"delete\"] = {\n            url: url + \"<lookup>/\",\n            requestType: delKey,\n            modelClass: modelClass,\n            queryParams: queryParams,\n            encodePathParams: encodePathParams\n          };\n          break;\n\n        default:\n          // Assume all fields have been provided\n          mappedFunctions[viewSetFunctionName] = viewSetFunction;\n          break;\n      }\n\n      mappedFunctions[viewSetFunctionName].pagination = pagination;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (\"methods\" in serviceConfiguration) {\n    for (var _i = 0, _Object$keys = Object.keys(serviceConfiguration[\"methods\"]); _i < _Object$keys.length; _i++) {\n      var methodName = _Object$keys[_i];\n      var methodConfig = serviceConfiguration[\"methods\"][methodName];\n      mappedFunctions[methodName] = {\n        url: methodConfig.url || url,\n        requestType: methodConfig.requestType || getKey,\n        queryParams: methodConfig.queryParams || queryParams,\n        pagination: \"pagination\" in methodConfig ? methodConfig.pagination : defaultPagination,\n        encodePathParams: \"encodePathParams\" in methodConfig ? methodConfig.encodePathParams : true\n      };\n\n      if (\"modelClass\" in methodConfig) {\n        mappedFunctions[methodName][\"modelClass\"] = methodConfig.modelClass;\n      }\n\n      if (\"bodyParams\" in methodConfig) {\n        mappedFunctions[methodName][\"bodyParams\"] = methodConfig.bodyParams;\n      }\n\n      if (\"pathParams\" in methodConfig) {\n        mappedFunctions[methodName][\"pathParams\"] = methodConfig.pathParams;\n      }\n    }\n  }\n\n  return mappedFunctions;\n};\n\nvar parseQueryMapping = function parseQueryMapping(queryParamsMapping) {\n  var newQueryParamMapping = {};\n\n  if (!queryParamsMapping) {\n    return newQueryParamMapping;\n  } // names of query parameters as an array of strings\n\n\n  if (queryParamsMapping instanceof Array) {\n    var _iterator3 = _createForOfIteratorHelper(queryParamsMapping),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var queryParam = _step3.value;\n\n        if (typeof queryParam === \"string\") {\n          newQueryParamMapping[queryParam] = null;\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  } // mapping of query parameters as an object of names/values\n  else {\n      for (var _i2 = 0, _Object$keys2 = Object.keys(queryParamsMapping); _i2 < _Object$keys2.length; _i2++) {\n        var _queryParam = _Object$keys2[_i2];\n        newQueryParamMapping[_queryParam] = queryParamsMapping[_queryParam];\n      }\n    }\n\n  return newQueryParamMapping;\n};\n\nvar ServiceFactory = /*#__PURE__*/function () {\n  function ServiceFactory(serviceConfigurations) {\n    _classCallCheck(this, ServiceFactory);\n\n    var parsedConfigurations = {};\n\n    for (var _i3 = 0, _Object$keys3 = Object.keys(serviceConfigurations); _i3 < _Object$keys3.length; _i3++) {\n      var serviceName = _Object$keys3[_i3];\n      parsedConfigurations[serviceName] = parseServiceMapping(serviceConfigurations[serviceName]);\n    }\n\n    this.serviceConfigurations = parsedConfigurations;\n  }\n  /*\n    Creates service object based serviceName in service configuration\n     */\n\n\n  _createClass(ServiceFactory, [{\n    key: \"service\",\n    value: function service(serviceName) {\n      if (!serviceName) {\n        throw new TypeError(\"Invalid Service Name\");\n      } else if (!(serviceName in this.serviceConfigurations)) {\n        throw new Error(\"Service :\" + serviceName + \" could not be found\");\n      }\n\n      var serviceConfiguration = this.serviceConfigurations[serviceName];\n      var serviceObj = {};\n      var functionNames = Object.keys(serviceConfiguration);\n\n      var _loop = function _loop() {\n        var functionName = _functionNames[_i4];\n        var config = serviceConfiguration[functionName];\n\n        switch (config.requestType.toLowerCase()) {\n          case postKey:\n          case getKey:\n          case putKey:\n          case delKey:\n            break;\n\n          default:\n            throw new TypeError(\"Invalid request type: \" + config.requestType + \" for the function: \" + functionName + \" in the service: \" + serviceName);\n        }\n\n        var pathParamsMapping = parsePathParams(config.url);\n        var queryParamsMapping = parseQueryMapping(config.queryParams);\n\n        serviceObj[functionName] = function () {\n          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n          var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            ignoreErrors: false,\n            showSpinner: true,\n            cache: false\n          },\n              ignoreErrors = _ref.ignoreErrors,\n              showSpinner = _ref.showSpinner,\n              cache = _ref.cache;\n\n          var url = config.url;\n          var paramKeys = Object.keys(params);\n          var queryParams = {};\n          var bodyParams = {};\n          var initialData = undefined;\n\n          for (var _i5 = 0, _paramKeys = paramKeys; _i5 < _paramKeys.length; _i5++) {\n            var paramKey = _paramKeys[_i5];\n\n            if (paramKey in pathParamsMapping) {\n              if (pathParamsMapping[paramKey] !== null) {\n                url = url.replace(\"<\" + pathParamsMapping[paramKey] + \":\" + paramKey + \">\", config.encodePathParams ? encodeURIComponent(params[paramKey]) : params[paramKey]);\n              } else {\n                url = url.replace(\"<\" + paramKey + \">\", config.encodePathParams ? encodeURIComponent(params[paramKey]) : params[paramKey]);\n              }\n            } else if (paramKey in queryParamsMapping) {\n              if (queryParamsMapping[paramKey] === null) {\n                queryParams[paramKey] = params[paramKey];\n              } else {\n                queryParams[queryParamsMapping[paramKey]] = params[paramKey];\n              }\n            } else if ((config.requestType == postKey || config.requestType == putKey) && config.bodyParams instanceof Array && paramKey in config.bodyParams) {\n              bodyParams[paramKey] = params[paramKey];\n            } else if ((config.requestType == postKey || config.requestType == putKey) && config.bodyParams !== null && config.bodyParams.name == paramKey) {\n              bodyParams = params[paramKey];\n            } else if (config.initialDataParam && paramKey === config.initialDataParam) {\n              initialData = params[paramKey];\n            }\n          }\n\n          var paginationHandler = function paginationHandler(data) {\n            if (config.pagination === true && \"next\" in data) {\n              return new PaginationIterator(data, config.modelClass);\n            } else if (data instanceof Array) {\n              return data.map(function (item) {\n                return resultHandler(item);\n              });\n            } else {\n              return resultHandler(data);\n            }\n          };\n\n          var resultHandler = function resultHandler(data) {\n            return config.modelClass ? new config.modelClass(data) : data;\n          };\n\n          switch (config.requestType.toLowerCase()) {\n            case postKey:\n              return FetchUtils.post(url, bodyParams, queryParams, {\n                ignoreErrors: ignoreErrors,\n                showSpinner: showSpinner\n              }).then(resultHandler);\n\n            case getKey:\n              if (initialData) {\n                return Promise.resolve(paginationHandler(initialData));\n              } else {\n                return FetchUtils.get(url, queryParams, {\n                  ignoreErrors: ignoreErrors,\n                  showSpinner: showSpinner,\n                  cache: cache\n                }).then(paginationHandler);\n              }\n\n            case putKey:\n              return FetchUtils.put(url, bodyParams, {\n                ignoreErrors: ignoreErrors,\n                showSpinner: showSpinner\n              }).then(resultHandler);\n\n            case delKey:\n              return FetchUtils.delete(url, {\n                ignoreErrors: ignoreErrors,\n                showSpinner: showSpinner\n              });\n          }\n        };\n      };\n\n      for (var _i4 = 0, _functionNames = functionNames; _i4 < _functionNames.length; _i4++) {\n        _loop();\n      }\n\n      return serviceObj;\n    }\n  }]);\n\n  return ServiceFactory;\n}();\n\nexport default new ServiceFactory(serviceConfiguration);",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/services/ServiceFactory.js"],"names":["PaginationIterator","FetchUtils","serviceConfiguration","postKey","getKey","putKey","delKey","parsePathParams","url","pathParamsRegEx","RegExp","pathParamsMatch","match","pathParams","pathParamMatch","pathParam","split","length","replace","parseServiceMapping","mappedFunctions","viewSetFunctions","viewSet","Array","endsWith","modelClass","queryParams","defaultPagination","pagination","encodePathParams","viewSetFunction","viewSetFunctionName","name","requestType","initialDataParam","bodyParams","Object","keys","methodName","methodConfig","parseQueryMapping","queryParamsMapping","newQueryParamMapping","queryParam","ServiceFactory","serviceConfigurations","parsedConfigurations","serviceName","TypeError","Error","serviceObj","functionNames","functionName","config","toLowerCase","pathParamsMapping","params","ignoreErrors","showSpinner","cache","paramKeys","initialData","undefined","paramKey","encodeURIComponent","paginationHandler","data","map","item","resultHandler","post","then","Promise","resolve","get","put","delete"],"mappings":"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","sourcesContent":["import PaginationIterator from \"../utils/PaginationIterator\";\nimport FetchUtils from \"../utils/FetchUtils\";\nimport serviceConfiguration from \"../service_config\";\n\nconst postKey = \"post\";\nconst getKey = \"get\";\nconst putKey = \"put\";\nconst delKey = \"delete\";\n\nconst parsePathParams = function (url) {\n  var pathParamsRegEx = new RegExp(\"<[a-zA-Z0-9_]+(:[a-zA-Z0-9_]*)?>\", \"g\");\n  let pathParamsMatch = url.match(pathParamsRegEx);\n  let pathParams = {};\n  if (!pathParamsMatch) {\n    return pathParams;\n  }\n  for (let pathParamMatch of pathParamsMatch) {\n    let pathParam = pathParamMatch.split(\":\");\n    if (pathParam.length == 2) {\n      pathParams[pathParam[1]] = pathParam[0].replace(/<|>/gi, \"\");\n    } else {\n      pathParams[pathParam[0].replace(/<|>/gi, \"\")] = null;\n    }\n  }\n  return pathParams;\n};\n\nconst parseServiceMapping = function (serviceConfiguration) {\n  const mappedFunctions = {};\n  let viewSetFunctions = [];\n  if (serviceConfiguration.viewSet === true) {\n    viewSetFunctions = [\"list\", \"create\", \"update\", \"delete\", \"retrieve\"];\n  } else if (serviceConfiguration.viewSet instanceof Array) {\n    viewSetFunctions = serviceConfiguration.viewSet;\n  }\n  let url = serviceConfiguration.url;\n  if (!url.endsWith(\"/\")) {\n    url = url + \"/\";\n  }\n  let modelClass = serviceConfiguration.modelClass;\n  let queryParams = serviceConfiguration.queryParams;\n  let defaultPagination = serviceConfiguration.pagination ? true : false;\n  let encodePathParams =\n    \"encodePathParams\" in serviceConfiguration\n      ? serviceConfiguration.encodePathParams\n      : true;\n  for (let viewSetFunction of viewSetFunctions) {\n    let viewSetFunctionName = viewSetFunction;\n    let pagination = defaultPagination;\n    if (typeof viewSetFunctionName !== \"string\") {\n      viewSetFunctionName = viewSetFunction.name;\n      if (\"pagination\" in viewSetFunction) {\n        pagination = viewSetFunction.pagination;\n      }\n    }\n    switch (viewSetFunctionName) {\n      case \"list\":\n        mappedFunctions[\"list\"] = {\n          url: url,\n          requestType: getKey,\n          modelClass: modelClass,\n          queryParams: queryParams,\n          initialDataParam: viewSetFunction.initialDataParam,\n          encodePathParams: encodePathParams,\n        };\n        break;\n      case \"create\":\n        mappedFunctions[\"create\"] = {\n          url: url,\n          requestType: postKey,\n          bodyParams: {\n            name: \"data\",\n          },\n          modelClass: modelClass,\n          queryParams: queryParams,\n          encodePathParams: encodePathParams,\n        };\n        break;\n      case \"update\":\n        mappedFunctions[\"update\"] = {\n          url: url + \"<lookup>/\",\n          requestType: putKey,\n          bodyParams: {\n            name: \"data\",\n          },\n          modelClass: modelClass,\n          queryParams: queryParams,\n          encodePathParams: encodePathParams,\n        };\n        break;\n      case \"retrieve\":\n        mappedFunctions[\"retrieve\"] = {\n          url: url + \"<lookup>/\",\n          requestType: getKey,\n          modelClass: modelClass,\n          queryParams: queryParams,\n          initialDataParam: viewSetFunction.initialDataParam,\n          encodePathParams: encodePathParams,\n        };\n        break;\n      case \"delete\":\n        mappedFunctions[\"delete\"] = {\n          url: url + \"<lookup>/\",\n          requestType: delKey,\n          modelClass: modelClass,\n          queryParams: queryParams,\n          encodePathParams: encodePathParams,\n        };\n        break;\n      default:\n        // Assume all fields have been provided\n        mappedFunctions[viewSetFunctionName] = viewSetFunction;\n        break;\n    }\n    mappedFunctions[viewSetFunctionName].pagination = pagination;\n  }\n  if (\"methods\" in serviceConfiguration) {\n    for (let methodName of Object.keys(serviceConfiguration[\"methods\"])) {\n      let methodConfig = serviceConfiguration[\"methods\"][methodName];\n      mappedFunctions[methodName] = {\n        url: methodConfig.url || url,\n        requestType: methodConfig.requestType || getKey,\n        queryParams: methodConfig.queryParams || queryParams,\n        pagination:\n          \"pagination\" in methodConfig\n            ? methodConfig.pagination\n            : defaultPagination,\n        encodePathParams:\n          \"encodePathParams\" in methodConfig\n            ? methodConfig.encodePathParams\n            : true,\n      };\n      if (\"modelClass\" in methodConfig) {\n        mappedFunctions[methodName][\"modelClass\"] = methodConfig.modelClass;\n      }\n      if (\"bodyParams\" in methodConfig) {\n        mappedFunctions[methodName][\"bodyParams\"] = methodConfig.bodyParams;\n      }\n      if (\"pathParams\" in methodConfig) {\n        mappedFunctions[methodName][\"pathParams\"] = methodConfig.pathParams;\n      }\n    }\n  }\n  return mappedFunctions;\n};\n\nconst parseQueryMapping = function (queryParamsMapping) {\n  let newQueryParamMapping = {};\n  if (!queryParamsMapping) {\n    return newQueryParamMapping;\n  }\n  // names of query parameters as an array of strings\n  if (queryParamsMapping instanceof Array) {\n    for (let queryParam of queryParamsMapping) {\n      if (typeof queryParam === \"string\") {\n        newQueryParamMapping[queryParam] = null;\n      }\n    }\n  }\n  // mapping of query parameters as an object of names/values\n  else {\n    for (let queryParam of Object.keys(queryParamsMapping)) {\n      newQueryParamMapping[queryParam] = queryParamsMapping[queryParam];\n    }\n  }\n  return newQueryParamMapping;\n};\n\nclass ServiceFactory {\n  constructor(serviceConfigurations) {\n    const parsedConfigurations = {};\n    for (let serviceName of Object.keys(serviceConfigurations)) {\n      parsedConfigurations[serviceName] = parseServiceMapping(\n        serviceConfigurations[serviceName]\n      );\n    }\n    this.serviceConfigurations = parsedConfigurations;\n  }\n\n  /*\n    Creates service object based serviceName in service configuration\n     */\n  service(serviceName) {\n    if (!serviceName) {\n      throw new TypeError(\"Invalid Service Name\");\n    } else if (!(serviceName in this.serviceConfigurations)) {\n      throw new Error(\"Service :\" + serviceName + \" could not be found\");\n    }\n    let serviceConfiguration = this.serviceConfigurations[serviceName];\n    let serviceObj = {};\n    let functionNames = Object.keys(serviceConfiguration);\n    for (let functionName of functionNames) {\n      let config = serviceConfiguration[functionName];\n      switch (config.requestType.toLowerCase()) {\n        case postKey:\n        case getKey:\n        case putKey:\n        case delKey:\n          break;\n        default:\n          throw new TypeError(\n            \"Invalid request type: \" +\n              config.requestType +\n              \" for the function: \" +\n              functionName +\n              \" in the service: \" +\n              serviceName\n          );\n      }\n      let pathParamsMapping = parsePathParams(config.url);\n      let queryParamsMapping = parseQueryMapping(config.queryParams);\n      serviceObj[functionName] = function (\n        params = {},\n        { ignoreErrors, showSpinner, cache } = {\n          ignoreErrors: false,\n          showSpinner: true,\n          cache: false,\n        }\n      ) {\n        let url = config.url;\n        let paramKeys = Object.keys(params);\n        let queryParams = {};\n        let bodyParams = {};\n        let initialData = undefined;\n        for (let paramKey of paramKeys) {\n          if (paramKey in pathParamsMapping) {\n            if (pathParamsMapping[paramKey] !== null) {\n              url = url.replace(\n                \"<\" + pathParamsMapping[paramKey] + \":\" + paramKey + \">\",\n                config.encodePathParams\n                  ? encodeURIComponent(params[paramKey])\n                  : params[paramKey]\n              );\n            } else {\n              url = url.replace(\n                \"<\" + paramKey + \">\",\n                config.encodePathParams\n                  ? encodeURIComponent(params[paramKey])\n                  : params[paramKey]\n              );\n            }\n          } else if (paramKey in queryParamsMapping) {\n            if (queryParamsMapping[paramKey] === null) {\n              queryParams[paramKey] = params[paramKey];\n            } else {\n              queryParams[queryParamsMapping[paramKey]] = params[paramKey];\n            }\n          } else if (\n            (config.requestType == postKey || config.requestType == putKey) &&\n            config.bodyParams instanceof Array &&\n            paramKey in config.bodyParams\n          ) {\n            bodyParams[paramKey] = params[paramKey];\n          } else if (\n            (config.requestType == postKey || config.requestType == putKey) &&\n            config.bodyParams !== null &&\n            config.bodyParams.name == paramKey\n          ) {\n            bodyParams = params[paramKey];\n          } else if (\n            config.initialDataParam &&\n            paramKey === config.initialDataParam\n          ) {\n            initialData = params[paramKey];\n          }\n        }\n        let paginationHandler = (data) => {\n          if (config.pagination === true && \"next\" in data) {\n            return new PaginationIterator(data, config.modelClass);\n          } else if (data instanceof Array) {\n            return data.map((item) => resultHandler(item));\n          } else {\n            return resultHandler(data);\n          }\n        };\n        let resultHandler = (data) => {\n          return config.modelClass ? new config.modelClass(data) : data;\n        };\n        switch (config.requestType.toLowerCase()) {\n          case postKey:\n            return FetchUtils.post(url, bodyParams, queryParams, {\n              ignoreErrors,\n              showSpinner,\n            }).then(resultHandler);\n          case getKey:\n            if (initialData) {\n              return Promise.resolve(paginationHandler(initialData));\n            } else {\n              return FetchUtils.get(url, queryParams, {\n                ignoreErrors,\n                showSpinner,\n                cache,\n              }).then(paginationHandler);\n            }\n          case putKey:\n            return FetchUtils.put(url, bodyParams, {\n              ignoreErrors,\n              showSpinner,\n            }).then(resultHandler);\n          case delKey:\n            return FetchUtils.delete(url, { ignoreErrors, showSpinner });\n        }\n      };\n    }\n    return serviceObj;\n  }\n}\n\nexport default new ServiceFactory(serviceConfiguration);\n"]}]}