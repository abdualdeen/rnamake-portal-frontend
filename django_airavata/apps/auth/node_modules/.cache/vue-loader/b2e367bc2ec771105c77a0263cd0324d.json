{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/ApplicationName.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/ApplicationName.vue","mtime":1638641844579},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/babel-loader/lib/index.js","mtime":1638646261191},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/auth/node_modules/vue-loader/lib/index.js","mtime":1638646266152}],"contextDependencies":[],"result":["//\n//\n//\n\nimport { errors, services, utils } from \"django-airavata-api\";\nexport default {\n  name: \"application-name\",\n  props: {\n    applicationInterfaceId: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      applicationInterface: null,\n      notAvailable: false,\n    };\n  },\n  created() {\n    this.loadApplicationInterface();\n  },\n  methods: {\n    loadApplicationInterface() {\n      services.ApplicationInterfaceService.retrieve(\n        { lookup: this.applicationInterfaceId },\n        { ignoreErrors: true, cache: true }\n      )\n        .then((appInterface) => (this.applicationInterface = appInterface))\n        .catch((error) => {\n          if (errors.ErrorUtils.isNotFoundError(error)) {\n            this.notAvailable = true;\n          } else {\n            throw error;\n          }\n        })\n        .catch(utils.FetchUtils.reportError);\n    },\n  },\n  computed: {\n    applicationName() {\n      if (this.notAvailable) {\n        return \"N/A\";\n      } else {\n        return this.applicationInterface\n          ? this.applicationInterface.applicationName\n          : \"\";\n      }\n    },\n  },\n  watch: {\n    applicationInterfaceId() {\n      this.loadApplicationInterface();\n    },\n  },\n};\n",{"version":3,"sources":["ApplicationName.vue"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ApplicationName.vue","sourceRoot":"../../static/common/js/components","sourcesContent":["<template>\n  <span :class=\"{ 'font-italic': notAvailable }\">{{ applicationName }}</span>\n</template>\n<script>\nimport { errors, services, utils } from \"django-airavata-api\";\nexport default {\n  name: \"application-name\",\n  props: {\n    applicationInterfaceId: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      applicationInterface: null,\n      notAvailable: false,\n    };\n  },\n  created() {\n    this.loadApplicationInterface();\n  },\n  methods: {\n    loadApplicationInterface() {\n      services.ApplicationInterfaceService.retrieve(\n        { lookup: this.applicationInterfaceId },\n        { ignoreErrors: true, cache: true }\n      )\n        .then((appInterface) => (this.applicationInterface = appInterface))\n        .catch((error) => {\n          if (errors.ErrorUtils.isNotFoundError(error)) {\n            this.notAvailable = true;\n          } else {\n            throw error;\n          }\n        })\n        .catch(utils.FetchUtils.reportError);\n    },\n  },\n  computed: {\n    applicationName() {\n      if (this.notAvailable) {\n        return \"N/A\";\n      } else {\n        return this.applicationInterface\n          ? this.applicationInterface.applicationName\n          : \"\";\n      }\n    },\n  },\n  watch: {\n    applicationInterfaceId() {\n      this.loadApplicationInterface();\n    },\n  },\n};\n</script>\n"]}]}