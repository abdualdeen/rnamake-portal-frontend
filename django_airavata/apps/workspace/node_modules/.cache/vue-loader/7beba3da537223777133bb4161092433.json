{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/web-components/ComputeResourceSelector.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/web-components/ComputeResourceSelector.vue","mtime":1638641844343},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/css-loader/index.js","mtime":1638646228588},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1638646228900},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/postcss-loader/src/index.js","mtime":1638646228869},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/postcss-loader/src/index.js","mtime":1638646228869},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/sass-loader/dist/cjs.js","mtime":1638646359277},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"./styles\";\n:host {\n  display: block;\n}\n",{"version":3,"sources":["ComputeResourceSelector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;AACA;AACA;AACA","file":"ComputeResourceSelector.vue","sourceRoot":"static/django_airavata_workspace/js/web-components","sourcesContent":["<template>\n  <b-form-group label=\"Compute Resource\" label-for=\"compute-resource\">\n    <b-form-select\n      id=\"compute-resource\"\n      v-model=\"resourceHostId\"\n      :options=\"computeResourceOptions\"\n      required\n      @input=\"computeResourceChanged\"\n      :disabled=\"computeResourceOptions.length === 0\"\n    >\n      <template slot=\"first\">\n        <option :value=\"null\" disabled>Select a Compute Resource</option>\n      </template>\n    </b-form-select>\n  </b-form-group>\n</template>\n\n<script>\nimport store from \"./store\";\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  name: \"compute-resource-selector\",\n  props: {\n    value: {\n      // compute resource host id\n      type: String,\n      default: null,\n    },\n    includedComputeResources: {\n      type: Array,\n      default: null,\n    },\n  },\n  store: store,\n  data() {\n    return {\n      resourceHostId: this.value,\n    };\n  },\n  created() {\n    this.$store.dispatch(\"loadComputeResourceNames\");\n  },\n  computed: {\n    computeResourceOptions: function () {\n      const computeResourceIds = Object.keys(this.computeResourceNames).filter(\n        (crid) => {\n          if (this.includedComputeResources) {\n            return this.includedComputeResources.includes(crid);\n          } else {\n            return true;\n          }\n        }\n      );\n      const computeResourceOptions = computeResourceIds.map((computeHostId) => {\n        return {\n          value: computeHostId,\n          text:\n            computeHostId in this.computeResourceNames\n              ? this.computeResourceNames[computeHostId]\n              : \"\",\n        };\n      });\n      computeResourceOptions.sort((a, b) => a.text.localeCompare(b.text));\n      return computeResourceOptions;\n    },\n    ...mapGetters([\"computeResourceNames\"]),\n  },\n  methods: {\n    computeResourceChanged() {\n      this.emitValueChanged();\n    },\n    emitValueChanged: function () {\n      const inputEvent = new CustomEvent(\"input\", {\n        detail: [this.resourceHostId],\n        composed: true,\n        bubbles: true,\n      });\n      this.$el.dispatchEvent(inputEvent);\n    },\n  },\n  watch: {\n    value() {\n      this.resourceHostId = this.value;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n@import \"./styles\";\n:host {\n  display: block;\n}\n</style>\n"]}]}