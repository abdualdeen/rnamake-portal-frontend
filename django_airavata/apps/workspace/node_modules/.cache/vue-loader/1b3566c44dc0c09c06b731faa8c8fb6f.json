{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/Uppy.vue?vue&type=style&index=0&id=c9eabb16&scoped=true&lang=css&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/Uppy.vue","mtime":1638641844579},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/css-loader/index.js","mtime":1638646228588},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1638646228900},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/postcss-loader/src/index.js","mtime":1638646228869},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/postcss-loader/src/index.js","mtime":1638646228869},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.custom-Uppy >>> .uppy-DragDrop-inner {\n  padding: 5px 0px;\n}\n.custom-Uppy >>> .UppyIcon {\n  display: none;\n}\n.custom-Uppy >>> .uppy-DragDrop-label {\n  margin-bottom: 0px;\n}\n.custom-Uppy >>> .uppy-StatusBar {\n  background-color: inherit;\n}\n",{"version":3,"sources":["Uppy.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Uppy.vue","sourceRoot":"../../static/common/js/components","sourcesContent":["<template>\n  <div class=\"custom-Uppy\">\n    <div ref=\"dragDrop\" />\n    <div ref=\"statusBar\" />\n    <b-alert class=\"mt-1\" :show=\"restrictionFailed\" variant=\"danger\">{{\n      restrictionFailedMessage\n    }}</b-alert>\n  </div>\n</template>\n\n<script>\nimport { services, utils } from \"django-airavata-api\";\n\nimport Uppy from \"@uppy/core\";\nimport DragDrop from \"@uppy/drag-drop\";\nimport StatusBar from \"@uppy/status-bar\";\nimport Tus from \"@uppy/tus\";\nimport XHRUpload from \"@uppy/xhr-upload\";\n\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/status-bar/dist/style.min.css\";\nimport \"@uppy/drag-drop/dist/style.min.css\";\n\nexport default {\n  name: \"uppy\",\n  props: {\n    xhrUploadEndpoint: {\n      type: String,\n      required: true,\n    },\n    // endpoint should accept POST request. Request will include form data with\n    // the key uploadURL.\n    tusUploadFinishEndpoint: {\n      type: String,\n      required: false,\n    },\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  mounted() {\n    services.SettingsService.get().then((s) => {\n      this.settings = s;\n      this.initUppy();\n    });\n  },\n  destroyed() {\n    if (this.uppy) {\n      this.uppy.close();\n    }\n  },\n  data() {\n    return {\n      uppy: null,\n      restrictionFailedMessage: null,\n      settings: null,\n    };\n  },\n  computed: {\n    maxFileUploadSizeMB() {\n      return this.settings\n        ? this.settings.fileUploadMaxFileSize / 1024 / 1024\n        : 0;\n    },\n    maxFileUploadSizeMessage() {\n      if (this.maxFileUploadSizeMB) {\n        return (\n          \"Max file upload size is \" +\n          Math.round(this.maxFileUploadSizeMB) +\n          \" MB\"\n        );\n      } else {\n        return null;\n      }\n    },\n    restrictionFailed() {\n      return this.restrictionFailedMessage != null;\n    },\n  },\n  methods: {\n    initUppy() {\n      this.uppy = Uppy({\n        autoProceed: true,\n        debug: true,\n        restrictions: {\n          maxNumberOfFiles: this.multiple ? null : 1,\n          maxFileSize: this.settings.fileUploadMaxFileSize,\n        },\n      });\n      this.uppy.use(DragDrop, {\n        target: this.$refs.dragDrop,\n        note: this.maxFileUploadSizeMessage,\n      });\n      this.uppy.use(StatusBar, {\n        target: this.$refs.statusBar,\n        hideUploadButton: true,\n        hideAfterFinish: false,\n      });\n      if (this.settings.tusEndpoint) {\n        this.uppy.use(Tus, { endpoint: this.settings.tusEndpoint });\n        this.uppy.on(\"upload-success\", (file, response) => {\n          const data = new FormData();\n          data.append(\"uploadURL\", response.uploadURL);\n          utils.FetchUtils.post(this.tusUploadFinishEndpoint, data, \"\", {\n            showSpinner: false,\n          }).then((result) => {\n            this.$emit(\"upload-success\", result);\n          });\n        });\n      } else {\n        this.uppy.use(XHRUpload, {\n          endpoint: this.xhrUploadEndpoint,\n          withCredentials: true,\n          headers: {\n            \"X-CSRFToken\": utils.FetchUtils.getCSRFToken(),\n          },\n          fieldName: \"file\",\n        });\n        this.uppy.on(\"upload-success\", (file, response) => {\n          this.$emit(\"upload-success\", response.body);\n        });\n      }\n      this.uppy.on(\"upload\", () => {\n        this.$emit(\"upload-started\");\n      });\n      this.uppy.on(\"complete\", () => {\n        this.$emit(\"upload-finished\");\n        this.restrictionFailedMessage = null;\n      });\n      this.uppy.on(\"restriction-failed\", (file, error) => {\n        this.restrictionFailedMessage = `${file.name}: ${error.message}`;\n      });\n    },\n    reset() {\n      this.uppy.reset();\n    },\n  },\n  watch: {\n    xhrUploadEndpoint(val) {\n      // Update the xhrUploadEndpoint configuration on XHRUpload whenever it changes\n      if (this.uppy && this.settings && !this.settings.tusEndpoint) {\n        this.uppy.getPlugin(\"XHRUpload\").setOptions({\n          endpoint: val,\n        });\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.custom-Uppy >>> .uppy-DragDrop-inner {\n  padding: 5px 0px;\n}\n.custom-Uppy >>> .UppyIcon {\n  display: none;\n}\n.custom-Uppy >>> .uppy-DragDrop-label {\n  margin-bottom: 0px;\n}\n.custom-Uppy >>> .uppy-StatusBar {\n  background-color: inherit;\n}\n</style>\n"]}]}