{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/ExperimentEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/ExperimentEditor.vue","mtime":1638641844339},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ComputationalResourceSchedulingEditor from \"./ComputationalResourceSchedulingEditor.vue\";\nimport ExperimentDescriptionEditor from \"./ExperimentDescriptionEditor.vue\";\nimport GroupResourceProfileSelector from \"./GroupResourceProfileSelector.vue\";\nimport InputEditorContainer from \"./input-editors/InputEditorContainer.vue\";\nimport { models, services } from \"django-airavata-api\";\nimport { components, utils } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"edit-experiment\",\n  props: {\n    experiment: {\n      type: models.Experiment,\n      required: true,\n    },\n    appModule: {\n      type: models.ApplicationModule,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      projects: [],\n      localExperiment: this.experiment.clone(),\n      invalidInputs: [],\n      invalidComputationalResourceSchedulingEditor: false,\n      edited: false,\n      saved: false,\n      uploadingInputs: [],\n    };\n  },\n  components: {\n    ComputationalResourceSchedulingEditor,\n    ExperimentDescriptionEditor,\n    GroupResourceProfileSelector,\n    InputEditorContainer,\n    \"share-button\": components.ShareButton,\n    \"unsaved-changes-guard\": components.UnsavedChangesGuard,\n  },\n  mounted: function () {\n    services.ProjectService.listAll().then((projects) => {\n      this.projects = projects;\n      if (!this.localExperiment.projectId) {\n        services.WorkspacePreferencesService.get().then(\n          (workspacePreferences) => {\n            if (!this.localExperiment.projectId) {\n              this.localExperiment.projectId =\n                workspacePreferences.most_recent_project_id;\n            }\n          }\n        );\n      }\n    });\n  },\n  computed: {\n    sharedProjectOptions: function () {\n      return this.projects\n        .filter((p) => !p.isOwner)\n        .map((project) => ({\n          value: project.projectID,\n          text:\n            project.name +\n            (!project.isOwner ? \" (owned by \" + project.owner + \")\" : \"\"),\n        }));\n    },\n    myProjectOptions() {\n      return this.projects\n        .filter((p) => p.isOwner)\n        .map((project) => ({\n          value: project.projectID,\n          text: project.name,\n        }));\n    },\n    valid: function () {\n      const validation = this.localExperiment.validate();\n      return (\n        Object.keys(validation).length === 0 &&\n        this.invalidInputs.length === 0 &&\n        !this.invalidComputationalResourceSchedulingEditor\n      );\n    },\n    isSaveDisabled: function () {\n      return !this.valid || this.hasUploadingInputs;\n    },\n    dirty() {\n      return this.edited && !this.saved;\n    },\n    hasUploadingInputs() {\n      return this.uploadingInputs.length > 0;\n    },\n  },\n  methods: {\n    saveExperiment: function () {\n      return this.saveOrUpdateExperiment().then((experiment) => {\n        this.localExperiment = experiment;\n        this.$emit(\"saved\", experiment);\n      });\n    },\n    saveAndLaunchExperiment: function () {\n      return this.saveOrUpdateExperiment().then((experiment) => {\n        this.localExperiment = experiment;\n        return services.ExperimentService.launch({\n          lookup: experiment.experimentId,\n        }).then(() => {\n          this.$emit(\"savedAndLaunched\", experiment);\n        });\n      });\n    },\n    saveOrUpdateExperiment: function () {\n      if (this.localExperiment.experimentId) {\n        return services.ExperimentService.update({\n          lookup: this.localExperiment.experimentId,\n          data: this.localExperiment,\n        }).then((experiment) => {\n          this.saved = true;\n          return experiment;\n        });\n      } else {\n        return services.ExperimentService.create({\n          data: this.localExperiment,\n        }).then((experiment) => {\n          // Can't save sharing settings for a new experiment until it has been\n          // created\n          this.saved = true;\n          return this.$refs.shareButton\n            .mergeAndSave(experiment.experimentId)\n            .then(() => experiment);\n        });\n      }\n    },\n    getValidationFeedback: function (properties) {\n      return utils.getProperty(this.localExperiment.validate(), properties);\n    },\n    getValidationState: function (properties) {\n      return this.getValidationFeedback(properties) ? \"invalid\" : null;\n    },\n    recordInvalidInputEditorValue: function (experimentInputName) {\n      if (!this.invalidInputs.includes(experimentInputName)) {\n        this.invalidInputs.push(experimentInputName);\n      }\n    },\n    recordValidInputEditorValue: function (experimentInputName) {\n      if (this.invalidInputs.includes(experimentInputName)) {\n        const index = this.invalidInputs.indexOf(experimentInputName);\n        this.invalidInputs.splice(index, 1);\n      }\n    },\n    uploadStart(experimentInputName) {\n      if (!this.uploadingInputs.includes(experimentInputName)) {\n        this.uploadingInputs.push(experimentInputName);\n      }\n    },\n    uploadEnd(experimentInputName) {\n      if (this.uploadingInputs.includes(experimentInputName)) {\n        const index = this.uploadingInputs.indexOf(experimentInputName);\n        this.uploadingInputs.splice(index, 1);\n      }\n    },\n    inputValueChanged: function () {\n      this.localExperiment.evaluateInputDependencies();\n    },\n  },\n  watch: {\n    experiment: function (newValue) {\n      this.localExperiment = newValue.clone();\n    },\n    localExperiment: {\n      handler() {\n        this.edited = true;\n      },\n      deep: true,\n    },\n  },\n};\n",{"version":3,"sources":["ExperimentEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"ExperimentEditor.vue","sourceRoot":"static/django_airavata_workspace/js/components/experiment","sourcesContent":["<template>\n  <div>\n    <unsaved-changes-guard :dirty=\"dirty\" />\n    <div class=\"row\">\n      <div class=\"col-auto mr-auto\">\n        <h1 class=\"h4 mb-4\">\n          <div\n            v-if=\"appModule\"\n            class=\"application-name text-muted text-uppercase\"\n          >\n            <i class=\"fa fa-code\" aria-hidden=\"true\"></i>\n            {{ appModule.appModuleName }}\n          </div>\n          <slot name=\"title\">Experiment Editor</slot>\n        </h1>\n      </div>\n      <div class=\"col-auto\">\n        <share-button\n          ref=\"shareButton\"\n          :entity-id=\"localExperiment.experimentId\"\n          :entity-label=\"'Experiment'\"\n          :parent-entity-id=\"localExperiment.projectId\"\n          :parent-entity-label=\"'Project'\"\n          :auto-add-default-gateway-users-group=\"false\"\n        />\n      </div>\n    </div>\n    <b-form novalidate>\n      <div class=\"row\">\n        <div class=\"col\">\n          <b-form-group\n            label=\"Experiment Name\"\n            label-for=\"experiment-name\"\n            :feedback=\"getValidationFeedback('experimentName')\"\n            :state=\"getValidationState('experimentName')\"\n          >\n            <b-form-input\n              id=\"experiment-name\"\n              type=\"text\"\n              v-model=\"localExperiment.experimentName\"\n              required\n              placeholder=\"Experiment name\"\n              :state=\"getValidationState('experimentName')\"\n            ></b-form-input>\n          </b-form-group>\n          <experiment-description-editor\n            v-model=\"localExperiment.description\"\n          />\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <b-form-group\n            label=\"Project\"\n            label-for=\"project\"\n            :feedback=\"getValidationFeedback('projectId')\"\n            :state=\"getValidationState('projectId')\"\n          >\n            <b-form-select\n              id=\"project\"\n              v-model=\"localExperiment.projectId\"\n              required\n              :state=\"getValidationState('projectId')\"\n            >\n              <template slot=\"first\">\n                <option :value=\"null\" disabled>Select a Project</option>\n              </template>\n              <optgroup label=\"My Projects\">\n                <option\n                  v-for=\"project in myProjectOptions\"\n                  :value=\"project.value\"\n                  :key=\"project.value\"\n                >\n                  {{ project.text }}\n                </option>\n              </optgroup>\n              <optgroup label=\"Projects Shared With Me\">\n                <option\n                  v-for=\"project in sharedProjectOptions\"\n                  :value=\"project.value\"\n                  :key=\"project.value\"\n                >\n                  {{ project.text }}\n                </option>\n              </optgroup>\n            </b-form-select>\n          </b-form-group>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <h1 class=\"h4 mt-5 mb-4\">Application Configuration</h1>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <div class=\"card border-default\">\n            <div class=\"card-body\">\n              <h2 class=\"h6 mb-3\">Application Inputs</h2>\n\n              <transition-group name=\"fade\">\n                <input-editor-container\n                  v-for=\"experimentInput in localExperiment.experimentInputs\"\n                  :experiment-input=\"experimentInput\"\n                  :experiment=\"localExperiment\"\n                  v-model=\"experimentInput.value\"\n                  v-show=\"experimentInput.show\"\n                  :key=\"experimentInput.name\"\n                  @invalid=\"recordInvalidInputEditorValue(experimentInput.name)\"\n                  @valid=\"recordValidInputEditorValue(experimentInput.name)\"\n                  @input=\"inputValueChanged\"\n                  @uploadstart=\"uploadStart(experimentInput.name)\"\n                  @uploadend=\"uploadEnd(experimentInput.name)\"\n                />\n              </transition-group>\n            </div>\n          </div>\n        </div>\n      </div>\n      <group-resource-profile-selector\n        v-model=\"localExperiment.userConfigurationData.groupResourceProfileId\"\n      >\n      </group-resource-profile-selector>\n      <div class=\"row\">\n        <div class=\"col\">\n          <computational-resource-scheduling-editor\n            v-model=\"\n              localExperiment.userConfigurationData\n                .computationalResourceScheduling\n            \"\n            v-if=\"localExperiment.userConfigurationData.groupResourceProfileId\"\n            :app-module-id=\"appModule.appModuleId\"\n            :group-resource-profile-id=\"\n              localExperiment.userConfigurationData.groupResourceProfileId\n            \"\n            @invalid=\"invalidComputationalResourceSchedulingEditor = true\"\n            @valid=\"invalidComputationalResourceSchedulingEditor = false\"\n          >\n          </computational-resource-scheduling-editor>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <b-form-group\n            label=\"Email Settings\"\n          >\n            <b-form-checkbox \n              v-model=\"localExperiment.enableEmailNotification\"\n            >\n              Receive email notification of experiment status\n            </b-form-checkbox>\n          </b-form-group>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div id=\"col-exp-buttons\" class=\"col\">\n          <b-button\n            variant=\"success\"\n            @click=\"saveAndLaunchExperiment\"\n            :disabled=\"isSaveDisabled\"\n          >\n            Save and Launch\n          </b-button>\n          <b-button\n            variant=\"primary\"\n            @click=\"saveExperiment\"\n            :disabled=\"isSaveDisabled\"\n          >\n            Save\n          </b-button>\n        </div>\n      </div>\n    </b-form>\n  </div>\n</template>\n\n<script>\nimport ComputationalResourceSchedulingEditor from \"./ComputationalResourceSchedulingEditor.vue\";\nimport ExperimentDescriptionEditor from \"./ExperimentDescriptionEditor.vue\";\nimport GroupResourceProfileSelector from \"./GroupResourceProfileSelector.vue\";\nimport InputEditorContainer from \"./input-editors/InputEditorContainer.vue\";\nimport { models, services } from \"django-airavata-api\";\nimport { components, utils } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"edit-experiment\",\n  props: {\n    experiment: {\n      type: models.Experiment,\n      required: true,\n    },\n    appModule: {\n      type: models.ApplicationModule,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      projects: [],\n      localExperiment: this.experiment.clone(),\n      invalidInputs: [],\n      invalidComputationalResourceSchedulingEditor: false,\n      edited: false,\n      saved: false,\n      uploadingInputs: [],\n    };\n  },\n  components: {\n    ComputationalResourceSchedulingEditor,\n    ExperimentDescriptionEditor,\n    GroupResourceProfileSelector,\n    InputEditorContainer,\n    \"share-button\": components.ShareButton,\n    \"unsaved-changes-guard\": components.UnsavedChangesGuard,\n  },\n  mounted: function () {\n    services.ProjectService.listAll().then((projects) => {\n      this.projects = projects;\n      if (!this.localExperiment.projectId) {\n        services.WorkspacePreferencesService.get().then(\n          (workspacePreferences) => {\n            if (!this.localExperiment.projectId) {\n              this.localExperiment.projectId =\n                workspacePreferences.most_recent_project_id;\n            }\n          }\n        );\n      }\n    });\n  },\n  computed: {\n    sharedProjectOptions: function () {\n      return this.projects\n        .filter((p) => !p.isOwner)\n        .map((project) => ({\n          value: project.projectID,\n          text:\n            project.name +\n            (!project.isOwner ? \" (owned by \" + project.owner + \")\" : \"\"),\n        }));\n    },\n    myProjectOptions() {\n      return this.projects\n        .filter((p) => p.isOwner)\n        .map((project) => ({\n          value: project.projectID,\n          text: project.name,\n        }));\n    },\n    valid: function () {\n      const validation = this.localExperiment.validate();\n      return (\n        Object.keys(validation).length === 0 &&\n        this.invalidInputs.length === 0 &&\n        !this.invalidComputationalResourceSchedulingEditor\n      );\n    },\n    isSaveDisabled: function () {\n      return !this.valid || this.hasUploadingInputs;\n    },\n    dirty() {\n      return this.edited && !this.saved;\n    },\n    hasUploadingInputs() {\n      return this.uploadingInputs.length > 0;\n    },\n  },\n  methods: {\n    saveExperiment: function () {\n      return this.saveOrUpdateExperiment().then((experiment) => {\n        this.localExperiment = experiment;\n        this.$emit(\"saved\", experiment);\n      });\n    },\n    saveAndLaunchExperiment: function () {\n      return this.saveOrUpdateExperiment().then((experiment) => {\n        this.localExperiment = experiment;\n        return services.ExperimentService.launch({\n          lookup: experiment.experimentId,\n        }).then(() => {\n          this.$emit(\"savedAndLaunched\", experiment);\n        });\n      });\n    },\n    saveOrUpdateExperiment: function () {\n      if (this.localExperiment.experimentId) {\n        return services.ExperimentService.update({\n          lookup: this.localExperiment.experimentId,\n          data: this.localExperiment,\n        }).then((experiment) => {\n          this.saved = true;\n          return experiment;\n        });\n      } else {\n        return services.ExperimentService.create({\n          data: this.localExperiment,\n        }).then((experiment) => {\n          // Can't save sharing settings for a new experiment until it has been\n          // created\n          this.saved = true;\n          return this.$refs.shareButton\n            .mergeAndSave(experiment.experimentId)\n            .then(() => experiment);\n        });\n      }\n    },\n    getValidationFeedback: function (properties) {\n      return utils.getProperty(this.localExperiment.validate(), properties);\n    },\n    getValidationState: function (properties) {\n      return this.getValidationFeedback(properties) ? \"invalid\" : null;\n    },\n    recordInvalidInputEditorValue: function (experimentInputName) {\n      if (!this.invalidInputs.includes(experimentInputName)) {\n        this.invalidInputs.push(experimentInputName);\n      }\n    },\n    recordValidInputEditorValue: function (experimentInputName) {\n      if (this.invalidInputs.includes(experimentInputName)) {\n        const index = this.invalidInputs.indexOf(experimentInputName);\n        this.invalidInputs.splice(index, 1);\n      }\n    },\n    uploadStart(experimentInputName) {\n      if (!this.uploadingInputs.includes(experimentInputName)) {\n        this.uploadingInputs.push(experimentInputName);\n      }\n    },\n    uploadEnd(experimentInputName) {\n      if (this.uploadingInputs.includes(experimentInputName)) {\n        const index = this.uploadingInputs.indexOf(experimentInputName);\n        this.uploadingInputs.splice(index, 1);\n      }\n    },\n    inputValueChanged: function () {\n      this.localExperiment.evaluateInputDependencies();\n    },\n  },\n  watch: {\n    experiment: function (newValue) {\n      this.localExperiment = newValue.clone();\n    },\n    localExperiment: {\n      handler() {\n        this.edited = true;\n      },\n      deep: true,\n    },\n  },\n};\n</script>\n\n<style>\n.application-name {\n  font-size: 12px;\n}\n#col-exp-buttons {\n  text-align: right;\n}\n</style>\n"]}]}