{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/storage/UserStoragePathViewer.vue?vue&type=style&index=0&id=678bf050&scoped=true&lang=css&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/storage/UserStoragePathViewer.vue","mtime":1639684988540},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/css-loader/index.js","mtime":1638646228588},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1638646228900},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/postcss-loader/src/index.js","mtime":1638646228869},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.action-link + .delete-link {\n  margin-left: 0.25rem;\n}\na.disabled {\n  pointer-events: none;\n  color: var(--secondary);\n}\n",{"version":3,"sources":["UserStoragePathViewer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+OA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UserStoragePathViewer.vue","sourceRoot":"static/django_airavata_workspace/js/components/storage","sourcesContent":["<template>\n  <div>\n    <user-storage-create-view\n      v-if=\"includeCreateFileAction && userStoragePath && isDir\"\n      :user-storage-path=\"userStoragePath\"\n      :storage-path=\"storagePath\"\n      @upload-finished=\"$emit('upload-finished')\"\n      @add-directory=\"(dirName) => $emit('add-directory', dirName)\"\n    />\n    <user-storage-path-breadcrumb\n      v-if=\"userStoragePath && isDir\"\n      :parts=\"userStoragePath.parts\"\n      @directory-selected=\"$emit('directory-selected', $event)\"\n    />\n\n    <user-storage-edit-viewer\n      v-if=\"userStoragePath && isFile\"\n      :file-name=\"file.name\"\n      :data-product-uri=\"file.dataProductURI\"\n      :mime-type=\"file.mimeType\"\n      @file-content-changed=\"\n        (fileContent) => $emit('file-content-changed', fileContent)\n      \"\n    />\n\n    <b-table\n      v-if=\"userStoragePath && isDir\"\n      :fields=\"fields\"\n      :items=\"items\"\n      sort-by=\"name\"\n    >\n      <template slot=\"cell(name)\" slot-scope=\"data\">\n        <b-link\n          v-if=\"data.item.type === 'dir'\"\n          @click=\"directorySelected(data.item)\"\n        >\n          <i class=\"fa fa-folder-open\"></i> {{ data.item.name }}\n        </b-link>\n        <user-storage-link\n          v-else\n          :data-product-uri=\"data.item.dataProductURI\"\n          :mime-type=\"data.item.mimeType\"\n          :file-name=\"data.item.name\"\n          :allow-preview=\"allowPreview\"\n        />\n      </template>\n      <template slot=\"cell(createdTimestamp)\" slot-scope=\"data\">\n        <human-date :date=\"data.item.createdTime\" />\n      </template>\n      <template slot=\"cell(actions)\" slot-scope=\"data\">\n        <b-button\n          v-if=\"includeSelectFileAction && data.item.type === 'file'\"\n          @click=\"$emit('file-selected', data.item)\"\n          :disabled=\"isAlreadySelected(data.item)\"\n          variant=\"primary\"\n        >\n          Select\n        </b-button>\n\n        <b-link\n          v-if=\"data.item.type === 'file'\"\n          class=\"action-link\"\n          :href=\"`${data.item.downloadURL}&download`\"\n        >\n          Download File\n          <i class=\"fa fa-download\" aria-hidden=\"true\"></i>\n        </b-link>\n        <!-- max download directory size is 1GB, see airavata_django_portal_sdk/views.py -->\n        <b-link\n          v-if=\"data.item.type === 'dir'\"\n          class=\"action-link\"\n          :href=\"`/sdk/download-dir/?path=${data.item.path}`\"\n          :disabled=\"data.item.size >= Math.pow(10, 9)\"\n        >\n          Download Zip\n          <i class=\"fa fa-file-archive\" aria-hidden=\"true\"></i>\n        </b-link>\n        <delete-link v-if=\"includeDeleteAction\" @delete=\"deleteItem(data.item)\">\n          Are you sure you want to delete <strong>{{ data.item.name }}</strong\n          >?\n        </delete-link>\n      </template>\n    </b-table>\n  </div>\n</template>\n<script>\nimport UserStoragePathBreadcrumb from \"./StoragePathBreadcrumb.vue\";\nimport { components } from \"django-airavata-common-ui\";\nimport UserStorageCreateView from \"./UserStorageCreateView\";\nimport UserStorageEditViewer from \"./storage-edit/UserStorageEditViewer\";\nimport UserStorageLink from \"./storage-edit/UserStorageLink\";\n\nexport default {\n  name: \"user-storage-path-viewer\",\n  props: {\n    allowPreview: {\n      default: true,\n      required: false,\n    },\n    userStoragePath: {\n      required: true,\n    },\n    storagePath: {\n      required: true,\n    },\n    includeDeleteAction: {\n      type: Boolean,\n      default: true,\n    },\n    includeSelectFileAction: {\n      type: Boolean,\n      default: false,\n    },\n    includeCreateFileAction: {\n      type: Boolean,\n      default: true,\n    },\n    downloadInNewWindow: {\n      type: Boolean,\n      default: false,\n    },\n    selectedDataProductUris: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  components: {\n    UserStorageLink,\n    \"delete-link\": components.DeleteLink,\n    \"human-date\": components.HumanDate,\n    UserStoragePathBreadcrumb,\n    UserStorageCreateView,\n    UserStorageEditViewer,\n  },\n  computed: {\n    isDir() {\n      return this.userStoragePath.isDir;\n    },\n    isFile() {\n      return !this.userStoragePath.isDir;\n    },\n\n    // Return the first file available. This is assuming the path is a file.\n    file() {\n      return this.userStoragePath.files[0];\n    },\n\n    fields() {\n      return [\n        {\n          label: \"Name\",\n          key: \"name\",\n          sortable: true,\n        },\n        {\n          label: \"Size\",\n          key: \"size\",\n          sortable: true,\n          formatter: (value) => this.getFormattedSize(value),\n        },\n        {\n          label: \"Created Time\",\n          key: \"createdTimestamp\",\n          sortable: true,\n        },\n        {\n          label: \"Actions\",\n          key: \"actions\",\n        },\n      ];\n    },\n    items() {\n      if (this.userStoragePath) {\n        const dirs = this.userStoragePath.directories\n          .filter((d) => !d.hidden)\n          .map((d) => {\n            return {\n              name: d.name,\n              path: d.path,\n              type: \"dir\",\n              createdTime: d.createdTime,\n              createdTimestamp: d.createdTime.getTime(), // for sorting\n              size: d.size,\n            };\n          });\n        const files = this.userStoragePath.files.map((f) => {\n          return {\n            name: f.name,\n            mimeType: f.mimeType,\n            type: \"file\",\n            dataProductURI: f.dataProductURI,\n            downloadURL: f.downloadURL,\n            createdTime: f.createdTime,\n            createdTimestamp: f.createdTime.getTime(), // for sorting\n            size: f.size,\n          };\n        });\n        return dirs.concat(files);\n      } else {\n        return [];\n      }\n    },\n    downloadTarget() {\n      return this.downloadInNewWindow ? \"_blank\" : \"_self\";\n    },\n  },\n  methods: {\n    getFormattedSize(size) {\n      if (size > Math.pow(2, 30)) {\n        return Math.round(size / Math.pow(2, 30)) + \" GB\";\n      } else if (size > Math.pow(2, 20)) {\n        return Math.round(size / Math.pow(2, 20)) + \" MB\";\n      } else if (size > Math.pow(2, 10)) {\n        return Math.round(size / Math.pow(2, 10)) + \" KB\";\n      } else {\n        return size + \" bytes\";\n      }\n    },\n    deleteItem(item) {\n      if (item.type === \"dir\") {\n        this.$emit(\"delete-dir\", item.path);\n      } else if (item.type === \"file\") {\n        this.$emit(\"delete-file\", item.dataProductURI);\n      }\n    },\n    directorySelected(item) {\n      this.$emit(\"directory-selected\", item.path);\n    },\n    isAlreadySelected(item) {\n      return (\n        this.selectedDataProductUris.find(\n          (uri) => item.type === \"file\" && uri === item.dataProductURI\n        ) !== undefined\n      );\n    },\n  },\n};\n</script>\n<style scoped>\n.action-link + .delete-link {\n  margin-left: 0.25rem;\n}\na.disabled {\n  pointer-events: none;\n  color: var(--secondary);\n}\n</style>\n"]}]}