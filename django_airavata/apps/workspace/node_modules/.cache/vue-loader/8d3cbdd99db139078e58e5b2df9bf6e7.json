{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/ValidatedForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/ValidatedForm.vue","mtime":1638641844579},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ValidatedFormGroup from \"./ValidatedFormGroup\";\n\nexport default {\n  name: \"validated-form\",\n  props: {\n    items: {\n      type: Array,\n      required: true,\n    },\n  },\n  components: {\n    ValidatedFormGroup,\n  },\n  data() {\n    return {\n      invalidFormItems: [],\n      feedbackMessages: {},\n    };\n  },\n  computed: {\n    valid() {\n      return this.invalidFormItems.length === 0;\n    },\n  },\n  methods: {\n    setValid(key) {\n      const wasValid = this.valid;\n      if (this.invalidFormItems.includes(key)) {\n        const index = this.invalidFormItems.indexOf(key);\n        this.invalidFormItems.splice(index, 1);\n      }\n      if (!wasValid && this.valid) {\n        this.$emit(\"valid\");\n      }\n    },\n    setInvalid(key, messages) {\n      const wasValid = this.valid;\n      if (!this.invalidFormItems.includes(key)) {\n        this.invalidFormItems.push(key);\n      }\n      if (typeof messages === \"string\") {\n        this.feedbackMessages[key] = [messages];\n      } else {\n        this.feedbackMessages[key] = messages;\n      }\n      if (wasValid) {\n        this.$emit(\"invalid\");\n      }\n    },\n    isValid(key) {\n      return !this.invalidFormItems.includes(key);\n    },\n    getFeedbackMessages(key) {\n      if (key in this.feedbackMessages) {\n        return this.feedbackMessages[key];\n      } else {\n        return [];\n      }\n    },\n  },\n};\n",{"version":3,"sources":["ValidatedForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ValidatedForm.vue","sourceRoot":"../../static/common/js/components","sourcesContent":["<template>\n  <b-form>\n    <template v-for=\"item in items\">\n      <validated-form-group\n        :label=\"item.label\"\n        :key=\"item.key\"\n        :valid=\"isValid(item.key)\"\n        :feedback-messages=\"getFeedbackMessages(item.key)\"\n        :description=\"item.description\"\n      >\n        <slot\n          :item=\"item.item\"\n          :valid=\"() => setValid(item.key)\"\n          :invalid=\"(messages) => setInvalid(item.key, messages)\"\n        />\n      </validated-form-group>\n    </template>\n  </b-form>\n</template>\n\n<script>\nimport ValidatedFormGroup from \"./ValidatedFormGroup\";\n\nexport default {\n  name: \"validated-form\",\n  props: {\n    items: {\n      type: Array,\n      required: true,\n    },\n  },\n  components: {\n    ValidatedFormGroup,\n  },\n  data() {\n    return {\n      invalidFormItems: [],\n      feedbackMessages: {},\n    };\n  },\n  computed: {\n    valid() {\n      return this.invalidFormItems.length === 0;\n    },\n  },\n  methods: {\n    setValid(key) {\n      const wasValid = this.valid;\n      if (this.invalidFormItems.includes(key)) {\n        const index = this.invalidFormItems.indexOf(key);\n        this.invalidFormItems.splice(index, 1);\n      }\n      if (!wasValid && this.valid) {\n        this.$emit(\"valid\");\n      }\n    },\n    setInvalid(key, messages) {\n      const wasValid = this.valid;\n      if (!this.invalidFormItems.includes(key)) {\n        this.invalidFormItems.push(key);\n      }\n      if (typeof messages === \"string\") {\n        this.feedbackMessages[key] = [messages];\n      } else {\n        this.feedbackMessages[key] = messages;\n      }\n      if (wasValid) {\n        this.$emit(\"invalid\");\n      }\n    },\n    isValid(key) {\n      return !this.invalidFormItems.includes(key);\n    },\n    getFeedbackMessages(key) {\n      if (key in this.feedbackMessages) {\n        return this.feedbackMessages[key];\n      } else {\n        return [];\n      }\n    },\n  },\n};\n</script>\n"]}]}