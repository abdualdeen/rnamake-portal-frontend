{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/output-displays/interactive-parameters/InteractiveParameterStepperWidget.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/output-displays/interactive-parameters/InteractiveParameterStepperWidget.vue","mtime":1638641844343},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"interactive-parameter-stepper-widget\",\n  props: {\n    value: {\n      type: Number,\n      required: true,\n    },\n    parameter: {\n      type: Object,\n    },\n  },\n  data() {\n    return {\n      currentValue: parseFloat(this.value),\n      valid: false,\n    };\n  },\n  computed: {\n    disabled() {\n      return !this.valid || this.currentValue === parseFloat(this.value);\n    },\n  },\n  methods: {\n    updateValue(newValue) {\n      if (\"max\" in this.parameter) {\n        newValue = Math.min(this.parameter.max, newValue);\n      }\n      if (\"min\" in this.parameter) {\n        newValue = Math.max(this.parameter.min, newValue);\n      }\n      this.currentValue = parseFloat(newValue);\n      if (this.$refs.textInput.validity.valid) {\n        this.valid = true;\n        this.$emit(\"valid\");\n      } else {\n        this.valid = false;\n        this.$emit(\"invalid\", this.$refs.textInput.validationMessage);\n      }\n    },\n    submit() {\n      if (!this.disabled) {\n        this.$emit(\"input\", this.currentValue);\n      }\n    },\n    enterKeyPressed() {\n      if (!this.disabled) {\n        this.$refs.textInput.blur();\n        this.submit();\n      }\n    },\n  },\n};\n",{"version":3,"sources":["InteractiveParameterStepperWidget.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"InteractiveParameterStepperWidget.vue","sourceRoot":"static/django_airavata_workspace/js/components/experiment/output-displays/interactive-parameters","sourcesContent":["<template>\n  <b-input-group>\n    <b-form-input\n      ref=\"textInput\"\n      type=\"number\"\n      :value=\"value\"\n      :min=\"parameter.min\"\n      :max=\"parameter.max\"\n      :step=\"parameter.step || 'any'\"\n      @input=\"updateValue\"\n      @keydown.native.enter=\"enterKeyPressed\"\n    />\n    <b-input-group-append>\n      <b-button variant=\"primary\" :disabled=\"disabled\" @click=\"submit\"\n        >Submit</b-button\n      >\n    </b-input-group-append>\n  </b-input-group>\n</template>\n\n<script>\nexport default {\n  name: \"interactive-parameter-stepper-widget\",\n  props: {\n    value: {\n      type: Number,\n      required: true,\n    },\n    parameter: {\n      type: Object,\n    },\n  },\n  data() {\n    return {\n      currentValue: parseFloat(this.value),\n      valid: false,\n    };\n  },\n  computed: {\n    disabled() {\n      return !this.valid || this.currentValue === parseFloat(this.value);\n    },\n  },\n  methods: {\n    updateValue(newValue) {\n      if (\"max\" in this.parameter) {\n        newValue = Math.min(this.parameter.max, newValue);\n      }\n      if (\"min\" in this.parameter) {\n        newValue = Math.max(this.parameter.min, newValue);\n      }\n      this.currentValue = parseFloat(newValue);\n      if (this.$refs.textInput.validity.valid) {\n        this.valid = true;\n        this.$emit(\"valid\");\n      } else {\n        this.valid = false;\n        this.$emit(\"invalid\", this.$refs.textInput.validationMessage);\n      }\n    },\n    submit() {\n      if (!this.disabled) {\n        this.$emit(\"input\", this.currentValue);\n      }\n    },\n    enterKeyPressed() {\n      if (!this.disabled) {\n        this.$refs.textInput.blur();\n        this.submit();\n      }\n    },\n  },\n};\n</script>\n"]}]}