{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/input-editors/InputEditorContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/input-editors/InputEditorContainer.vue","mtime":1638641844339},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport UserFileInputEditor from \"./UserFileInputEditor.vue\";\nimport AutocompleteInputEditor from \"./AutocompleteInputEditor\";\nimport CheckboxInputEditor from \"./CheckboxInputEditor.vue\";\nimport FileInputEditor from \"./FileInputEditor.vue\";\nimport InputEditorFormGroup from \"./InputEditorFormGroup.vue\";\nimport MultiFileInputEditor from \"./MultiFileInputEditor.vue\";\nimport RadioButtonInputEditor from \"./RadioButtonInputEditor.vue\";\nimport RangeSliderInputEditor from \"./RangeSliderInputEditor.vue\";\nimport SelectInputEditor from \"./SelectInputEditor.vue\";\nimport SliderInputEditor from \"./SliderInputEditor.vue\";\nimport StringInputEditor from \"./StringInputEditor.vue\";\nimport TextareaInputEditor from \"./TextareaInputEditor.vue\";\n\nimport { models } from \"django-airavata-api\";\nimport { mixins, utils } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"input-editor-container\",\n  mixins: [mixins.VModelMixin],\n  props: {\n    experimentInput: {\n      type: models.InputDataObjectType,\n      required: true,\n    },\n    experiment: {\n      type: models.Experiment,\n      required: true,\n    },\n  },\n  components: {\n    AutocompleteInputEditor,\n    CheckboxInputEditor,\n    FileInputEditor,\n    InputEditorFormGroup,\n    MultiFileInputEditor,\n    RadioButtonInputEditor,\n    RangeSliderInputEditor,\n    SelectInputEditor,\n    SliderInputEditor,\n    StringInputEditor,\n    TextareaInputEditor,\n    UserFileInputEditor,\n  },\n  created() {\n    if (!this.show) {\n      this.handleHidingInput();\n    }\n  },\n  data: function () {\n    return {\n      state: null,\n      feedbackMessages: [],\n      inputHasBegun: false,\n      // Store the current value when hiding input so we can restore it when shown again\n      oldValue: null,\n      show: this.experimentInput.show,\n    };\n  },\n  computed: {\n    inputEditorComponentName: function () {\n      // If input specifices an editor UI component, use that\n      if (this.experimentInput.editorUIComponentId) {\n        return this.experimentInput.editorUIComponentId;\n      }\n      // Default UI components based on input type\n      if (this.experimentInput.type === models.DataType.STRING) {\n        return \"string-input-editor\";\n      } else if (this.experimentInput.type === models.DataType.URI) {\n        return \"file-input-editor\";\n      } else if (this.experimentInput.type === models.DataType.URI_COLLECTION) {\n        return \"multi-file-input-editor\";\n      }\n      // Default\n      return \"string-input-editor\";\n    },\n    inputEditorComponentId: function () {\n      return utils.sanitizeHTMLId(this.experimentInput.name);\n    },\n    validationFeedback: function () {\n      // Only display validation feedback after the user has provided\n      // input so that missing required value errors are only displayed\n      // after interacting with the input editor\n      return this.inputHasBegun ? this.feedbackMessages : null;\n    },\n    validationState: function () {\n      return this.inputHasBegun ? this.state : null;\n    },\n  },\n  methods: {\n    recordValidInputEditorValue: function () {\n      this.state = \"valid\";\n      this.$emit(\"valid\");\n    },\n    recordInvalidInputEditorValue: function (feedbackMessages) {\n      this.feedbackMessages = feedbackMessages;\n      this.state = \"invalid\";\n      this.$emit(\"invalid\", feedbackMessages);\n    },\n    valueChanged: function () {\n      this.inputHasBegun = true;\n    },\n    handleHidingInput: function () {\n      this.oldValue = this.data;\n      this.data = null;\n    },\n    handleShowingInput: function () {\n      if (this.oldValue !== null) {\n        this.data = this.oldValue;\n      }\n    },\n    uploadStart() {\n      this.$emit(\"uploadstart\");\n    },\n    uploadEnd() {\n      this.$emit(\"uploadend\");\n    },\n  },\n  watch: {\n    // This is a bit of a workaround for testing purposes. Watcher for\n    // \"experimentInput.show\" does not get triggered during unit test so sync it\n    // to \"show\" data variable and then in the unit test manipulate \"show\"\n    // directly.\n    \"experimentInput.show\": function (newValue) {\n      this.show = newValue;\n    },\n    show: function (newValue, oldValue) {\n      // Hiding\n      if (oldValue && !newValue) {\n        this.handleHidingInput();\n      }\n      // Showing\n      else if (newValue && !oldValue) {\n        this.handleShowingInput();\n      }\n    },\n  },\n};\n",{"version":3,"sources":["InputEditorContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"InputEditorContainer.vue","sourceRoot":"static/django_airavata_workspace/js/components/experiment/input-editors","sourcesContent":["<template>\n  <input-editor-form-group\n    :label=\"experimentInput.name\"\n    :label-for=\"inputEditorComponentId\"\n    :state=\"validationState\"\n    :feedback-messages=\"validationFeedback\"\n    :description=\"experimentInput.userFriendlyDescription\"\n  >\n    <component\n      :is=\"inputEditorComponentName\"\n      :id=\"inputEditorComponentId\"\n      :experiment-input=\"experimentInput\"\n      :experiment=\"experiment\"\n      :read-only=\"experimentInput.isReadOnly\"\n      v-model=\"data\"\n      @invalid=\"recordInvalidInputEditorValue\"\n      @valid=\"recordValidInputEditorValue\"\n      @input=\"valueChanged\"\n      @uploadstart=\"uploadStart\"\n      @uploadend=\"uploadEnd\"\n    />\n  </input-editor-form-group>\n</template>\n\n<script>\nimport UserFileInputEditor from \"./UserFileInputEditor.vue\";\nimport AutocompleteInputEditor from \"./AutocompleteInputEditor\";\nimport CheckboxInputEditor from \"./CheckboxInputEditor.vue\";\nimport FileInputEditor from \"./FileInputEditor.vue\";\nimport InputEditorFormGroup from \"./InputEditorFormGroup.vue\";\nimport MultiFileInputEditor from \"./MultiFileInputEditor.vue\";\nimport RadioButtonInputEditor from \"./RadioButtonInputEditor.vue\";\nimport RangeSliderInputEditor from \"./RangeSliderInputEditor.vue\";\nimport SelectInputEditor from \"./SelectInputEditor.vue\";\nimport SliderInputEditor from \"./SliderInputEditor.vue\";\nimport StringInputEditor from \"./StringInputEditor.vue\";\nimport TextareaInputEditor from \"./TextareaInputEditor.vue\";\n\nimport { models } from \"django-airavata-api\";\nimport { mixins, utils } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"input-editor-container\",\n  mixins: [mixins.VModelMixin],\n  props: {\n    experimentInput: {\n      type: models.InputDataObjectType,\n      required: true,\n    },\n    experiment: {\n      type: models.Experiment,\n      required: true,\n    },\n  },\n  components: {\n    AutocompleteInputEditor,\n    CheckboxInputEditor,\n    FileInputEditor,\n    InputEditorFormGroup,\n    MultiFileInputEditor,\n    RadioButtonInputEditor,\n    RangeSliderInputEditor,\n    SelectInputEditor,\n    SliderInputEditor,\n    StringInputEditor,\n    TextareaInputEditor,\n    UserFileInputEditor,\n  },\n  created() {\n    if (!this.show) {\n      this.handleHidingInput();\n    }\n  },\n  data: function () {\n    return {\n      state: null,\n      feedbackMessages: [],\n      inputHasBegun: false,\n      // Store the current value when hiding input so we can restore it when shown again\n      oldValue: null,\n      show: this.experimentInput.show,\n    };\n  },\n  computed: {\n    inputEditorComponentName: function () {\n      // If input specifices an editor UI component, use that\n      if (this.experimentInput.editorUIComponentId) {\n        return this.experimentInput.editorUIComponentId;\n      }\n      // Default UI components based on input type\n      if (this.experimentInput.type === models.DataType.STRING) {\n        return \"string-input-editor\";\n      } else if (this.experimentInput.type === models.DataType.URI) {\n        return \"file-input-editor\";\n      } else if (this.experimentInput.type === models.DataType.URI_COLLECTION) {\n        return \"multi-file-input-editor\";\n      }\n      // Default\n      return \"string-input-editor\";\n    },\n    inputEditorComponentId: function () {\n      return utils.sanitizeHTMLId(this.experimentInput.name);\n    },\n    validationFeedback: function () {\n      // Only display validation feedback after the user has provided\n      // input so that missing required value errors are only displayed\n      // after interacting with the input editor\n      return this.inputHasBegun ? this.feedbackMessages : null;\n    },\n    validationState: function () {\n      return this.inputHasBegun ? this.state : null;\n    },\n  },\n  methods: {\n    recordValidInputEditorValue: function () {\n      this.state = \"valid\";\n      this.$emit(\"valid\");\n    },\n    recordInvalidInputEditorValue: function (feedbackMessages) {\n      this.feedbackMessages = feedbackMessages;\n      this.state = \"invalid\";\n      this.$emit(\"invalid\", feedbackMessages);\n    },\n    valueChanged: function () {\n      this.inputHasBegun = true;\n    },\n    handleHidingInput: function () {\n      this.oldValue = this.data;\n      this.data = null;\n    },\n    handleShowingInput: function () {\n      if (this.oldValue !== null) {\n        this.data = this.oldValue;\n      }\n    },\n    uploadStart() {\n      this.$emit(\"uploadstart\");\n    },\n    uploadEnd() {\n      this.$emit(\"uploadend\");\n    },\n  },\n  watch: {\n    // This is a bit of a workaround for testing purposes. Watcher for\n    // \"experimentInput.show\" does not get triggered during unit test so sync it\n    // to \"show\" data variable and then in the unit test manipulate \"show\"\n    // directly.\n    \"experimentInput.show\": function (newValue) {\n      this.show = newValue;\n    },\n    show: function (newValue, oldValue) {\n      // Hiding\n      if (oldValue && !newValue) {\n        this.handleHidingInput();\n      }\n      // Showing\n      else if (newValue && !oldValue) {\n        this.handleShowingInput();\n      }\n    },\n  },\n};\n</script>\n"]}]}