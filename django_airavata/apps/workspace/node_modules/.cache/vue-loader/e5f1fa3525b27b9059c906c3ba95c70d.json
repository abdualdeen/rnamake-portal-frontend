{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/QueueSettingsEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/QueueSettingsEditor.vue","mtime":1638641844339},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { models, services } from \"django-airavata-api\";\nimport { mixins, utils } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"queue-settings-editor\",\n  mixins: [mixins.VModelMixin],\n  props: {\n    value: {\n      type: models.ComputationalResourceSchedulingModel,\n    },\n    appDeploymentId: {\n      type: String,\n      required: true,\n    },\n    computeResourcePolicy: {\n      type: models.ComputeResourcePolicy,\n      required: false,\n    },\n    batchQueueResourcePolicies: {\n      type: Array,\n      required: false,\n    },\n  },\n  data() {\n    return {\n      showConfiguration: false,\n      appDeploymentQueues: null,\n    };\n  },\n  computed: {\n    queueOptions: function () {\n      const queueOptions = this.queueDefaults.map((queueDefault) => {\n        return {\n          value: queueDefault.queueName,\n          text: queueDefault.queueName,\n        };\n      });\n      return queueOptions;\n    },\n    selectedQueueDefault: function () {\n      return this.queueDefaults.find(\n        (queue) => queue.queueName === this.data.queueName\n      );\n    },\n    maxCPUCount: function () {\n      if (!this.selectedQueueDefault) {\n        return 0;\n      }\n      const batchQueueResourcePolicy = this.batchQueueResourcePolicy;\n      if (batchQueueResourcePolicy) {\n        return Math.min(\n          batchQueueResourcePolicy.maxAllowedCores,\n          this.selectedQueueDefault.maxProcessors\n        );\n      }\n      return this.selectedQueueDefault.maxProcessors;\n    },\n    maxNodes: function () {\n      if (!this.selectedQueueDefault) {\n        return 0;\n      }\n      const batchQueueResourcePolicy = this.batchQueueResourcePolicy;\n      if (batchQueueResourcePolicy) {\n        return Math.min(\n          batchQueueResourcePolicy.maxAllowedNodes,\n          this.selectedQueueDefault.maxNodes\n        );\n      }\n      return this.selectedQueueDefault.maxNodes;\n    },\n    maxWalltime: function () {\n      if (!this.selectedQueueDefault) {\n        return 0;\n      }\n      const batchQueueResourcePolicy = this.batchQueueResourcePolicy;\n      if (batchQueueResourcePolicy) {\n        return Math.min(\n          batchQueueResourcePolicy.maxAllowedWalltime,\n          this.selectedQueueDefault.maxRunTime\n        );\n      }\n      return this.selectedQueueDefault.maxRunTime;\n    },\n    maxPhysicalMemory: function () {\n      if (!this.selectedQueueDefault) {\n        return 0;\n      }\n      return this.selectedQueueDefault.maxMemory;\n    },\n    queueDefaults() {\n      return this.appDeploymentQueues\n        ? this.appDeploymentQueues\n            .filter((q) => this.isQueueInComputeResourcePolicy(q.queueName))\n            .sort((a, b) => {\n              // Sort default first, then by alphabetically by name\n              if (a.isDefaultQueue) {\n                return -1;\n              } else if (b.isDefaultQueue) {\n                return 1;\n              } else {\n                return a.queueName.localeCompare(b.queueName);\n              }\n            })\n        : [];\n    },\n    defaultQueue() {\n      if (this.queueDefaults.length === 0) {\n        return null;\n      }\n      return this.queueDefaults[0];\n    },\n    batchQueueResourcePolicy() {\n      if (!this.selectedQueueDefault) {\n        return null;\n      }\n      return this.getBatchQueueResourcePolicy(\n        this.selectedQueueDefault.queueName\n      );\n    },\n    queueDescription() {\n      return this.selectedQueueDefault\n        ? this.selectedQueueDefault.queueDescription\n        : null;\n    },\n    validation() {\n      // Don't run validation if we don't have selectedQueueDefault\n      if (!this.selectedQueueDefault) {\n        return this.data.validate();\n      }\n      return this.data.validate(\n        this.selectedQueueDefault,\n        this.batchQueueResourcePolicy\n      );\n    },\n    valid() {\n      return Object.keys(this.validation).length === 0;\n    },\n  },\n  methods: {\n    queueChanged: function (queueName) {\n      const queueDefault = this.queueDefaults.find(\n        (queue) => queue.queueName === queueName\n      );\n      this.data.totalCPUCount = this.getDefaultCPUCount(queueDefault);\n      this.data.nodeCount = this.getDefaultNodeCount(queueDefault);\n      this.data.wallTimeLimit = this.getDefaultWalltime(queueDefault);\n      if (this.maxPhysicalMemory === 0) {\n        this.data.totalPhysicalMemory = 0;\n      }\n    },\n    validate() {\n      if (!this.valid) {\n        this.$emit(\"invalid\");\n      } else {\n        this.$emit(\"valid\");\n      }\n    },\n    loadAppDeploymentQueues() {\n      return services.ApplicationDeploymentService.getQueues({\n        lookup: this.appDeploymentId,\n      }).then((queueDefaults) => (this.appDeploymentQueues = queueDefaults));\n    },\n    setDefaultQueue() {\n      if (this.queueDefaults.length === 0) {\n        this.data.queueName = null;\n        return;\n      }\n      const defaultQueue = this.queueDefaults[0];\n\n      this.data.queueName = defaultQueue.queueName;\n      this.data.totalCPUCount = this.getDefaultCPUCount(defaultQueue);\n      this.data.nodeCount = this.getDefaultNodeCount(defaultQueue);\n      this.data.wallTimeLimit = this.getDefaultWalltime(defaultQueue);\n      if (this.maxPhysicalMemory === 0) {\n        this.data.totalPhysicalMemory = 0;\n      }\n    },\n    isQueueInComputeResourcePolicy: function (queueName) {\n      if (!this.computeResourcePolicy) {\n        return true;\n      }\n      return this.computeResourcePolicy.allowedBatchQueues.includes(queueName);\n    },\n    getBatchQueueResourcePolicy: function (queueName) {\n      if (\n        !this.batchQueueResourcePolicies ||\n        this.batchQueueResourcePolicies.length === 0\n      ) {\n        return null;\n      }\n      return this.batchQueueResourcePolicies.find(\n        (bqrp) => bqrp.queuename === queueName\n      );\n    },\n    getDefaultCPUCount: function (queueDefault) {\n      const batchQueueResourcePolicy = this.batchQueueResourcePolicy;\n      if (batchQueueResourcePolicy) {\n        return Math.min(\n          batchQueueResourcePolicy.maxAllowedCores,\n          queueDefault.defaultCPUCount\n        );\n      }\n      return queueDefault.defaultCPUCount;\n    },\n    getDefaultNodeCount: function (queueDefault) {\n      const batchQueueResourcePolicy = this.batchQueueResourcePolicy;\n      if (batchQueueResourcePolicy) {\n        return Math.min(\n          batchQueueResourcePolicy.maxAllowedNodes,\n          queueDefault.defaultNodeCount\n        );\n      }\n      return queueDefault.defaultNodeCount;\n    },\n    getDefaultWalltime: function (queueDefault) {\n      const batchQueueResourcePolicy = this.batchQueueResourcePolicy;\n      if (batchQueueResourcePolicy) {\n        return Math.min(\n          batchQueueResourcePolicy.maxAllowedWalltime,\n          queueDefault.defaultWalltime\n        );\n      }\n      return queueDefault.defaultWalltime;\n    },\n    getValidationFeedback: function (properties) {\n      return utils.getProperty(this.validation, properties);\n    },\n    getValidationState: function (properties, showValidState) {\n      return this.getValidationFeedback(properties)\n        ? \"invalid\"\n        : showValidState\n        ? \"valid\"\n        : null;\n    },\n    applyBatchQueueResourcePolicy() {\n      // Apply batchQueueResourcePolicy maximums\n      if (this.selectedQueueDefault) {\n        this.data.totalCPUCount = Math.min(\n          this.data.totalCPUCount,\n          this.maxCPUCount\n        );\n        this.data.nodeCount = Math.min(this.data.nodeCount, this.maxNodes);\n        this.data.wallTimeLimit = Math.min(\n          this.data.wallTimeLimit,\n          this.maxWalltime\n        );\n      }\n    },\n  },\n  watch: {\n    appDeploymentId() {\n      this.loadAppDeploymentQueues().then(() => this.setDefaultQueue());\n    },\n    // If batch queue policy changes, apply any maximum values to current values\n    batchQueueResourcePolicy(value, oldValue) {\n      if (\n        value &&\n        (!oldValue || value.resourcePolicyId !== oldValue.resourcePolicyId)\n      ) {\n        this.applyBatchQueueResourcePolicy();\n      }\n    },\n    computeResourcePolicy() {\n      if (!this.isQueueInComputeResourcePolicy(this.data.queueName)) {\n        this.setDefaultQueue();\n      }\n    },\n  },\n  mounted: function () {\n    this.loadAppDeploymentQueues().then(() => {\n      // For brand new queue settings (no queueName specified) load the default\n      // queue and its default values and apply them\n      if (!this.value.queueName) {\n        this.setDefaultQueue();\n      }\n    });\n    this.$on(\"input\", () => this.validate());\n  },\n};\n",{"version":3,"sources":["QueueSettingsEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"QueueSettingsEditor.vue","sourceRoot":"static/django_airavata_workspace/js/components/experiment","sourcesContent":["<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <div class=\"card border-default\" :class=\"{ 'border-danger': !valid }\">\n          <b-link\n            @click=\"showConfiguration = !showConfiguration\"\n            class=\"card-link text-dark\"\n          >\n            <div class=\"card-body\">\n              <h5 class=\"card-title mb-4\">\n                Settings for queue {{ data.queueName }}\n              </h5>\n              <div class=\"row\">\n                <div class=\"col\">\n                  <h3 class=\"h5 mb-0\">\n                    {{ data.nodeCount }}\n                  </h3>\n                  <span class=\"text-muted text-uppercase\">NODE COUNT</span>\n                </div>\n                <div class=\"col\">\n                  <h3 class=\"h5 mb-0\">\n                    {{ data.totalCPUCount }}\n                  </h3>\n                  <span class=\"text-muted text-uppercase\">CORE COUNT</span>\n                </div>\n                <div class=\"col\">\n                  <h3 class=\"h5 mb-0\">{{ data.wallTimeLimit }} minutes</h3>\n                  <span class=\"text-muted text-uppercase\">TIME LIMIT</span>\n                </div>\n                <div class=\"col\" v-if=\"maxPhysicalMemory > 0\">\n                  <h3 class=\"h5 mb-0\">{{ data.totalPhysicalMemory }} MB</h3>\n                  <span class=\"text-muted text-uppercase\">PHYSICAL MEMORY</span>\n                </div>\n              </div>\n            </div>\n          </b-link>\n        </div>\n      </div>\n    </div>\n    <div v-if=\"showConfiguration\">\n      <div class=\"row\">\n        <div class=\"col\">\n          <b-form-group\n            label=\"Select a Queue\"\n            label-for=\"queue\"\n            :invalid-feedback=\"getValidationFeedback('queueName')\"\n            :state=\"getValidationState('queueName')\"\n          >\n            <b-form-select\n              id=\"queue\"\n              v-model=\"data.queueName\"\n              :options=\"queueOptions\"\n              required\n              @change=\"queueChanged\"\n              :state=\"getValidationState('queueName')\"\n            >\n            </b-form-select>\n            <div slot=\"description\">\n              {{ queueDescription }}\n            </div>\n          </b-form-group>\n          <b-form-group\n            label=\"Node Count\"\n            label-for=\"node-count\"\n            :invalid-feedback=\"getValidationFeedback('nodeCount')\"\n            :state=\"getValidationState('nodeCount', true)\"\n          >\n            <b-form-input\n              id=\"node-count\"\n              type=\"number\"\n              min=\"1\"\n              :max=\"maxNodes\"\n              v-model=\"data.nodeCount\"\n              required\n              :state=\"getValidationState('nodeCount', true)\"\n            >\n            </b-form-input>\n            <div slot=\"description\">\n              <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n              Max Allowed Nodes = {{ maxNodes }}\n            </div>\n          </b-form-group>\n          <b-form-group\n            label=\"Total Core Count\"\n            label-for=\"core-count\"\n            :invalid-feedback=\"getValidationFeedback('totalCPUCount')\"\n            :state=\"getValidationState('totalCPUCount', true)\"\n          >\n            <b-form-input\n              id=\"core-count\"\n              type=\"number\"\n              min=\"1\"\n              :max=\"maxCPUCount\"\n              v-model=\"data.totalCPUCount\"\n              required\n              :state=\"getValidationState('totalCPUCount', true)\"\n            >\n            </b-form-input>\n            <div slot=\"description\">\n              <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n              Max Allowed Cores = {{ maxCPUCount }}\n            </div>\n          </b-form-group>\n          <b-form-group\n            label=\"Wall Time Limit\"\n            label-for=\"walltime-limit\"\n            :invalid-feedback=\"getValidationFeedback('wallTimeLimit')\"\n            :state=\"getValidationState('wallTimeLimit', true)\"\n          >\n            <b-input-group append=\"minutes\">\n              <b-form-input\n                id=\"walltime-limit\"\n                type=\"number\"\n                min=\"1\"\n                :max=\"maxWalltime\"\n                v-model=\"data.wallTimeLimit\"\n                required\n                :state=\"getValidationState('wallTimeLimit', true)\"\n              >\n              </b-form-input>\n            </b-input-group>\n            <div slot=\"description\">\n              <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n              Max Allowed Wall Time = {{ maxWalltime }} minutes\n            </div>\n          </b-form-group>\n          <b-form-group\n            v-if=\"maxPhysicalMemory > 0\"\n            label=\"Total Physical Memory\"\n            label-for=\"total-physical-memory\"\n            :invalid-feedback=\"getValidationFeedback('totalPhysicalMemory')\"\n            :state=\"getValidationState('totalPhysicalMemory', true)\"\n          >\n            <b-input-group append=\"MB\">\n              <b-form-input\n                id=\"total-physical-memory\"\n                type=\"number\"\n                min=\"0\"\n                :max=\"maxPhysicalMemory\"\n                v-model=\"data.totalPhysicalMemory\"\n                :state=\"getValidationState('totalPhysicalMemory', true)\"\n              >\n              </b-form-input>\n            </b-input-group>\n            <div slot=\"description\">\n              <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\n              Max Physical Memory = {{ maxPhysicalMemory }} MB\n            </div>\n          </b-form-group>\n          <div>\n            <a\n              class=\"text-secondary action-link\"\n              href=\"#\"\n              @click.prevent=\"showConfiguration = false\"\n            >\n              <i class=\"fa fa-times text-secondary\" aria-hidden=\"true\"></i>\n              Hide Settings</a\n            >\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { models, services } from \"django-airavata-api\";\nimport { mixins, utils } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"queue-settings-editor\",\n  mixins: [mixins.VModelMixin],\n  props: {\n    value: {\n      type: models.ComputationalResourceSchedulingModel,\n    },\n    appDeploymentId: {\n      type: String,\n      required: true,\n    },\n    computeResourcePolicy: {\n      type: models.ComputeResourcePolicy,\n      required: false,\n    },\n    batchQueueResourcePolicies: {\n      type: Array,\n      required: false,\n    },\n  },\n  data() {\n    return {\n      showConfiguration: false,\n      appDeploymentQueues: null,\n    };\n  },\n  computed: {\n    queueOptions: function () {\n      const queueOptions = this.queueDefaults.map((queueDefault) => {\n        return {\n          value: queueDefault.queueName,\n          text: queueDefault.queueName,\n        };\n      });\n      return queueOptions;\n    },\n    selectedQueueDefault: function () {\n      return this.queueDefaults.find(\n        (queue) => queue.queueName === this.data.queueName\n      );\n    },\n    maxCPUCount: function () {\n      if (!this.selectedQueueDefault) {\n        return 0;\n      }\n      const batchQueueResourcePolicy = this.batchQueueResourcePolicy;\n      if (batchQueueResourcePolicy) {\n        return Math.min(\n          batchQueueResourcePolicy.maxAllowedCores,\n          this.selectedQueueDefault.maxProcessors\n        );\n      }\n      return this.selectedQueueDefault.maxProcessors;\n    },\n    maxNodes: function () {\n      if (!this.selectedQueueDefault) {\n        return 0;\n      }\n      const batchQueueResourcePolicy = this.batchQueueResourcePolicy;\n      if (batchQueueResourcePolicy) {\n        return Math.min(\n          batchQueueResourcePolicy.maxAllowedNodes,\n          this.selectedQueueDefault.maxNodes\n        );\n      }\n      return this.selectedQueueDefault.maxNodes;\n    },\n    maxWalltime: function () {\n      if (!this.selectedQueueDefault) {\n        return 0;\n      }\n      const batchQueueResourcePolicy = this.batchQueueResourcePolicy;\n      if (batchQueueResourcePolicy) {\n        return Math.min(\n          batchQueueResourcePolicy.maxAllowedWalltime,\n          this.selectedQueueDefault.maxRunTime\n        );\n      }\n      return this.selectedQueueDefault.maxRunTime;\n    },\n    maxPhysicalMemory: function () {\n      if (!this.selectedQueueDefault) {\n        return 0;\n      }\n      return this.selectedQueueDefault.maxMemory;\n    },\n    queueDefaults() {\n      return this.appDeploymentQueues\n        ? this.appDeploymentQueues\n            .filter((q) => this.isQueueInComputeResourcePolicy(q.queueName))\n            .sort((a, b) => {\n              // Sort default first, then by alphabetically by name\n              if (a.isDefaultQueue) {\n                return -1;\n              } else if (b.isDefaultQueue) {\n                return 1;\n              } else {\n                return a.queueName.localeCompare(b.queueName);\n              }\n            })\n        : [];\n    },\n    defaultQueue() {\n      if (this.queueDefaults.length === 0) {\n        return null;\n      }\n      return this.queueDefaults[0];\n    },\n    batchQueueResourcePolicy() {\n      if (!this.selectedQueueDefault) {\n        return null;\n      }\n      return this.getBatchQueueResourcePolicy(\n        this.selectedQueueDefault.queueName\n      );\n    },\n    queueDescription() {\n      return this.selectedQueueDefault\n        ? this.selectedQueueDefault.queueDescription\n        : null;\n    },\n    validation() {\n      // Don't run validation if we don't have selectedQueueDefault\n      if (!this.selectedQueueDefault) {\n        return this.data.validate();\n      }\n      return this.data.validate(\n        this.selectedQueueDefault,\n        this.batchQueueResourcePolicy\n      );\n    },\n    valid() {\n      return Object.keys(this.validation).length === 0;\n    },\n  },\n  methods: {\n    queueChanged: function (queueName) {\n      const queueDefault = this.queueDefaults.find(\n        (queue) => queue.queueName === queueName\n      );\n      this.data.totalCPUCount = this.getDefaultCPUCount(queueDefault);\n      this.data.nodeCount = this.getDefaultNodeCount(queueDefault);\n      this.data.wallTimeLimit = this.getDefaultWalltime(queueDefault);\n      if (this.maxPhysicalMemory === 0) {\n        this.data.totalPhysicalMemory = 0;\n      }\n    },\n    validate() {\n      if (!this.valid) {\n        this.$emit(\"invalid\");\n      } else {\n        this.$emit(\"valid\");\n      }\n    },\n    loadAppDeploymentQueues() {\n      return services.ApplicationDeploymentService.getQueues({\n        lookup: this.appDeploymentId,\n      }).then((queueDefaults) => (this.appDeploymentQueues = queueDefaults));\n    },\n    setDefaultQueue() {\n      if (this.queueDefaults.length === 0) {\n        this.data.queueName = null;\n        return;\n      }\n      const defaultQueue = this.queueDefaults[0];\n\n      this.data.queueName = defaultQueue.queueName;\n      this.data.totalCPUCount = this.getDefaultCPUCount(defaultQueue);\n      this.data.nodeCount = this.getDefaultNodeCount(defaultQueue);\n      this.data.wallTimeLimit = this.getDefaultWalltime(defaultQueue);\n      if (this.maxPhysicalMemory === 0) {\n        this.data.totalPhysicalMemory = 0;\n      }\n    },\n    isQueueInComputeResourcePolicy: function (queueName) {\n      if (!this.computeResourcePolicy) {\n        return true;\n      }\n      return this.computeResourcePolicy.allowedBatchQueues.includes(queueName);\n    },\n    getBatchQueueResourcePolicy: function (queueName) {\n      if (\n        !this.batchQueueResourcePolicies ||\n        this.batchQueueResourcePolicies.length === 0\n      ) {\n        return null;\n      }\n      return this.batchQueueResourcePolicies.find(\n        (bqrp) => bqrp.queuename === queueName\n      );\n    },\n    getDefaultCPUCount: function (queueDefault) {\n      const batchQueueResourcePolicy = this.batchQueueResourcePolicy;\n      if (batchQueueResourcePolicy) {\n        return Math.min(\n          batchQueueResourcePolicy.maxAllowedCores,\n          queueDefault.defaultCPUCount\n        );\n      }\n      return queueDefault.defaultCPUCount;\n    },\n    getDefaultNodeCount: function (queueDefault) {\n      const batchQueueResourcePolicy = this.batchQueueResourcePolicy;\n      if (batchQueueResourcePolicy) {\n        return Math.min(\n          batchQueueResourcePolicy.maxAllowedNodes,\n          queueDefault.defaultNodeCount\n        );\n      }\n      return queueDefault.defaultNodeCount;\n    },\n    getDefaultWalltime: function (queueDefault) {\n      const batchQueueResourcePolicy = this.batchQueueResourcePolicy;\n      if (batchQueueResourcePolicy) {\n        return Math.min(\n          batchQueueResourcePolicy.maxAllowedWalltime,\n          queueDefault.defaultWalltime\n        );\n      }\n      return queueDefault.defaultWalltime;\n    },\n    getValidationFeedback: function (properties) {\n      return utils.getProperty(this.validation, properties);\n    },\n    getValidationState: function (properties, showValidState) {\n      return this.getValidationFeedback(properties)\n        ? \"invalid\"\n        : showValidState\n        ? \"valid\"\n        : null;\n    },\n    applyBatchQueueResourcePolicy() {\n      // Apply batchQueueResourcePolicy maximums\n      if (this.selectedQueueDefault) {\n        this.data.totalCPUCount = Math.min(\n          this.data.totalCPUCount,\n          this.maxCPUCount\n        );\n        this.data.nodeCount = Math.min(this.data.nodeCount, this.maxNodes);\n        this.data.wallTimeLimit = Math.min(\n          this.data.wallTimeLimit,\n          this.maxWalltime\n        );\n      }\n    },\n  },\n  watch: {\n    appDeploymentId() {\n      this.loadAppDeploymentQueues().then(() => this.setDefaultQueue());\n    },\n    // If batch queue policy changes, apply any maximum values to current values\n    batchQueueResourcePolicy(value, oldValue) {\n      if (\n        value &&\n        (!oldValue || value.resourcePolicyId !== oldValue.resourcePolicyId)\n      ) {\n        this.applyBatchQueueResourcePolicy();\n      }\n    },\n    computeResourcePolicy() {\n      if (!this.isQueueInComputeResourcePolicy(this.data.queueName)) {\n        this.setDefaultQueue();\n      }\n    },\n  },\n  mounted: function () {\n    this.loadAppDeploymentQueues().then(() => {\n      // For brand new queue settings (no queueName specified) load the default\n      // queue and its default values and apply them\n      if (!this.value.queueName) {\n        this.setDefaultQueue();\n      }\n    });\n    this.$on(\"input\", () => this.validate());\n  },\n};\n</script>\n\n<style></style>\n"]}]}