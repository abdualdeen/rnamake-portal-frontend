{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/web-components/ExperimentEditor.vue?vue&type=style&index=0&lang=scss&shadow","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/web-components/ExperimentEditor.vue","mtime":1638641844343},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/css-loader/index.js","mtime":1638646228588},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1638646228900},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/postcss-loader/src/index.js","mtime":1638646228869},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/postcss-loader/src/index.js","mtime":1638646228869},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/sass-loader/dist/cjs.js","mtime":1639685351807},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"./styles\";\n\n:host {\n  display: block;\n  margin-bottom: 1em;\n}\n",{"version":3,"sources":["ExperimentEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8SA;;AAEA;AACA;AACA;AACA","file":"ExperimentEditor.vue","sourceRoot":"static/django_airavata_workspace/js/web-components","sourcesContent":["<template>\n  <form v-if=\"experiment\" @submit.prevent=\"onSubmit\">\n    <div ref=\"experimentName\" @input=\"updateExperimentName\">\n      <!-- programmatically define slot for experiment-name as native slot\n            (not Vue slots), see #mounted() -->\n    </div>\n    <div ref=\"projectSelector\" @input=\"updateProjectId\">\n      <!-- programmatically define slot for experiment-project as native slot\n           (not Vue slots), see #mounted() -->\n    </div>\n    <template v-for=\"input in experiment.experimentInputs\">\n      <div\n        :ref=\"input.name\"\n        :key=\"input.name\"\n        @input=\"updateInputValue(input.name, $event)\"\n      >\n        <!-- programmatically define slots as native slots (not Vue slots), see #mounted() -->\n      </div>\n    </template>\n    <div\n      ref=\"groupResourceProfileSelector\"\n      @input.stop=\"updateGroupResourceProfileId\"\n    >\n      <!-- programmatically define slot for adpf-group-resource-profile-selector -->\n    </div>\n    <div ref=\"computeResourceSelector\">\n      <!-- programmatically define slot for adpf-experiment-compute-resource-selector -->\n    </div>\n    <div ref=\"queueSettingsEditor\">\n      <!-- programmatically define slot for adpf-queue-settings-editor -->\n    </div>\n    <div ref=\"experimentButtons\">\n      <!-- programmatically define slot for experiment-buttons as\n          native slot (not Vue slots), see #mounted() -->\n    </div>\n  </form>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport store from \"./store\";\nimport { mapGetters } from \"vuex\";\nimport { BootstrapVue } from \"bootstrap-vue\";\nimport urls from \"../utils/urls\";\nVue.use(BootstrapVue);\n\nexport default {\n  props: {\n    // TODO: rename to applicationModuleId?\n    applicationId: {\n      type: String,\n      required: true,\n    },\n    experimentId: {\n      type: String,\n      required: false,\n    },\n  },\n  store: store,\n  async created() {},\n  async mounted() {\n    if (this.experimentId) {\n      await this.$store.dispatch(\"loadExperiment\", {\n        experimentId: this.experimentId,\n      });\n    } else {\n      await this.$store.dispatch(\"loadNewExperiment\", {\n        applicationId: this.applicationId,\n      });\n    }\n    this.$emit(\"loaded\", this.experiment);\n    // vue-web-component-wrapper clones native slots and turns them into Vue\n    // slots which means they lose any event listeners and they basically aren't\n    // in the DOM any more.  As a workaround, programmatically create native\n    // slots. See also https://github.com/vuejs/vue-web-component-wrapper/issues/38\n    this.$nextTick(() => {\n      for (const input of this.experiment.experimentInputs) {\n        const slot = document.createElement(\"slot\");\n        slot.setAttribute(\"name\", input.name);\n        if (input.type.name === \"STRING\") {\n          slot.textContent = `${input.name} `;\n          const textInput = document.createElement(\"adpf-string-input-editor\");\n          textInput.setAttribute(\"value\", input.value);\n          textInput.setAttribute(\"name\", input.name);\n          slot.appendChild(textInput);\n          this.$refs[input.name][0].append(slot);\n        }\n        // TODO: add support for other input types\n      }\n      // this.injectPropsIntoSlottedInputs();\n\n      /*\n       * Experiment Name native slot\n       */\n      // <slot name=\"experiment-name\">\n      //   <b-form-group label=\"Experiment Name\" label-for=\"experiment-name\">\n      //     <b-form-input\n      //       type=\"text\"\n      //       name=\"experiment-name\"\n      //       :value=\"experiment.experimentName\"\n      //       required\n      //     >\n      //     </b-form-input>\n      //   </b-form-group>\n      // </slot>\n      const experimentNameGroupEl = document.createElement(\"div\");\n      experimentNameGroupEl.classList.add(\"form-group\");\n      const experimentNameLabelEl = document.createElement(\"label\");\n      experimentNameLabelEl.setAttribute(\"for\", \"experiment-name-input\");\n      experimentNameLabelEl.textContent = \"Experiment Name\";\n      const experimentNameInputEl = document.createElement(\"input\");\n      experimentNameInputEl.classList.add(\"form-control\");\n      experimentNameInputEl.setAttribute(\"id\", \"experiment-name-input\");\n      experimentNameInputEl.setAttribute(\"type\", \"text\");\n      experimentNameInputEl.setAttribute(\"name\", \"experiment-name\");\n      experimentNameInputEl.setAttribute(\n        \"value\",\n        this.experiment.experimentName\n      );\n      experimentNameInputEl.setAttribute(\"required\", \"required\");\n      experimentNameGroupEl.append(\n        experimentNameLabelEl,\n        experimentNameInputEl\n      );\n      this.$refs.experimentName.append(\n        this.createSlot(\"experiment-name\", experimentNameGroupEl)\n      );\n\n      const projectSelectorEl = document.createElement(\"adpf-project-selector\");\n      if (this.experiment.projectId) {\n        projectSelectorEl.setAttribute(\"value\", this.experiment.projectId);\n      }\n      this.$refs.projectSelector.append(\n        this.createSlot(\"experiment-project\", projectSelectorEl)\n      );\n\n      const groupResourceProfileSelectorEl = document.createElement(\n        \"adpf-group-resource-profile-selector\"\n      );\n      if (this.groupResourceProfileId) {\n        groupResourceProfileSelectorEl.setAttribute(\n          \"value\",\n          this.groupResourceProfileId\n        );\n      }\n      this.$refs.groupResourceProfileSelector.append(\n        this.createSlot(\n          \"experiment-group-resource-profile\",\n          groupResourceProfileSelectorEl\n        )\n      );\n\n      const computeResourceSelectorEl = document.createElement(\n        \"adpf-experiment-compute-resource-selector\"\n      );\n      this.$refs.computeResourceSelector.append(\n        this.createSlot(\n          \"experiment-compute-resource\",\n          computeResourceSelectorEl\n        )\n      );\n\n      const queueSettingsEditorEl = document.createElement(\n        \"adpf-queue-settings-editor\"\n      );\n      this.$refs.queueSettingsEditor.append(\n        this.createSlot(\"experiment-queue-settings\", queueSettingsEditorEl)\n      );\n\n      /*\n       * Experiment (save/launch) Buttons native slot\n       */\n      // <slot name=\"experiment-buttons\">\n      //   <div class=\"d-flex justify-content-end\">\n      //     <b-button\n      //       type=\"submit\"\n      //       variant=\"success\"\n      //       name=\"save-and-launch-experiment-button\"\n      //       class=\"mr-2\"\n      //     >\n      //       Save and Launch\n      //     </b-button>\n      //     <b-button type=\"submit\" variant=\"primary\" name=\"save-experiment-button\">\n      //       Save\n      //     </b-button>\n      //   </div>\n      // </slot>\n      const buttonsRowEl = document.createElement(\"div\");\n      buttonsRowEl.classList.add(\"d-flex\", \"justify-content-end\");\n      const saveAndLaunchButtonEl = document.createElement(\"button\");\n      saveAndLaunchButtonEl.setAttribute(\"type\", \"submit\");\n      saveAndLaunchButtonEl.setAttribute(\n        \"name\",\n        \"save-and-launch-experiment-button\"\n      );\n      saveAndLaunchButtonEl.classList.add(\"btn\", \"btn-success\", \"mr-2\");\n      saveAndLaunchButtonEl.textContent = \"Save and Launch\";\n      const saveButtonEl = document.createElement(\"button\");\n      saveButtonEl.setAttribute(\"type\", \"submit\");\n      saveButtonEl.setAttribute(\"name\", \"save-experiment-button\");\n      saveButtonEl.classList.add(\"btn\", \"btn-primary\");\n      saveButtonEl.textContent = \"Save\";\n      buttonsRowEl.append(saveAndLaunchButtonEl, saveButtonEl);\n      this.$refs.experimentButtons.append(\n        this.createSlot(\"experiment-buttons\", buttonsRowEl)\n      );\n    });\n  },\n  computed: {\n    ...mapGetters([\"experiment\", \"groupResourceProfileId\"]),\n  },\n  methods: {\n    updateExperimentName(event) {\n      this.$store.dispatch(\"updateExperimentName\", {\n        name: event.target.value,\n      });\n    },\n    updateInputValue(inputName, event) {\n      // web component input events have the current value in a detail array,\n      // native input events have the current value in target.value\n      const value = Array.isArray(event.detail)\n        ? event.detail[0]\n        : event.target // Backwards compatibility: second argument changed from the value to the 'event'\n        ? event.target.value\n        : event;\n      this.$store.dispatch(\"updateExperimentInputValue\", { inputName, value });\n    },\n    updateProjectId(event) {\n      const [projectId] = event.detail;\n      this.$store.dispatch(\"updateProjectId\", { projectId });\n    },\n    updateGroupResourceProfileId(event) {\n      const [groupResourceProfileId] = event.detail;\n      this.$store.dispatch(\"updateGroupResourceProfileId\", {\n        groupResourceProfileId,\n      });\n    },\n    async onSubmit(event) {\n      // console.log(event);\n      // 'save' event is cancelable. Listener can call .preventDefault() on the event to cancel.\n      // composed: true allows the shadow DOM event to bubble up through the shadow root.\n      const saveEvent = new CustomEvent(\"save\", {\n        detail: [this.experiment],\n        cancelable: true,\n        composed: true,\n      });\n      this.$el.dispatchEvent(saveEvent);\n      if (saveEvent.defaultPrevented) {\n        return;\n      }\n      if (event.submitter.name === \"save-experiment-button\") {\n        await this.$store.dispatch(\"saveExperiment\");\n        this.postSave();\n        return;\n      } else {\n        // Default submit button handling is save and launch\n        await this.$store.dispatch(\"saveExperiment\");\n        await this.$store.dispatch(\"launchExperiment\");\n        this.postSaveAndLaunch(this.experiment);\n        return;\n      }\n    },\n    postSave() {\n      // client code can listen for 'saved' and preventDefault() on it to handle\n      // it differently. Default action is to navigate to experiments list.\n      const savedEvent = new CustomEvent(\"saved\", {\n        detail: [this.experiment],\n        cancelable: true,\n        composed: true,\n      });\n      this.$el.dispatchEvent(savedEvent);\n      if (savedEvent.defaultPrevented) {\n        return;\n      }\n      urls.navigateToExperimentsList();\n    },\n    postSaveAndLaunch(experiment) {\n      // client code can listen for 'saved-and-launched' and preventDefault() on\n      // it to handle it differently. Default action is to navigate to\n      // the experiment summary page.\n      const savedAndLaunchedEvent = new CustomEvent(\"saved-and-launched\", {\n        detail: [this.experiment],\n        cancelable: true,\n        composed: true,\n      });\n      this.$el.dispatchEvent(savedAndLaunchedEvent);\n      if (savedAndLaunchedEvent.defaultPrevented) {\n        return;\n      }\n      urls.navigateToViewExperiment(experiment, { launching: true });\n    },\n    createSlot(name, ...children) {\n      const slot = document.createElement(\"slot\");\n      slot.setAttribute(\"name\", name);\n      slot.append(...children);\n      return slot;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n@import \"./styles\";\n\n:host {\n  display: block;\n  margin-bottom: 1em;\n}\n</style>\n"]}]}