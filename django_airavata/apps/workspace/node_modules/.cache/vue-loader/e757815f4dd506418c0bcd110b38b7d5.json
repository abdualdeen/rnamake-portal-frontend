{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/input-editors/RangeSliderInputEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/input-editors/RangeSliderInputEditor.vue","mtime":1638641844339},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { InputEditorMixin } from \"django-airavata-workspace-plugin-api\";\nimport VueSlider from \"vue-slider-component\";\n\nexport default {\n  name: \"range-slider-input-editor\",\n  mixins: [InputEditorMixin],\n  props: {\n    value: {\n      type: String,\n    },\n    min: Number,\n    max: Number,\n    step: Number,\n    valueFormat: {\n      type: String,\n      validator(value) {\n        return [\"percentage\"].indexOf(value) !== -1;\n      },\n    },\n    displayFormat: {\n      type: String,\n      validator(value) {\n        return [\"percentage\"].indexOf(value) !== -1;\n      },\n    },\n    delimiter: String,\n  },\n  components: {\n    VueSlider,\n  },\n  data() {\n    return {\n      sliderValues: null,\n    };\n  },\n  created() {\n    this.initializeSliderValues();\n  },\n  computed: {\n    sliderMin: function () {\n      return typeof this.min !== \"undefined\"\n        ? this.min\n        : \"min\" in this.editorConfig\n        ? this.editorConfig.min\n        : 0;\n    },\n    sliderMax: function () {\n      return typeof this.max !== \"undefined\"\n        ? this.max\n        : \"max\" in this.editorConfig\n        ? this.editorConfig.max\n        : 100;\n    },\n    sliderStep: function () {\n      return typeof this.step !== \"undefined\"\n        ? this.step\n        : \"step\" in this.editorConfig\n        ? this.editorConfig.step\n        : 1;\n    },\n    sliderDelimiter() {\n      return this.delimiter\n        ? this.delimiter\n        : \"delimiter\" in this.editorConfig\n        ? this.editorConfig.delimiter\n        : \"-\";\n    },\n  },\n  methods: {\n    initializeSliderValues() {\n      this.sliderValues = this.parseValue(this.data);\n      // If parsing the value resulted in it changing (failed to parse so\n      // initialized to ['sliderMin', 'sliderMax']), update the value\n      if (this.data !== this.formatValue(this.sliderValues)) {\n        this.onChange(this.sliderValues);\n      }\n    },\n    parseValue(value) {\n      // Just remove any percentage signs\n      const result = value\n        ? value.replaceAll(\"%\", \"\").split(this.sliderDelimiter).map(parseFloat)\n        : [];\n      return result.length === 2 && !isNaN(result[0]) && !isNaN(result[1])\n        ? result\n        : [this.sliderMin, this.sliderMax];\n    },\n    onChange(value) {\n      this.data = this.formatValue(value);\n      this.valueChanged();\n    },\n    tooltipFormatter(value) {\n      if (this.displayFormat) {\n        if (this.displayFormat === \"percentage\") {\n          return `${value}%`;\n        }\n      } else if (\"displayFormat\" in this.editorConfig) {\n        if (this.editorConfig.displayFormat.percentage) {\n          return `${value}%`;\n        }\n      }\n      return value;\n    },\n    formatValue(value) {\n      let values = value.map(String);\n      if (this.valueFormat) {\n        if (this.valueFormat === \"percentage\") {\n          values = values.map((v) => `${v}%`);\n        }\n      } else if (\"valueFormat\" in this.editorConfig) {\n        if (this.editorConfig.valueFormat.percentage) {\n          values = values.map((v) => `${v}%`);\n        }\n      }\n      return values.join(this.sliderDelimiter);\n    },\n  },\n  watch: {\n    data() {\n      this.initializeSliderValues();\n    },\n  },\n};\n",{"version":3,"sources":["RangeSliderInputEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgfile":"RangeSliderInputEditor.vue","sourceRoot":"static/django_airavata_workspace/js/components/experiment/input-editors","sourcesContent":["<template>\n  <vue-slider\n    v-model=\"sliderValues\"\n    @change=\"onChange\"\n    :state=\"componentValidState\"\n    :disabled=\"readOnly\"\n    :min=\"sliderMin\"\n    :max=\"sliderMax\"\n    :interval=\"sliderStep\"\n    tooltip=\"always\"\n    :tooltip-formatter=\"tooltipFormatter\"\n    :enable-cross=\"false\"\n  />\n</template>\n\n<script>\nimport { InputEditorMixin } from \"django-airavata-workspace-plugin-api\";\nimport VueSlider from \"vue-slider-component\";\n\nexport default {\n  name: \"range-slider-input-editor\",\n  mixins: [InputEditorMixin],\n  props: {\n    value: {\n      type: String,\n    },\n    min: Number,\n    max: Number,\n    step: Number,\n    valueFormat: {\n      type: String,\n      validator(value) {\n        return [\"percentage\"].indexOf(value) !== -1;\n      },\n    },\n    displayFormat: {\n      type: String,\n      validator(value) {\n        return [\"percentage\"].indexOf(value) !== -1;\n      },\n    },\n    delimiter: String,\n  },\n  components: {\n    VueSlider,\n  },\n  data() {\n    return {\n      sliderValues: null,\n    };\n  },\n  created() {\n    this.initializeSliderValues();\n  },\n  computed: {\n    sliderMin: function () {\n      return typeof this.min !== \"undefined\"\n        ? this.min\n        : \"min\" in this.editorConfig\n        ? this.editorConfig.min\n        : 0;\n    },\n    sliderMax: function () {\n      return typeof this.max !== \"undefined\"\n        ? this.max\n        : \"max\" in this.editorConfig\n        ? this.editorConfig.max\n        : 100;\n    },\n    sliderStep: function () {\n      return typeof this.step !== \"undefined\"\n        ? this.step\n        : \"step\" in this.editorConfig\n        ? this.editorConfig.step\n        : 1;\n    },\n    sliderDelimiter() {\n      return this.delimiter\n        ? this.delimiter\n        : \"delimiter\" in this.editorConfig\n        ? this.editorConfig.delimiter\n        : \"-\";\n    },\n  },\n  methods: {\n    initializeSliderValues() {\n      this.sliderValues = this.parseValue(this.data);\n      // If parsing the value resulted in it changing (failed to parse so\n      // initialized to ['sliderMin', 'sliderMax']), update the value\n      if (this.data !== this.formatValue(this.sliderValues)) {\n        this.onChange(this.sliderValues);\n      }\n    },\n    parseValue(value) {\n      // Just remove any percentage signs\n      const result = value\n        ? value.replaceAll(\"%\", \"\").split(this.sliderDelimiter).map(parseFloat)\n        : [];\n      return result.length === 2 && !isNaN(result[0]) && !isNaN(result[1])\n        ? result\n        : [this.sliderMin, this.sliderMax];\n    },\n    onChange(value) {\n      this.data = this.formatValue(value);\n      this.valueChanged();\n    },\n    tooltipFormatter(value) {\n      if (this.displayFormat) {\n        if (this.displayFormat === \"percentage\") {\n          return `${value}%`;\n        }\n      } else if (\"displayFormat\" in this.editorConfig) {\n        if (this.editorConfig.displayFormat.percentage) {\n          return `${value}%`;\n        }\n      }\n      return value;\n    },\n    formatValue(value) {\n      let values = value.map(String);\n      if (this.valueFormat) {\n        if (this.valueFormat === \"percentage\") {\n          values = values.map((v) => `${v}%`);\n        }\n      } else if (\"valueFormat\" in this.editorConfig) {\n        if (this.editorConfig.valueFormat.percentage) {\n          values = values.map((v) => `${v}%`);\n        }\n      }\n      return values.join(this.sliderDelimiter);\n    },\n  },\n  watch: {\n    data() {\n      this.initializeSliderValues();\n    },\n  },\n};\n</script>\n"]}]}