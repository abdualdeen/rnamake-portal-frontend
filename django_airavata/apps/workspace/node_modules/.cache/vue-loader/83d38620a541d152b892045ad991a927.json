{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/containers/UserStorageContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/containers/UserStorageContainer.vue","mtime":1638641844343},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { services, utils } from \"django-airavata-api\";\nimport { notifications } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"user-storage-container\",\n  computed: {\n    dataProductUri() {\n      return this.$route.query.dataProductUri;\n    },\n  },\n  data() {\n    return {\n      storagePath: null,\n      userStoragePath: null,\n    };\n  },\n  methods: {\n    async setStoragePath() {\n      let _storagePath = null;\n      if (this.dataProductUri) {\n        /**\n         * TODO fix: storage path is set to home when it's a file referenced by dataProductUri because\n         * there's no way of retrieving the path and this is to be fixed once a workaround is found.\n         */\n        _storagePath = \"~/\";\n      } else {\n        _storagePath = /~.*$/.exec(this.$route.fullPath);\n        if (_storagePath && _storagePath.length > 0) {\n          _storagePath = _storagePath[0];\n        } else {\n          _storagePath = this.$route.path;\n        }\n      }\n\n      // Validate to have the ending slash.\n      if (!_storagePath.endsWith(\"/\")) {\n        _storagePath += \"/\";\n      }\n\n      this.storagePath = _storagePath;\n    },\n    loadUserStoragePath(path) {\n      const _catch = (err) => {\n        if (err.details.status === 404) {\n          this.handleMissingPath(path);\n        } else {\n          utils.FetchUtils.reportError(err);\n        }\n      };\n\n      if (this.dataProductUri) {\n        /**\n         * TODO fix: userStoragePath is set manually when it's a file referenced by dataProductUri because\n         * there's no way of retrieving the path and this is to be fixed once a workaround is found.\n         */\n        return utils.FetchUtils.get(\n          `/api/data-products?product-uri=${this.dataProductUri}`\n        )\n          .then((dataProduct) => {\n            this.userStoragePath = {\n              isDir: false,\n              directories: [],\n              files: [\n                {\n                  createdTime: dataProduct.creationTime,\n                  dataProductURI: this.dataProductUri,\n                  downloadURL: dataProduct.downloadURL,\n                  mimeType: dataProduct.productMetadata[\"mime-type\"],\n                  name: dataProduct.productName,\n                  size: dataProduct.productSize,\n                },\n              ],\n              parts: [],\n            };\n          })\n          .catch(_catch);\n      } else {\n        return services.UserStoragePathService.get(\n          { path },\n          { ignoreErrors: true }\n        )\n          .then((result) => {\n            this.userStoragePath = result;\n          })\n          .catch(_catch);\n      }\n    },\n    handleMissingPath(path) {\n      this.$router.replace(\"/~/\");\n      // Display a transient error about the path not existing\n      notifications.NotificationList.add(\n        new notifications.Notification({\n          type: \"WARNING\",\n          message: \"Path does not exist: \" + path,\n          duration: 2,\n        })\n      );\n    },\n    fileChanged() {\n      if (this.file && !this.fileTooLarge) {\n        let data = new FormData();\n        data.append(\"file\", this.file);\n        utils.FetchUtils.post(\n          \"/api/user-storage/\" + this.storagePath,\n          data\n        ).then(() => {\n          // this.file = null;\n          this.$refs[\"file-input\"].reset();\n          this.loadUserStoragePath(this.storagePath);\n        });\n      }\n    },\n    fileContentChanged() {\n      this.loadUserStoragePath(this.storagePath);\n    },\n    uploadFinished() {\n      this.loadUserStoragePath(this.storagePath);\n    },\n    addDirectory(dirName) {\n      if (dirName) {\n        let newDirPath = this.storagePath;\n        if (!newDirPath.endsWith(\"/\")) {\n          newDirPath = newDirPath + \"/\";\n        }\n        newDirPath = newDirPath + dirName;\n        utils.FetchUtils.post(\"/api/user-storage/\" + newDirPath).then(() => {\n          this.loadUserStoragePath(this.storagePath);\n        });\n      }\n    },\n    deleteDir(path) {\n      utils.FetchUtils.delete(\"/api/user-storage/~/\" + path).then(() => {\n        this.loadUserStoragePath(this.storagePath);\n      });\n    },\n    deleteFile(dataProductURI) {\n      utils.FetchUtils.delete(\n        \"/api/delete-file?data-product-uri=\" +\n          encodeURIComponent(dataProductURI)\n      ).then(() => {\n        this.loadUserStoragePath(this.storagePath);\n      });\n    },\n    directorySelected(path) {\n      this.$router.push(\"/~/\" + path);\n    },\n  },\n  async created() {\n    if (this.$route.path === \"/\") {\n      await this.$router.replace(\"/~/\");\n    } else {\n      await this.setStoragePath();\n      await this.loadUserStoragePath(this.storagePath);\n    }\n  },\n  watch: {\n    async $route() {\n      await this.setStoragePath();\n      await this.loadUserStoragePath(this.storagePath);\n    },\n  },\n};\n",{"version":3,"sources":["UserStorageContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkfile":"UserStorageContainer.vue","sourceRoot":"static/django_airavata_workspace/js/containers","sourcesContent":["<template>\n  <div>\n    <router-view\n      v-if=\"userStoragePath\"\n      :user-storage-path=\"userStoragePath\"\n      :storage-path=\"storagePath\"\n      @upload-finished=\"uploadFinished\"\n      @add-directory=\"addDirectory\"\n      @delete-dir=\"deleteDir\"\n      @delete-file=\"deleteFile\"\n      @directory-selected=\"directorySelected\"\n      @file-content-changed=\"fileContentChanged\"\n      :allow-preview=\"false\"\n    ></router-view>\n  </div>\n</template>\n\n<script>\nimport { services, utils } from \"django-airavata-api\";\nimport { notifications } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"user-storage-container\",\n  computed: {\n    dataProductUri() {\n      return this.$route.query.dataProductUri;\n    },\n  },\n  data() {\n    return {\n      storagePath: null,\n      userStoragePath: null,\n    };\n  },\n  methods: {\n    async setStoragePath() {\n      let _storagePath = null;\n      if (this.dataProductUri) {\n        /**\n         * TODO fix: storage path is set to home when it's a file referenced by dataProductUri because\n         * there's no way of retrieving the path and this is to be fixed once a workaround is found.\n         */\n        _storagePath = \"~/\";\n      } else {\n        _storagePath = /~.*$/.exec(this.$route.fullPath);\n        if (_storagePath && _storagePath.length > 0) {\n          _storagePath = _storagePath[0];\n        } else {\n          _storagePath = this.$route.path;\n        }\n      }\n\n      // Validate to have the ending slash.\n      if (!_storagePath.endsWith(\"/\")) {\n        _storagePath += \"/\";\n      }\n\n      this.storagePath = _storagePath;\n    },\n    loadUserStoragePath(path) {\n      const _catch = (err) => {\n        if (err.details.status === 404) {\n          this.handleMissingPath(path);\n        } else {\n          utils.FetchUtils.reportError(err);\n        }\n      };\n\n      if (this.dataProductUri) {\n        /**\n         * TODO fix: userStoragePath is set manually when it's a file referenced by dataProductUri because\n         * there's no way of retrieving the path and this is to be fixed once a workaround is found.\n         */\n        return utils.FetchUtils.get(\n          `/api/data-products?product-uri=${this.dataProductUri}`\n        )\n          .then((dataProduct) => {\n            this.userStoragePath = {\n              isDir: false,\n              directories: [],\n              files: [\n                {\n                  createdTime: dataProduct.creationTime,\n                  dataProductURI: this.dataProductUri,\n                  downloadURL: dataProduct.downloadURL,\n                  mimeType: dataProduct.productMetadata[\"mime-type\"],\n                  name: dataProduct.productName,\n                  size: dataProduct.productSize,\n                },\n              ],\n              parts: [],\n            };\n          })\n          .catch(_catch);\n      } else {\n        return services.UserStoragePathService.get(\n          { path },\n          { ignoreErrors: true }\n        )\n          .then((result) => {\n            this.userStoragePath = result;\n          })\n          .catch(_catch);\n      }\n    },\n    handleMissingPath(path) {\n      this.$router.replace(\"/~/\");\n      // Display a transient error about the path not existing\n      notifications.NotificationList.add(\n        new notifications.Notification({\n          type: \"WARNING\",\n          message: \"Path does not exist: \" + path,\n          duration: 2,\n        })\n      );\n    },\n    fileChanged() {\n      if (this.file && !this.fileTooLarge) {\n        let data = new FormData();\n        data.append(\"file\", this.file);\n        utils.FetchUtils.post(\n          \"/api/user-storage/\" + this.storagePath,\n          data\n        ).then(() => {\n          // this.file = null;\n          this.$refs[\"file-input\"].reset();\n          this.loadUserStoragePath(this.storagePath);\n        });\n      }\n    },\n    fileContentChanged() {\n      this.loadUserStoragePath(this.storagePath);\n    },\n    uploadFinished() {\n      this.loadUserStoragePath(this.storagePath);\n    },\n    addDirectory(dirName) {\n      if (dirName) {\n        let newDirPath = this.storagePath;\n        if (!newDirPath.endsWith(\"/\")) {\n          newDirPath = newDirPath + \"/\";\n        }\n        newDirPath = newDirPath + dirName;\n        utils.FetchUtils.post(\"/api/user-storage/\" + newDirPath).then(() => {\n          this.loadUserStoragePath(this.storagePath);\n        });\n      }\n    },\n    deleteDir(path) {\n      utils.FetchUtils.delete(\"/api/user-storage/~/\" + path).then(() => {\n        this.loadUserStoragePath(this.storagePath);\n      });\n    },\n    deleteFile(dataProductURI) {\n      utils.FetchUtils.delete(\n        \"/api/delete-file?data-product-uri=\" +\n          encodeURIComponent(dataProductURI)\n      ).then(() => {\n        this.loadUserStoragePath(this.storagePath);\n      });\n    },\n    directorySelected(path) {\n      this.$router.push(\"/~/\" + path);\n    },\n  },\n  async created() {\n    if (this.$route.path === \"/\") {\n      await this.$router.replace(\"/~/\");\n    } else {\n      await this.setStoragePath();\n      await this.loadUserStoragePath(this.storagePath);\n    }\n  },\n  watch: {\n    async $route() {\n      await this.setStoragePath();\n      await this.loadUserStoragePath(this.storagePath);\n    },\n  },\n};\n</script>\n"]}]}