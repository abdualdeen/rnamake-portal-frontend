{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/input-editors/FileInputEditor.vue?vue&type=style&index=0&id=27b3ce68&scoped=true&lang=css&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/input-editors/FileInputEditor.vue","mtime":1638641844339},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/css-loader/index.js","mtime":1638646228588},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1638646228900},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/postcss-loader/src/index.js","mtime":1638646228869},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/postcss-loader/src/index.js","mtime":1638646228869},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.input-file-option {\n  flex: 1 1 50%;\n}\n",{"version":3,"sources":["FileInputEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0JA;AACA;AACA","file":"FileInputEditor.vue","sourceRoot":"static/django_airavata_workspace/js/components/experiment/input-editors","sourcesContent":["<template>\n  <div class=\"file-input-editor\">\n    <div class=\"d-flex\" v-if=\"isDataProductURI && dataProduct\">\n      <user-storage-link\n        class=\"mr-auto\"\n        :data-product-uri=\"dataProduct.productUri\"\n        :mime-type=\"dataProduct.mimeType\"\n        :file-name=\"dataProduct.productName\"\n      />\n      <delete-link\n        v-if=\"!readOnly && dataProduct.isInputFileUpload\"\n        class=\"ml-2\"\n        @delete=\"deleteDataProduct\"\n      >\n        Are you sure you want to delete input file\n        <strong>{{ dataProduct.productName }}</strong\n        >?\n      </delete-link>\n      <b-link\n        v-else-if=\"!readOnly\"\n        @click=\"unselect\"\n        class=\"ml-2 text-secondary\"\n      >\n        Unselect\n        <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n      </b-link>\n    </div>\n    <input-file-selector\n      v-if=\"!readOnly && (!isDataProductURI || uploading)\"\n      :selectedDataProductURIs=\"selectedDataProductURIs\"\n      @uploadstart=\"uploadStart\"\n      @uploadend=\"uploadEnd\"\n      @selected=\"fileSelected\"\n    />\n  </div>\n</template>\n\n<script>\nimport {models, services, utils} from \"django-airavata-api\";\nimport {InputEditorMixin} from \"django-airavata-workspace-plugin-api\";\nimport {components} from \"django-airavata-common-ui\";\nimport InputFileSelector from \"./InputFileSelector\";\nimport UserStorageLink from \"../../storage/storage-edit/UserStorageLink\";\n\nexport default {\n  name: \"file-input-editor\",\n  mixins: [InputEditorMixin],\n  components: {\n    UserStorageLink,\n    \"delete-link\": components.DeleteLink,\n    InputFileSelector\n  },\n  computed: {\n    isDataProductURI() {\n      // Just assume that if the value is a string then it's a data product URL\n      return (\n        this.value &&\n        typeof this.value === \"string\" &&\n        this.value.startsWith(\"airavata-dp://\")\n      );\n    },\n    // When used in the MultiFileInputEditor, don't allow selecting the same\n    // file more than once. This computed property creates an array of already\n    // selected files.\n    selectedDataProductURIs() {\n      if (\n        this.experimentInput.type === models.DataType.URI_COLLECTION &&\n        this.experimentInput.value\n      ) {\n        return this.experimentInput.value.split(\",\");\n      } else {\n        return [];\n      }\n    },\n    isViewable() {\n      return this.dataProduct.isText;\n    },\n  },\n  data() {\n    return {\n      dataProduct: null,\n      fileContent: null,\n      uploading: false,\n    };\n  },\n  created() {\n    if (this.isDataProductURI) {\n      this.loadDataProduct(this.value);\n    }\n  },\n  methods: {\n    loadDataProduct(dataProductURI) {\n      services.DataProductService.retrieve({lookup: dataProductURI})\n        .then((dataProduct) => (this.dataProduct = dataProduct))\n        .catch(() => {\n          // If we're unable to load data product, reset data to null\n          this.data = null;\n          this.valueChanged();\n        });\n    },\n    deleteDataProduct() {\n      utils.FetchUtils.delete(\n        \"/api/delete-file?data-product-uri=\" + encodeURIComponent(this.value),\n        {ignoreErrors: true}\n      )\n        .then(() => {\n          this.data = null;\n          this.valueChanged();\n        })\n        .catch((err) => {\n          // Ignore 404 Not Found errors, file no longer exists so assume was\n          // already deleted\n          if (err.details.status === 404) {\n            this.data = null;\n            this.valueChanged();\n          } else {\n            throw err;\n          }\n        })\n        .catch(utils.FetchUtils.reportError);\n    },\n    unselect() {\n      this.data = null;\n      this.valueChanged();\n    },\n    fileSelected(dataProductURI, dataProduct) {\n      this.data = dataProductURI;\n      if (!dataProduct) {\n        this.loadDataProduct(dataProductURI);\n      } else {\n        this.dataProduct = dataProduct;\n      }\n      this.valueChanged();\n    },\n    uploadStart() {\n      this.uploading = true;\n      this.$emit(\"uploadstart\");\n    },\n    uploadEnd() {\n      this.uploading = false;\n      this.$emit(\"uploadend\");\n    },\n  },\n  watch: {\n    value(value, oldValue) {\n      if (this.isDataProductURI && value !== oldValue) {\n        this.loadDataProduct(value);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.input-file-option {\n  flex: 1 1 50%;\n}\n</style>\n"]}]}