{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/storage/ExperimentStoragePathViewer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/storage/ExperimentStoragePathViewer.vue","mtime":1639684988540},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport StoragePathBreadcrumb from \"./StoragePathBreadcrumb.vue\";\nimport { components } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"experiment-storage-path-viewer\",\n  props: {\n    experimentStoragePath: {\n      required: true,\n    },\n    downloadInNewWindow: {\n      type: Boolean,\n      default: false,\n    },\n    experimentId: {\n      required: true,\n    },\n  },\n  components: {\n    \"human-date\": components.HumanDate,\n    StoragePathBreadcrumb,\n  },\n  computed: {\n    fields() {\n      return [\n        {\n          label: \"Name\",\n          key: \"name\",\n          sortable: true,\n        },\n        {\n          label: \"Size\",\n          key: \"size\",\n          sortable: true,\n          formatter: (value) => this.getFormattedSize(value),\n        },\n        {\n          label: \"Created Time\",\n          key: \"createdTimestamp\",\n          sortable: true,\n        },\n        {\n          label: \"Actions\",\n          key: \"actions\",\n        },\n      ];\n    },\n    items() {\n      if (this.experimentStoragePath) {\n        const dirs = this.experimentStoragePath.directories\n          .filter((d) => !d.hidden)\n          .map((d) => {\n            return {\n              name: d.name,\n              path: d.path,\n              type: \"dir\",\n              createdTime: d.createdTime,\n              createdTimestamp: d.createdTime.getTime(), // for sorting\n              size: d.size,\n            };\n          });\n        const files = this.experimentStoragePath.files.map((f) => {\n          return {\n            name: f.name,\n            mimeType: f.mimeType,\n            type: \"file\",\n            dataProductURI: f.dataProductURI,\n            downloadURL: f.downloadURL,\n            createdTime: f.createdTime,\n            createdTimestamp: f.createdTime.getTime(), // for sorting\n            size: f.size,\n          };\n        });\n        return dirs.concat(files);\n      } else {\n        return [];\n      }\n    },\n    downloadTarget() {\n      return this.downloadInNewWindow ? \"_blank\" : \"_self\";\n    },\n  },\n  methods: {\n    getFormattedSize(size) {\n      if (size > Math.pow(2, 30)) {\n        return Math.round(size / Math.pow(2, 30)) + \" GB\";\n      } else if (size > Math.pow(2, 20)) {\n        return Math.round(size / Math.pow(2, 20)) + \" MB\";\n      } else if (size > Math.pow(2, 10)) {\n        return Math.round(size / Math.pow(2, 10)) + \" KB\";\n      } else {\n        return size + \" bytes\";\n      }\n    },\n    directorySelected(item) {\n      this.$emit(\"directory-selected\", item.path);\n    },\n  },\n};\n",{"version":3,"sources":["ExperimentStoragePathViewer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ExperimentStoragePathViewer.vue","sourceRoot":"static/django_airavata_workspace/js/components/storage","sourcesContent":["<template>\n  <div>\n    <storage-path-breadcrumb\n      v-if=\"experimentStoragePath\"\n      :parts=\"experimentStoragePath.parts\"\n      rootName=\"Exp Data Dir\"\n      @directory-selected=\"$emit('directory-selected', $event)\"\n    />\n\n    <b-table\n      v-if=\"experimentStoragePath\"\n      :fields=\"fields\"\n      :items=\"items\"\n      sort-by=\"name\"\n    >\n      <template slot=\"cell(name)\" slot-scope=\"data\">\n        <b-link\n          v-if=\"data.item.type === 'dir'\"\n          @click=\"directorySelected(data.item)\"\n        >\n          <i class=\"fa fa-folder-open\"></i> {{ data.item.name }}</b-link\n        >\n        <b-link v-else :href=\"data.item.downloadURL\" :target=\"downloadTarget\">\n          {{ data.item.name }}</b-link\n        >\n      </template>\n      <template slot=\"cell(createdTimestamp)\" slot-scope=\"data\">\n        <human-date :date=\"data.item.createdTime\" />\n      </template>\n      <template slot=\"cell(actions)\" slot-scope=\"data\">\n        <b-link\n          v-if=\"data.item.type === 'file'\"\n          class=\"action-link\"\n          :href=\"`${data.item.downloadURL}&download`\"\n        >\n          Download File\n          <i class=\"fa fa-download\" aria-hidden=\"true\"></i>\n        </b-link>\n        <b-link\n          v-if=\"data.item.type === 'dir'\"\n          class=\"action-link\"\n          :href=\"`/sdk/download-experiment-dir/${encodeURIComponent(\n            experimentId\n          )}/?path=${data.item.path}`\"\n        >\n          Download Zip\n          <i class=\"fa fa-file-archive\" aria-hidden=\"true\"></i>\n        </b-link>\n      </template>\n    </b-table>\n  </div>\n</template>\n<script>\nimport StoragePathBreadcrumb from \"./StoragePathBreadcrumb.vue\";\nimport { components } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"experiment-storage-path-viewer\",\n  props: {\n    experimentStoragePath: {\n      required: true,\n    },\n    downloadInNewWindow: {\n      type: Boolean,\n      default: false,\n    },\n    experimentId: {\n      required: true,\n    },\n  },\n  components: {\n    \"human-date\": components.HumanDate,\n    StoragePathBreadcrumb,\n  },\n  computed: {\n    fields() {\n      return [\n        {\n          label: \"Name\",\n          key: \"name\",\n          sortable: true,\n        },\n        {\n          label: \"Size\",\n          key: \"size\",\n          sortable: true,\n          formatter: (value) => this.getFormattedSize(value),\n        },\n        {\n          label: \"Created Time\",\n          key: \"createdTimestamp\",\n          sortable: true,\n        },\n        {\n          label: \"Actions\",\n          key: \"actions\",\n        },\n      ];\n    },\n    items() {\n      if (this.experimentStoragePath) {\n        const dirs = this.experimentStoragePath.directories\n          .filter((d) => !d.hidden)\n          .map((d) => {\n            return {\n              name: d.name,\n              path: d.path,\n              type: \"dir\",\n              createdTime: d.createdTime,\n              createdTimestamp: d.createdTime.getTime(), // for sorting\n              size: d.size,\n            };\n          });\n        const files = this.experimentStoragePath.files.map((f) => {\n          return {\n            name: f.name,\n            mimeType: f.mimeType,\n            type: \"file\",\n            dataProductURI: f.dataProductURI,\n            downloadURL: f.downloadURL,\n            createdTime: f.createdTime,\n            createdTimestamp: f.createdTime.getTime(), // for sorting\n            size: f.size,\n          };\n        });\n        return dirs.concat(files);\n      } else {\n        return [];\n      }\n    },\n    downloadTarget() {\n      return this.downloadInNewWindow ? \"_blank\" : \"_self\";\n    },\n  },\n  methods: {\n    getFormattedSize(size) {\n      if (size > Math.pow(2, 30)) {\n        return Math.round(size / Math.pow(2, 30)) + \" GB\";\n      } else if (size > Math.pow(2, 20)) {\n        return Math.round(size / Math.pow(2, 20)) + \" MB\";\n      } else if (size > Math.pow(2, 10)) {\n        return Math.round(size / Math.pow(2, 10)) + \" KB\";\n      } else {\n        return size + \" bytes\";\n      }\n    },\n    directorySelected(item) {\n      this.$emit(\"directory-selected\", item.path);\n    },\n  },\n};\n</script>\n"]}]}