{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/web-components/ProjectSelector.vue?vue&type=script&lang=js&shadow","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/web-components/ProjectSelector.vue","mtime":1638641844346},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Vue from \"vue\";\nimport store from \"./store\";\nimport { mapGetters } from \"vuex\";\nimport { BootstrapVue } from \"bootstrap-vue\";\nVue.use(BootstrapVue);\n\nexport default {\n  props: {\n    value: {\n      type: String,\n      default: null,\n    },\n  },\n  store: store,\n  data() {\n    return {\n      projectId: this.value,\n    };\n  },\n  async mounted() {\n    await this.$store.dispatch(\"loadProjects\");\n  },\n  computed: {\n    ...mapGetters([\"projects\"]),\n    sharedProjectOptions: function () {\n      return this.projects\n        ? this.projects\n            .filter((p) => !p.isOwner)\n            .map((project) => ({\n              value: project.projectID,\n              text:\n                project.name +\n                (!project.isOwner ? \" (owned by \" + project.owner + \")\" : \"\"),\n            }))\n        : [];\n    },\n    myProjectOptions() {\n      return this.projects\n        ? this.projects\n            .filter((p) => p.isOwner)\n            .map((project) => ({\n              value: project.projectID,\n              text: project.name,\n            }))\n        : [];\n    },\n  },\n  watch: {\n    projectId() {\n      const inputEvent = new CustomEvent(\"input\", {\n        detail: [this.projectId],\n        composed: true,\n        bubbles: true,\n      });\n      this.$el.dispatchEvent(inputEvent);\n    },\n  },\n};\n",{"version":3,"sources":["ProjectSelector.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ProjectSelector.vue","sourceRoot":"static/django_airavata_workspace/js/web-components","sourcesContent":["<template>\n  <b-form-group label=\"Project\">\n    <b-form-select v-model=\"projectId\" required>\n      <template slot=\"first\">\n        <option :value=\"null\" disabled>Select a Project</option>\n      </template>\n      <optgroup label=\"My Projects\">\n        <option\n          v-for=\"project in myProjectOptions\"\n          :value=\"project.value\"\n          :key=\"project.value\"\n        >\n          {{ project.text }}\n        </option>\n      </optgroup>\n      <optgroup label=\"Projects Shared With Me\">\n        <option\n          v-for=\"project in sharedProjectOptions\"\n          :value=\"project.value\"\n          :key=\"project.value\"\n        >\n          {{ project.text }}\n        </option>\n      </optgroup>\n    </b-form-select>\n  </b-form-group>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport store from \"./store\";\nimport { mapGetters } from \"vuex\";\nimport { BootstrapVue } from \"bootstrap-vue\";\nVue.use(BootstrapVue);\n\nexport default {\n  props: {\n    value: {\n      type: String,\n      default: null,\n    },\n  },\n  store: store,\n  data() {\n    return {\n      projectId: this.value,\n    };\n  },\n  async mounted() {\n    await this.$store.dispatch(\"loadProjects\");\n  },\n  computed: {\n    ...mapGetters([\"projects\"]),\n    sharedProjectOptions: function () {\n      return this.projects\n        ? this.projects\n            .filter((p) => !p.isOwner)\n            .map((project) => ({\n              value: project.projectID,\n              text:\n                project.name +\n                (!project.isOwner ? \" (owned by \" + project.owner + \")\" : \"\"),\n            }))\n        : [];\n    },\n    myProjectOptions() {\n      return this.projects\n        ? this.projects\n            .filter((p) => p.isOwner)\n            .map((project) => ({\n              value: project.projectID,\n              text: project.name,\n            }))\n        : [];\n    },\n  },\n  watch: {\n    projectId() {\n      const inputEvent = new CustomEvent(\"input\", {\n        detail: [this.projectId],\n        composed: true,\n        bubbles: true,\n      });\n      this.$el.dispatchEvent(inputEvent);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n@import \"./styles\";\n:host {\n  display: block;\n}\n</style>\n"]}]}