{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/ComputationalResourceSchedulingEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/ComputationalResourceSchedulingEditor.vue","mtime":1638641844339},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport QueueSettingsEditor from \"./QueueSettingsEditor.vue\";\nimport {\n  errors,\n  models,\n  services,\n  utils as apiUtils,\n} from \"django-airavata-api\";\nimport { mixins, utils } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"computational-resource-scheduling-editor\",\n  mixins: [mixins.VModelMixin],\n  props: {\n    value: {\n      type: models.ComputationalResourceSchedulingModel,\n    },\n    appModuleId: {\n      type: String,\n      required: true,\n    },\n    groupResourceProfileId: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      computeResources: {},\n      applicationDeployments: [],\n      selectedGroupResourceProfileData: null,\n      resourceHostId: this.value.resourceHostId,\n      invalidQueueSettings: false,\n      workspacePreferences: null,\n    };\n  },\n  components: {\n    QueueSettingsEditor,\n  },\n  mounted: function () {\n    this.loadWorkspacePreferences().then(() => {\n      this.loadApplicationDeployments(\n        this.appModuleId,\n        this.groupResourceProfileId\n      );\n    });\n    this.loadComputeResourceNames();\n    this.loadGroupResourceProfile();\n    this.validate();\n    this.$on(\"input\", () => this.validate());\n  },\n  computed: {\n    localComputationalResourceScheduling() {\n      return this.data;\n    },\n    computeResourceOptions: function () {\n      const computeResourceOptions = this.applicationDeployments.map((dep) => {\n        return {\n          value: dep.computeHostId,\n          text:\n            dep.computeHostId in this.computeResources\n              ? this.computeResources[dep.computeHostId]\n              : \"\",\n        };\n      });\n      computeResourceOptions.sort((a, b) => a.text.localeCompare(b.text));\n      return computeResourceOptions;\n    },\n    selectedComputeResourcePolicy: function () {\n      if (this.selectedGroupResourceProfileData === null) {\n        return null;\n      }\n      return this.selectedGroupResourceProfileData.computeResourcePolicies.find(\n        (crp) => {\n          return (\n            crp.computeResourceId ===\n            this.localComputationalResourceScheduling.resourceHostId\n          );\n        }\n      );\n    },\n    batchQueueResourcePolicies: function () {\n      if (this.selectedGroupResourceProfileData === null) {\n        return null;\n      }\n      return this.selectedGroupResourceProfileData.batchQueueResourcePolicies.filter(\n        (bqrp) => {\n          return (\n            bqrp.computeResourceId ===\n            this.localComputationalResourceScheduling.resourceHostId\n          );\n        }\n      );\n    },\n    appDeploymentId: function () {\n      // We'll only be able to figure out the appDeploymentId when a\n      // resourceHostId is selected and the application deployments are\n      // loaded\n      if (!this.resourceHostId || this.applicationDeployments.length === 0) {\n        return null;\n      }\n      // Find application deployment that corresponds to this compute resource\n      let selectedApplicationDeployment = this.applicationDeployments.find(\n        (dep) => dep.computeHostId === this.resourceHostId\n      );\n      if (!selectedApplicationDeployment) {\n        throw new Error(\"Failed to find application deployment!\");\n      }\n      return selectedApplicationDeployment.appDeploymentId;\n    },\n    validation() {\n      const queueInfo = {}; // QueueSettingsEditor will validate queue information\n      return this.localComputationalResourceScheduling.validate(queueInfo);\n    },\n    valid() {\n      return (\n        !this.invalidQueueSettings && Object.keys(this.validation).length === 0\n      );\n    },\n  },\n  methods: {\n    computeResourceChanged: function (selectedComputeResourceId) {\n      this.data.resourceHostId = selectedComputeResourceId;\n    },\n    loadApplicationDeployments: function (appModuleId, groupResourceProfileId) {\n      services.ApplicationDeploymentService.list(\n        {\n          appModuleId: appModuleId,\n          groupResourceProfileId: groupResourceProfileId,\n        },\n        { ignoreErrors: true }\n      )\n        .then((applicationDeployments) => {\n          this.applicationDeployments = applicationDeployments;\n        })\n        .catch((error) => {\n          // Ignore unauthorized errors, force user to pick another GroupResourceProfile\n          if (!errors.ErrorUtils.isUnauthorizedError(error)) {\n            return Promise.reject(error);\n          }\n        })\n        // Report all other error types\n        .catch(apiUtils.FetchUtils.reportError);\n    },\n    loadGroupResourceProfile: function () {\n      services.GroupResourceProfileService.retrieve(\n        { lookup: this.groupResourceProfileId },\n        { ignoreErrors: true }\n      )\n        .then((groupResourceProfile) => {\n          this.selectedGroupResourceProfileData = groupResourceProfile;\n        })\n        .catch((error) => {\n          // Ignore unauthorized errors, force user to pick a different GroupResourceProfile\n          if (!errors.ErrorUtils.isUnauthorizedError(error)) {\n            return Promise.reject(error);\n          }\n        })\n        // Report all other error types\n        .catch(apiUtils.FetchUtils.reportError);\n    },\n    loadComputeResourceNames: function () {\n      services.ComputeResourceService.names().then(\n        (computeResourceNames) => (this.computeResources = computeResourceNames)\n      );\n    },\n    loadWorkspacePreferences() {\n      return services.WorkspacePreferencesService.get().then(\n        (workspacePreferences) =>\n          (this.workspacePreferences = workspacePreferences)\n      );\n    },\n    queueSettingsChanged: function () {\n      // QueueSettingsEditor updates the full\n      // ComputationalResourceSchedulingModel instance but doesn't know\n      // the resourceHostId so we need to copy it back into the instance\n      // whenever it changes\n      this.localComputationalResourceScheduling.resourceHostId = this.resourceHostId;\n      this.$emit(\"input\", this.data);\n    },\n    queueSettingsValidityChanged(valid) {\n      this.invalidQueueSettings = !valid;\n      this.validate();\n    },\n    validate() {\n      if (!this.valid) {\n        this.$emit(\"invalid\");\n      } else {\n        this.$emit(\"valid\");\n      }\n    },\n    emitValueChanged: function () {\n      this.validate();\n      this.$emit(\"input\", this.localComputationalResourceScheduling);\n    },\n    getValidationFeedback: function (properties) {\n      return utils.getProperty(this.validation, properties);\n    },\n    getValidationState: function (properties) {\n      return this.getValidationFeedback(properties) ? \"invalid\" : null;\n    },\n  },\n  watch: {\n    computeResourceOptions: function (newOptions) {\n      // If the selected resourceHostId is not in the new list of\n      // computeResourceOptions, reset it to null\n      if (\n        this.resourceHostId !== null &&\n        !newOptions.find((opt) => opt.value === this.resourceHostId)\n      ) {\n        this.resourceHostId = null;\n      }\n      // Apply preferred (most recently used) compute resource\n      if (\n        this.resourceHostId === null &&\n        this.workspacePreferences.most_recent_compute_resource_id &&\n        newOptions.find(\n          (opt) =>\n            opt.value ===\n            this.workspacePreferences.most_recent_compute_resource_id\n        )\n      ) {\n        this.resourceHostId = this.workspacePreferences.most_recent_compute_resource_id;\n      }\n      // If none selected, just pick the first one\n      if (this.resourceHostId === null && newOptions.length > 0) {\n        this.resourceHostId = newOptions[0].value;\n      }\n      this.computeResourceChanged(this.resourceHostId);\n    },\n    groupResourceProfileId: function (newGroupResourceProfileId) {\n      this.loadApplicationDeployments(\n        this.appModuleId,\n        newGroupResourceProfileId\n      );\n      if (\n        this.selectedGroupResourceProfileData &&\n        this.selectedGroupResourceProfileData.groupResourceProfileId !==\n          newGroupResourceProfileId\n      ) {\n        this.loadGroupResourceProfile();\n      }\n    },\n  },\n};\n",{"version":3,"sources":["ComputationalResourceSchedulingEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ComputationalResourceSchedulingEditor.vue","sourceRoot":"static/django_airavata_workspace/js/components/experiment","sourcesContent":["<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <b-form-group\n          label=\"Compute Resource\"\n          label-for=\"compute-resource\"\n          :feedback=\"getValidationFeedback('resourceHostId')\"\n          :state=\"getValidationState('resourceHostId')\"\n        >\n          <b-form-select\n            id=\"compute-resource\"\n            v-model=\"resourceHostId\"\n            :options=\"computeResourceOptions\"\n            required\n            @change=\"computeResourceChanged\"\n            :state=\"getValidationState('resourceHostId')\"\n            :disabled=\"\n              !computeResourceOptions || computeResourceOptions.length === 0\n            \"\n          >\n            <template slot=\"first\">\n              <option :value=\"null\" disabled>Select a Compute Resource</option>\n            </template>\n          </b-form-select>\n        </b-form-group>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <queue-settings-editor\n          v-model=\"data\"\n          v-if=\"appDeploymentId\"\n          :app-deployment-id=\"appDeploymentId\"\n          :compute-resource-policy=\"selectedComputeResourcePolicy\"\n          :batch-queue-resource-policies=\"batchQueueResourcePolicies\"\n          @input=\"queueSettingsChanged\"\n          @valid=\"queueSettingsValidityChanged(true)\"\n          @invalid=\"queueSettingsValidityChanged(false)\"\n        >\n        </queue-settings-editor>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport QueueSettingsEditor from \"./QueueSettingsEditor.vue\";\nimport {\n  errors,\n  models,\n  services,\n  utils as apiUtils,\n} from \"django-airavata-api\";\nimport { mixins, utils } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"computational-resource-scheduling-editor\",\n  mixins: [mixins.VModelMixin],\n  props: {\n    value: {\n      type: models.ComputationalResourceSchedulingModel,\n    },\n    appModuleId: {\n      type: String,\n      required: true,\n    },\n    groupResourceProfileId: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      computeResources: {},\n      applicationDeployments: [],\n      selectedGroupResourceProfileData: null,\n      resourceHostId: this.value.resourceHostId,\n      invalidQueueSettings: false,\n      workspacePreferences: null,\n    };\n  },\n  components: {\n    QueueSettingsEditor,\n  },\n  mounted: function () {\n    this.loadWorkspacePreferences().then(() => {\n      this.loadApplicationDeployments(\n        this.appModuleId,\n        this.groupResourceProfileId\n      );\n    });\n    this.loadComputeResourceNames();\n    this.loadGroupResourceProfile();\n    this.validate();\n    this.$on(\"input\", () => this.validate());\n  },\n  computed: {\n    localComputationalResourceScheduling() {\n      return this.data;\n    },\n    computeResourceOptions: function () {\n      const computeResourceOptions = this.applicationDeployments.map((dep) => {\n        return {\n          value: dep.computeHostId,\n          text:\n            dep.computeHostId in this.computeResources\n              ? this.computeResources[dep.computeHostId]\n              : \"\",\n        };\n      });\n      computeResourceOptions.sort((a, b) => a.text.localeCompare(b.text));\n      return computeResourceOptions;\n    },\n    selectedComputeResourcePolicy: function () {\n      if (this.selectedGroupResourceProfileData === null) {\n        return null;\n      }\n      return this.selectedGroupResourceProfileData.computeResourcePolicies.find(\n        (crp) => {\n          return (\n            crp.computeResourceId ===\n            this.localComputationalResourceScheduling.resourceHostId\n          );\n        }\n      );\n    },\n    batchQueueResourcePolicies: function () {\n      if (this.selectedGroupResourceProfileData === null) {\n        return null;\n      }\n      return this.selectedGroupResourceProfileData.batchQueueResourcePolicies.filter(\n        (bqrp) => {\n          return (\n            bqrp.computeResourceId ===\n            this.localComputationalResourceScheduling.resourceHostId\n          );\n        }\n      );\n    },\n    appDeploymentId: function () {\n      // We'll only be able to figure out the appDeploymentId when a\n      // resourceHostId is selected and the application deployments are\n      // loaded\n      if (!this.resourceHostId || this.applicationDeployments.length === 0) {\n        return null;\n      }\n      // Find application deployment that corresponds to this compute resource\n      let selectedApplicationDeployment = this.applicationDeployments.find(\n        (dep) => dep.computeHostId === this.resourceHostId\n      );\n      if (!selectedApplicationDeployment) {\n        throw new Error(\"Failed to find application deployment!\");\n      }\n      return selectedApplicationDeployment.appDeploymentId;\n    },\n    validation() {\n      const queueInfo = {}; // QueueSettingsEditor will validate queue information\n      return this.localComputationalResourceScheduling.validate(queueInfo);\n    },\n    valid() {\n      return (\n        !this.invalidQueueSettings && Object.keys(this.validation).length === 0\n      );\n    },\n  },\n  methods: {\n    computeResourceChanged: function (selectedComputeResourceId) {\n      this.data.resourceHostId = selectedComputeResourceId;\n    },\n    loadApplicationDeployments: function (appModuleId, groupResourceProfileId) {\n      services.ApplicationDeploymentService.list(\n        {\n          appModuleId: appModuleId,\n          groupResourceProfileId: groupResourceProfileId,\n        },\n        { ignoreErrors: true }\n      )\n        .then((applicationDeployments) => {\n          this.applicationDeployments = applicationDeployments;\n        })\n        .catch((error) => {\n          // Ignore unauthorized errors, force user to pick another GroupResourceProfile\n          if (!errors.ErrorUtils.isUnauthorizedError(error)) {\n            return Promise.reject(error);\n          }\n        })\n        // Report all other error types\n        .catch(apiUtils.FetchUtils.reportError);\n    },\n    loadGroupResourceProfile: function () {\n      services.GroupResourceProfileService.retrieve(\n        { lookup: this.groupResourceProfileId },\n        { ignoreErrors: true }\n      )\n        .then((groupResourceProfile) => {\n          this.selectedGroupResourceProfileData = groupResourceProfile;\n        })\n        .catch((error) => {\n          // Ignore unauthorized errors, force user to pick a different GroupResourceProfile\n          if (!errors.ErrorUtils.isUnauthorizedError(error)) {\n            return Promise.reject(error);\n          }\n        })\n        // Report all other error types\n        .catch(apiUtils.FetchUtils.reportError);\n    },\n    loadComputeResourceNames: function () {\n      services.ComputeResourceService.names().then(\n        (computeResourceNames) => (this.computeResources = computeResourceNames)\n      );\n    },\n    loadWorkspacePreferences() {\n      return services.WorkspacePreferencesService.get().then(\n        (workspacePreferences) =>\n          (this.workspacePreferences = workspacePreferences)\n      );\n    },\n    queueSettingsChanged: function () {\n      // QueueSettingsEditor updates the full\n      // ComputationalResourceSchedulingModel instance but doesn't know\n      // the resourceHostId so we need to copy it back into the instance\n      // whenever it changes\n      this.localComputationalResourceScheduling.resourceHostId = this.resourceHostId;\n      this.$emit(\"input\", this.data);\n    },\n    queueSettingsValidityChanged(valid) {\n      this.invalidQueueSettings = !valid;\n      this.validate();\n    },\n    validate() {\n      if (!this.valid) {\n        this.$emit(\"invalid\");\n      } else {\n        this.$emit(\"valid\");\n      }\n    },\n    emitValueChanged: function () {\n      this.validate();\n      this.$emit(\"input\", this.localComputationalResourceScheduling);\n    },\n    getValidationFeedback: function (properties) {\n      return utils.getProperty(this.validation, properties);\n    },\n    getValidationState: function (properties) {\n      return this.getValidationFeedback(properties) ? \"invalid\" : null;\n    },\n  },\n  watch: {\n    computeResourceOptions: function (newOptions) {\n      // If the selected resourceHostId is not in the new list of\n      // computeResourceOptions, reset it to null\n      if (\n        this.resourceHostId !== null &&\n        !newOptions.find((opt) => opt.value === this.resourceHostId)\n      ) {\n        this.resourceHostId = null;\n      }\n      // Apply preferred (most recently used) compute resource\n      if (\n        this.resourceHostId === null &&\n        this.workspacePreferences.most_recent_compute_resource_id &&\n        newOptions.find(\n          (opt) =>\n            opt.value ===\n            this.workspacePreferences.most_recent_compute_resource_id\n        )\n      ) {\n        this.resourceHostId = this.workspacePreferences.most_recent_compute_resource_id;\n      }\n      // If none selected, just pick the first one\n      if (this.resourceHostId === null && newOptions.length > 0) {\n        this.resourceHostId = newOptions[0].value;\n      }\n      this.computeResourceChanged(this.resourceHostId);\n    },\n    groupResourceProfileId: function (newGroupResourceProfileId) {\n      this.loadApplicationDeployments(\n        this.appModuleId,\n        newGroupResourceProfileId\n      );\n      if (\n        this.selectedGroupResourceProfileData &&\n        this.selectedGroupResourceProfileData.groupResourceProfileId !==\n          newGroupResourceProfileId\n      ) {\n        this.loadGroupResourceProfile();\n      }\n    },\n  },\n};\n</script>\n\n<style></style>\n"]}]}