{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/containers/EditExperimentContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/containers/EditExperimentContainer.vue","mtime":1638641844343},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { errors, services } from \"django-airavata-api\";\nimport { notifications } from \"django-airavata-common-ui\";\nimport ExperimentEditor from \"../components/experiment/ExperimentEditor.vue\";\nimport urls from \"../utils/urls\";\n\nexport default {\n  name: \"edit-experiment-container\",\n  props: {\n    experimentId: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      experiment: null,\n      appModule: null,\n    };\n  },\n  components: {\n    \"experiment-editor\": ExperimentEditor,\n  },\n  methods: {\n    handleSavedExperiment: function () {\n      // Redirect to experiments list view\n      urls.navigateToExperimentsList();\n    },\n    handleSavedAndLaunchedExperiment: function (experiment) {\n      // Redirect to experiment view\n      urls.navigateToViewExperiment(experiment, { launching: true });\n    },\n  },\n  computed: {},\n  mounted: function () {\n    services.ExperimentService.retrieve({ lookup: this.experimentId })\n      .then((experiment) => {\n        this.experiment = experiment;\n        const appInterfaceId = experiment.executionId;\n        return services.ApplicationInterfaceService.retrieve(\n          {\n            lookup: appInterfaceId,\n          },\n          {\n            ignoreErrors: true,\n          }\n        );\n      })\n      .then((appInterface) => {\n        const appModuleId = appInterface.applicationModules[0];\n        return services.ApplicationModuleService.retrieve({\n          lookup: appModuleId,\n        });\n      })\n      .then((appModule) => {\n        this.appModule = appModule;\n      })\n      .catch((error) => {\n        const message = errors.ErrorUtils.isNotFoundError(error)\n          ? `Application interface (${this.experiment.executionId}) was not found.\n           If it has been deleted then you won't be able to edit this experiment.`\n          : `Unable to load application interface (${this.experiment.executionId}) or module`;\n        notifications.NotificationList.add(\n          new notifications.Notification({\n            type: \"ERROR\",\n            message,\n          })\n        );\n      });\n  },\n};\n",{"version":3,"sources":["EditExperimentContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EditExperimentContainer.vue","sourceRoot":"static/django_airavata_workspace/js/containers","sourcesContent":["<template>\n  <experiment-editor\n    v-if=\"appModule\"\n    :experiment=\"experiment\"\n    :app-module=\"appModule\"\n    @saved=\"handleSavedExperiment\"\n    @savedAndLaunched=\"handleSavedAndLaunchedExperiment\"\n  >\n    <span slot=\"title\">Edit Experiment</span>\n  </experiment-editor>\n</template>\n\n<script>\nimport { errors, services } from \"django-airavata-api\";\nimport { notifications } from \"django-airavata-common-ui\";\nimport ExperimentEditor from \"../components/experiment/ExperimentEditor.vue\";\nimport urls from \"../utils/urls\";\n\nexport default {\n  name: \"edit-experiment-container\",\n  props: {\n    experimentId: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      experiment: null,\n      appModule: null,\n    };\n  },\n  components: {\n    \"experiment-editor\": ExperimentEditor,\n  },\n  methods: {\n    handleSavedExperiment: function () {\n      // Redirect to experiments list view\n      urls.navigateToExperimentsList();\n    },\n    handleSavedAndLaunchedExperiment: function (experiment) {\n      // Redirect to experiment view\n      urls.navigateToViewExperiment(experiment, { launching: true });\n    },\n  },\n  computed: {},\n  mounted: function () {\n    services.ExperimentService.retrieve({ lookup: this.experimentId })\n      .then((experiment) => {\n        this.experiment = experiment;\n        const appInterfaceId = experiment.executionId;\n        return services.ApplicationInterfaceService.retrieve(\n          {\n            lookup: appInterfaceId,\n          },\n          {\n            ignoreErrors: true,\n          }\n        );\n      })\n      .then((appInterface) => {\n        const appModuleId = appInterface.applicationModules[0];\n        return services.ApplicationModuleService.retrieve({\n          lookup: appModuleId,\n        });\n      })\n      .then((appModule) => {\n        this.appModule = appModule;\n      })\n      .catch((error) => {\n        const message = errors.ErrorUtils.isNotFoundError(error)\n          ? `Application interface (${this.experiment.executionId}) was not found.\n           If it has been deleted then you won't be able to edit this experiment.`\n          : `Unable to load application interface (${this.experiment.executionId}) or module`;\n        notifications.NotificationList.add(\n          new notifications.Notification({\n            type: \"ERROR\",\n            message,\n          })\n        );\n      });\n  },\n};\n</script>\n<style>\n/* style the containing div, in base.html template */\n.main-content-wrapper {\n  background-color: #ffffff;\n}\n</style>\n"]}]}