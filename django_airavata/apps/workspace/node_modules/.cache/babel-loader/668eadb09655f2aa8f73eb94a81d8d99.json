{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/ComputationalResourceSchedulingModel.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/ComputationalResourceSchedulingModel.js","mtime":1638641844319},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import BaseModel from \"./BaseModel\";\nvar FIELDS = [\"resourceHostId\", \"totalCPUCount\", \"nodeCount\", \"numberOfThreads\", \"queueName\", \"wallTimeLimit\", \"totalPhysicalMemory\", \"chessisNumber\", \"staticWorkingDir\", \"overrideLoginUserName\", \"overrideScratchLocation\", \"overrideAllocationProjectNumber\"];\nexport default class ComputationalResourceSchedulingModel extends BaseModel {\n  constructor() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(FIELDS, data);\n  }\n\n  validate() {\n    var queueInfo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var batchQueueResourcePolicy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var validationResults = {};\n\n    if (this.isEmpty(this.resourceHostId)) {\n      validationResults[\"resourceHostId\"] = \"Please select a compute resource.\";\n    }\n\n    if (this.isEmpty(this.queueName)) {\n      validationResults[\"queueName\"] = \"Please select a queue.\";\n    }\n\n    if (!(this.nodeCount > 0)) {\n      validationResults[\"nodeCount\"] = \"Enter a node count greater than 0.\";\n    } else if (batchQueueResourcePolicy && this.nodeCount > batchQueueResourcePolicy.maxAllowedNodes) {\n      validationResults[\"nodeCount\"] = `Enter a node count no greater than ${batchQueueResourcePolicy.maxAllowedNodes}.`;\n    } else if (queueInfo && queueInfo.maxNodes && this.nodeCount > queueInfo.maxNodes) {\n      validationResults[\"nodeCount\"] = `Enter a node count no greater than ${queueInfo.maxNodes}.`;\n    }\n\n    if (!(this.totalCPUCount > 0)) {\n      validationResults[\"totalCPUCount\"] = \"Enter a core count greater than 0.\";\n    } else if (batchQueueResourcePolicy && this.totalCPUCount > batchQueueResourcePolicy.maxAllowedCores) {\n      validationResults[\"totalCPUCount\"] = `Enter a core count no greater than ${batchQueueResourcePolicy.maxAllowedCores}.`;\n    } else if (queueInfo && queueInfo.maxProcessors && this.totalCPUCount > queueInfo.maxProcessors) {\n      validationResults[\"totalCPUCount\"] = `Enter a core count no greater than ${queueInfo.maxProcessors}.`;\n    }\n\n    if (!(this.wallTimeLimit > 0)) {\n      validationResults[\"wallTimeLimit\"] = \"Enter a wall time limit greater than 0.\";\n    } else if (batchQueueResourcePolicy && this.wallTimeLimit > batchQueueResourcePolicy.maxAllowedWalltime) {\n      validationResults[\"wallTimeLimit\"] = `Enter a wall time limit no greater than ${batchQueueResourcePolicy.maxAllowedWalltime}.`;\n    } else if (queueInfo && queueInfo.maxRunTime && this.wallTimeLimit > queueInfo.maxRunTime) {\n      validationResults[\"wallTimeLimit\"] = `Enter a wall time limit no greater than ${queueInfo.maxRunTime}.`;\n    }\n\n    if (!(this.totalPhysicalMemory >= 0)) {\n      validationResults[\"totalPhysicalMemory\"] = \"Enter a total physical memory greater than or equal to 0.\";\n    } else if (queueInfo && queueInfo.maxMemory && this.totalPhysicalMemory > queueInfo.maxMemory) {\n      validationResults[\"totalPhysicalMemory\"] = `Enter a total physical memory no greater than ${queueInfo.maxMemory}.`;\n    }\n\n    return validationResults;\n  }\n\n}",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/ComputationalResourceSchedulingModel.js"],"names":["BaseModel","FIELDS","ComputationalResourceSchedulingModel","constructor","data","validate","queueInfo","batchQueueResourcePolicy","validationResults","isEmpty","resourceHostId","queueName","nodeCount","maxAllowedNodes","maxNodes","totalCPUCount","maxAllowedCores","maxProcessors","wallTimeLimit","maxAllowedWalltime","maxRunTime","totalPhysicalMemory","maxMemory"],"mappings":"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","sourcesContent":["import BaseModel from \"./BaseModel\";\n\nconst FIELDS = [\n  \"resourceHostId\",\n  \"totalCPUCount\",\n  \"nodeCount\",\n  \"numberOfThreads\",\n  \"queueName\",\n  \"wallTimeLimit\",\n  \"totalPhysicalMemory\",\n  \"chessisNumber\",\n  \"staticWorkingDir\",\n  \"overrideLoginUserName\",\n  \"overrideScratchLocation\",\n  \"overrideAllocationProjectNumber\",\n];\n\nexport default class ComputationalResourceSchedulingModel extends BaseModel {\n  constructor(data = {}) {\n    super(FIELDS, data);\n  }\n\n  validate(queueInfo = null, batchQueueResourcePolicy = null) {\n    const validationResults = {};\n    if (this.isEmpty(this.resourceHostId)) {\n      validationResults[\"resourceHostId\"] = \"Please select a compute resource.\";\n    }\n    if (this.isEmpty(this.queueName)) {\n      validationResults[\"queueName\"] = \"Please select a queue.\";\n    }\n    if (!(this.nodeCount > 0)) {\n      validationResults[\"nodeCount\"] = \"Enter a node count greater than 0.\";\n    } else if (\n      batchQueueResourcePolicy &&\n      this.nodeCount > batchQueueResourcePolicy.maxAllowedNodes\n    ) {\n      validationResults[\n        \"nodeCount\"\n      ] = `Enter a node count no greater than ${batchQueueResourcePolicy.maxAllowedNodes}.`;\n    } else if (\n      queueInfo &&\n      queueInfo.maxNodes &&\n      this.nodeCount > queueInfo.maxNodes\n    ) {\n      validationResults[\n        \"nodeCount\"\n      ] = `Enter a node count no greater than ${queueInfo.maxNodes}.`;\n    }\n    if (!(this.totalCPUCount > 0)) {\n      validationResults[\"totalCPUCount\"] = \"Enter a core count greater than 0.\";\n    } else if (\n      batchQueueResourcePolicy &&\n      this.totalCPUCount > batchQueueResourcePolicy.maxAllowedCores\n    ) {\n      validationResults[\n        \"totalCPUCount\"\n      ] = `Enter a core count no greater than ${batchQueueResourcePolicy.maxAllowedCores}.`;\n    } else if (\n      queueInfo &&\n      queueInfo.maxProcessors &&\n      this.totalCPUCount > queueInfo.maxProcessors\n    ) {\n      validationResults[\n        \"totalCPUCount\"\n      ] = `Enter a core count no greater than ${queueInfo.maxProcessors}.`;\n    }\n    if (!(this.wallTimeLimit > 0)) {\n      validationResults[\"wallTimeLimit\"] =\n        \"Enter a wall time limit greater than 0.\";\n    } else if (\n      batchQueueResourcePolicy &&\n      this.wallTimeLimit > batchQueueResourcePolicy.maxAllowedWalltime\n    ) {\n      validationResults[\n        \"wallTimeLimit\"\n      ] = `Enter a wall time limit no greater than ${batchQueueResourcePolicy.maxAllowedWalltime}.`;\n    } else if (\n      queueInfo &&\n      queueInfo.maxRunTime &&\n      this.wallTimeLimit > queueInfo.maxRunTime\n    ) {\n      validationResults[\n        \"wallTimeLimit\"\n      ] = `Enter a wall time limit no greater than ${queueInfo.maxRunTime}.`;\n    }\n    if (!(this.totalPhysicalMemory >= 0)) {\n      validationResults[\"totalPhysicalMemory\"] =\n        \"Enter a total physical memory greater than or equal to 0.\";\n    } else if (\n      queueInfo &&\n      queueInfo.maxMemory &&\n      this.totalPhysicalMemory > queueInfo.maxMemory\n    ) {\n      validationResults[\n        \"totalPhysicalMemory\"\n      ] = `Enter a total physical memory no greater than ${queueInfo.maxMemory}.`;\n    }\n    return validationResults;\n  }\n}\n"]}]}