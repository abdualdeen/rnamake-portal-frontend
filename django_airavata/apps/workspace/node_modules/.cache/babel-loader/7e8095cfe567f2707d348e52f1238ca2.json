{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/web-components/ExperimentEditor.vue?vue&type=script&lang=js&shadow","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/web-components/ExperimentEditor.vue","mtime":1638641844343},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport _slicedToArray from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from \"vue\";\nimport store from \"./store\";\nimport { mapGetters } from \"vuex\";\nimport { BootstrapVue } from \"bootstrap-vue\";\nimport urls from \"../utils/urls\";\nVue.use(BootstrapVue);\nexport default {\n  props: {\n    // TODO: rename to applicationModuleId?\n    applicationId: {\n      type: String,\n      required: true\n    },\n    experimentId: {\n      type: String,\n      required: false\n    }\n  },\n  store: store,\n\n  created() {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n\n  mounted() {\n    var _this = this;\n\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2() {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!_this.experimentId) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 3;\n              return _this.$store.dispatch(\"loadExperiment\", {\n                experimentId: _this.experimentId\n              });\n\n            case 3:\n              _context2.next = 7;\n              break;\n\n            case 5:\n              _context2.next = 7;\n              return _this.$store.dispatch(\"loadNewExperiment\", {\n                applicationId: _this.applicationId\n              });\n\n            case 7:\n              _this.$emit(\"loaded\", _this.experiment); // vue-web-component-wrapper clones native slots and turns them into Vue\n              // slots which means they lose any event listeners and they basically aren't\n              // in the DOM any more.  As a workaround, programmatically create native\n              // slots. See also https://github.com/vuejs/vue-web-component-wrapper/issues/38\n\n\n              _this.$nextTick(() => {\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                  for (var _iterator = _this.experiment.experimentInputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var input = _step.value;\n                    var slot = document.createElement(\"slot\");\n                    slot.setAttribute(\"name\", input.name);\n\n                    if (input.type.name === \"STRING\") {\n                      slot.textContent = `${input.name} `;\n                      var textInput = document.createElement(\"adpf-string-input-editor\");\n                      textInput.setAttribute(\"value\", input.value);\n                      textInput.setAttribute(\"name\", input.name);\n                      slot.appendChild(textInput);\n\n                      _this.$refs[input.name][0].append(slot);\n                    } // TODO: add support for other input types\n\n                  } // this.injectPropsIntoSlottedInputs();\n\n                  /*\n                   * Experiment Name native slot\n                   */\n                  // <slot name=\"experiment-name\">\n                  //   <b-form-group label=\"Experiment Name\" label-for=\"experiment-name\">\n                  //     <b-form-input\n                  //       type=\"text\"\n                  //       name=\"experiment-name\"\n                  //       :value=\"experiment.experimentName\"\n                  //       required\n                  //     >\n                  //     </b-form-input>\n                  //   </b-form-group>\n                  // </slot>\n\n                } catch (err) {\n                  _didIteratorError = true;\n                  _iteratorError = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                      _iterator.return();\n                    }\n                  } finally {\n                    if (_didIteratorError) {\n                      throw _iteratorError;\n                    }\n                  }\n                }\n\n                var experimentNameGroupEl = document.createElement(\"div\");\n                experimentNameGroupEl.classList.add(\"form-group\");\n                var experimentNameLabelEl = document.createElement(\"label\");\n                experimentNameLabelEl.setAttribute(\"for\", \"experiment-name-input\");\n                experimentNameLabelEl.textContent = \"Experiment Name\";\n                var experimentNameInputEl = document.createElement(\"input\");\n                experimentNameInputEl.classList.add(\"form-control\");\n                experimentNameInputEl.setAttribute(\"id\", \"experiment-name-input\");\n                experimentNameInputEl.setAttribute(\"type\", \"text\");\n                experimentNameInputEl.setAttribute(\"name\", \"experiment-name\");\n                experimentNameInputEl.setAttribute(\"value\", _this.experiment.experimentName);\n                experimentNameInputEl.setAttribute(\"required\", \"required\");\n                experimentNameGroupEl.append(experimentNameLabelEl, experimentNameInputEl);\n\n                _this.$refs.experimentName.append(_this.createSlot(\"experiment-name\", experimentNameGroupEl));\n\n                var projectSelectorEl = document.createElement(\"adpf-project-selector\");\n\n                if (_this.experiment.projectId) {\n                  projectSelectorEl.setAttribute(\"value\", _this.experiment.projectId);\n                }\n\n                _this.$refs.projectSelector.append(_this.createSlot(\"experiment-project\", projectSelectorEl));\n\n                var groupResourceProfileSelectorEl = document.createElement(\"adpf-group-resource-profile-selector\");\n\n                if (_this.groupResourceProfileId) {\n                  groupResourceProfileSelectorEl.setAttribute(\"value\", _this.groupResourceProfileId);\n                }\n\n                _this.$refs.groupResourceProfileSelector.append(_this.createSlot(\"experiment-group-resource-profile\", groupResourceProfileSelectorEl));\n\n                var computeResourceSelectorEl = document.createElement(\"adpf-experiment-compute-resource-selector\");\n\n                _this.$refs.computeResourceSelector.append(_this.createSlot(\"experiment-compute-resource\", computeResourceSelectorEl));\n\n                var queueSettingsEditorEl = document.createElement(\"adpf-queue-settings-editor\");\n\n                _this.$refs.queueSettingsEditor.append(_this.createSlot(\"experiment-queue-settings\", queueSettingsEditorEl));\n                /*\n                 * Experiment (save/launch) Buttons native slot\n                 */\n                // <slot name=\"experiment-buttons\">\n                //   <div class=\"d-flex justify-content-end\">\n                //     <b-button\n                //       type=\"submit\"\n                //       variant=\"success\"\n                //       name=\"save-and-launch-experiment-button\"\n                //       class=\"mr-2\"\n                //     >\n                //       Save and Launch\n                //     </b-button>\n                //     <b-button type=\"submit\" variant=\"primary\" name=\"save-experiment-button\">\n                //       Save\n                //     </b-button>\n                //   </div>\n                // </slot>\n\n\n                var buttonsRowEl = document.createElement(\"div\");\n                buttonsRowEl.classList.add(\"d-flex\", \"justify-content-end\");\n                var saveAndLaunchButtonEl = document.createElement(\"button\");\n                saveAndLaunchButtonEl.setAttribute(\"type\", \"submit\");\n                saveAndLaunchButtonEl.setAttribute(\"name\", \"save-and-launch-experiment-button\");\n                saveAndLaunchButtonEl.classList.add(\"btn\", \"btn-success\", \"mr-2\");\n                saveAndLaunchButtonEl.textContent = \"Save and Launch\";\n                var saveButtonEl = document.createElement(\"button\");\n                saveButtonEl.setAttribute(\"type\", \"submit\");\n                saveButtonEl.setAttribute(\"name\", \"save-experiment-button\");\n                saveButtonEl.classList.add(\"btn\", \"btn-primary\");\n                saveButtonEl.textContent = \"Save\";\n                buttonsRowEl.append(saveAndLaunchButtonEl, saveButtonEl);\n\n                _this.$refs.experimentButtons.append(_this.createSlot(\"experiment-buttons\", buttonsRowEl));\n              });\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n\n  computed: _objectSpread({}, mapGetters([\"experiment\", \"groupResourceProfileId\"])),\n  methods: {\n    updateExperimentName(event) {\n      this.$store.dispatch(\"updateExperimentName\", {\n        name: event.target.value\n      });\n    },\n\n    updateInputValue(inputName, event) {\n      // web component input events have the current value in a detail array,\n      // native input events have the current value in target.value\n      var value = Array.isArray(event.detail) ? event.detail[0] : event.target // Backwards compatibility: second argument changed from the value to the 'event'\n      ? event.target.value : event;\n      this.$store.dispatch(\"updateExperimentInputValue\", {\n        inputName,\n        value\n      });\n    },\n\n    updateProjectId(event) {\n      var _event$detail = _slicedToArray(event.detail, 1),\n          projectId = _event$detail[0];\n\n      this.$store.dispatch(\"updateProjectId\", {\n        projectId\n      });\n    },\n\n    updateGroupResourceProfileId(event) {\n      var _event$detail2 = _slicedToArray(event.detail, 1),\n          groupResourceProfileId = _event$detail2[0];\n\n      this.$store.dispatch(\"updateGroupResourceProfileId\", {\n        groupResourceProfileId\n      });\n    },\n\n    onSubmit(event) {\n      var _this2 = this;\n\n      return _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var saveEvent;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // console.log(event);\n                // 'save' event is cancelable. Listener can call .preventDefault() on the event to cancel.\n                // composed: true allows the shadow DOM event to bubble up through the shadow root.\n                saveEvent = new CustomEvent(\"save\", {\n                  detail: [_this2.experiment],\n                  cancelable: true,\n                  composed: true\n                });\n\n                _this2.$el.dispatchEvent(saveEvent);\n\n                if (!saveEvent.defaultPrevented) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 4:\n                if (!(event.submitter.name === \"save-experiment-button\")) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                _context3.next = 7;\n                return _this2.$store.dispatch(\"saveExperiment\");\n\n              case 7:\n                _this2.postSave();\n\n                return _context3.abrupt(\"return\");\n\n              case 11:\n                _context3.next = 13;\n                return _this2.$store.dispatch(\"saveExperiment\");\n\n              case 13:\n                _context3.next = 15;\n                return _this2.$store.dispatch(\"launchExperiment\");\n\n              case 15:\n                _this2.postSaveAndLaunch(_this2.experiment);\n\n                return _context3.abrupt(\"return\");\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n\n    postSave() {\n      // client code can listen for 'saved' and preventDefault() on it to handle\n      // it differently. Default action is to navigate to experiments list.\n      var savedEvent = new CustomEvent(\"saved\", {\n        detail: [this.experiment],\n        cancelable: true,\n        composed: true\n      });\n      this.$el.dispatchEvent(savedEvent);\n\n      if (savedEvent.defaultPrevented) {\n        return;\n      }\n\n      urls.navigateToExperimentsList();\n    },\n\n    postSaveAndLaunch(experiment) {\n      // client code can listen for 'saved-and-launched' and preventDefault() on\n      // it to handle it differently. Default action is to navigate to\n      // the experiment summary page.\n      var savedAndLaunchedEvent = new CustomEvent(\"saved-and-launched\", {\n        detail: [this.experiment],\n        cancelable: true,\n        composed: true\n      });\n      this.$el.dispatchEvent(savedAndLaunchedEvent);\n\n      if (savedAndLaunchedEvent.defaultPrevented) {\n        return;\n      }\n\n      urls.navigateToViewExperiment(experiment, {\n        launching: true\n      });\n    },\n\n    createSlot(name) {\n      var slot = document.createElement(\"slot\");\n      slot.setAttribute(\"name\", name);\n\n      for (var _len = arguments.length, children = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        children[_key - 1] = arguments[_key];\n      }\n\n      slot.append(...children);\n      return slot;\n    }\n\n  }\n};",{"version":3,"sources":["ExperimentEditor.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <form v-if=\"experiment\" @submit.prevent=\"onSubmit\">\n    <div ref=\"experimentName\" @input=\"updateExperimentName\">\n      <!-- programmatically define slot for experiment-name as native slot\n            (not Vue slots), see #mounted() -->\n    </div>\n    <div ref=\"projectSelector\" @input=\"updateProjectId\">\n      <!-- programmatically define slot for experiment-project as native slot\n           (not Vue slots), see #mounted() -->\n    </div>\n    <template v-for=\"input in experiment.experimentInputs\">\n      <div\n        :ref=\"input.name\"\n        :key=\"input.name\"\n        @input=\"updateInputValue(input.name, $event)\"\n      >\n        <!-- programmatically define slots as native slots (not Vue slots), see #mounted() -->\n      </div>\n    </template>\n    <div\n      ref=\"groupResourceProfileSelector\"\n      @input.stop=\"updateGroupResourceProfileId\"\n    >\n      <!-- programmatically define slot for adpf-group-resource-profile-selector -->\n    </div>\n    <div ref=\"computeResourceSelector\">\n      <!-- programmatically define slot for adpf-experiment-compute-resource-selector -->\n    </div>\n    <div ref=\"queueSettingsEditor\">\n      <!-- programmatically define slot for adpf-queue-settings-editor -->\n    </div>\n    <div ref=\"experimentButtons\">\n      <!-- programmatically define slot for experiment-buttons as\n          native slot (not Vue slots), see #mounted() -->\n    </div>\n  </form>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport store from \"./store\";\nimport { mapGetters } from \"vuex\";\nimport { BootstrapVue } from \"bootstrap-vue\";\nimport urls from \"../utils/urls\";\nVue.use(BootstrapVue);\n\nexport default {\n  props: {\n    // TODO: rename to applicationModuleId?\n    applicationId: {\n      type: String,\n      required: true,\n    },\n    experimentId: {\n      type: String,\n      required: false,\n    },\n  },\n  store: store,\n  async created() {},\n  async mounted() {\n    if (this.experimentId) {\n      await this.$store.dispatch(\"loadExperiment\", {\n        experimentId: this.experimentId,\n      });\n    } else {\n      await this.$store.dispatch(\"loadNewExperiment\", {\n        applicationId: this.applicationId,\n      });\n    }\n    this.$emit(\"loaded\", this.experiment);\n    // vue-web-component-wrapper clones native slots and turns them into Vue\n    // slots which means they lose any event listeners and they basically aren't\n    // in the DOM any more.  As a workaround, programmatically create native\n    // slots. See also https://github.com/vuejs/vue-web-component-wrapper/issues/38\n    this.$nextTick(() => {\n      for (const input of this.experiment.experimentInputs) {\n        const slot = document.createElement(\"slot\");\n        slot.setAttribute(\"name\", input.name);\n        if (input.type.name === \"STRING\") {\n          slot.textContent = `${input.name} `;\n          const textInput = document.createElement(\"adpf-string-input-editor\");\n          textInput.setAttribute(\"value\", input.value);\n          textInput.setAttribute(\"name\", input.name);\n          slot.appendChild(textInput);\n          this.$refs[input.name][0].append(slot);\n        }\n        // TODO: add support for other input types\n      }\n      // this.injectPropsIntoSlottedInputs();\n\n      /*\n       * Experiment Name native slot\n       */\n      // <slot name=\"experiment-name\">\n      //   <b-form-group label=\"Experiment Name\" label-for=\"experiment-name\">\n      //     <b-form-input\n      //       type=\"text\"\n      //       name=\"experiment-name\"\n      //       :value=\"experiment.experimentName\"\n      //       required\n      //     >\n      //     </b-form-input>\n      //   </b-form-group>\n      // </slot>\n      const experimentNameGroupEl = document.createElement(\"div\");\n      experimentNameGroupEl.classList.add(\"form-group\");\n      const experimentNameLabelEl = document.createElement(\"label\");\n      experimentNameLabelEl.setAttribute(\"for\", \"experiment-name-input\");\n      experimentNameLabelEl.textContent = \"Experiment Name\";\n      const experimentNameInputEl = document.createElement(\"input\");\n      experimentNameInputEl.classList.add(\"form-control\");\n      experimentNameInputEl.setAttribute(\"id\", \"experiment-name-input\");\n      experimentNameInputEl.setAttribute(\"type\", \"text\");\n      experimentNameInputEl.setAttribute(\"name\", \"experiment-name\");\n      experimentNameInputEl.setAttribute(\n        \"value\",\n        this.experiment.experimentName\n      );\n      experimentNameInputEl.setAttribute(\"required\", \"required\");\n      experimentNameGroupEl.append(\n        experimentNameLabelEl,\n        experimentNameInputEl\n      );\n      this.$refs.experimentName.append(\n        this.createSlot(\"experiment-name\", experimentNameGroupEl)\n      );\n\n      const projectSelectorEl = document.createElement(\"adpf-project-selector\");\n      if (this.experiment.projectId) {\n        projectSelectorEl.setAttribute(\"value\", this.experiment.projectId);\n      }\n      this.$refs.projectSelector.append(\n        this.createSlot(\"experiment-project\", projectSelectorEl)\n      );\n\n      const groupResourceProfileSelectorEl = document.createElement(\n        \"adpf-group-resource-profile-selector\"\n      );\n      if (this.groupResourceProfileId) {\n        groupResourceProfileSelectorEl.setAttribute(\n          \"value\",\n          this.groupResourceProfileId\n        );\n      }\n      this.$refs.groupResourceProfileSelector.append(\n        this.createSlot(\n          \"experiment-group-resource-profile\",\n          groupResourceProfileSelectorEl\n        )\n      );\n\n      const computeResourceSelectorEl = document.createElement(\n        \"adpf-experiment-compute-resource-selector\"\n      );\n      this.$refs.computeResourceSelector.append(\n        this.createSlot(\n          \"experiment-compute-resource\",\n          computeResourceSelectorEl\n        )\n      );\n\n      const queueSettingsEditorEl = document.createElement(\n        \"adpf-queue-settings-editor\"\n      );\n      this.$refs.queueSettingsEditor.append(\n        this.createSlot(\"experiment-queue-settings\", queueSettingsEditorEl)\n      );\n\n      /*\n       * Experiment (save/launch) Buttons native slot\n       */\n      // <slot name=\"experiment-buttons\">\n      //   <div class=\"d-flex justify-content-end\">\n      //     <b-button\n      //       type=\"submit\"\n      //       variant=\"success\"\n      //       name=\"save-and-launch-experiment-button\"\n      //       class=\"mr-2\"\n      //     >\n      //       Save and Launch\n      //     </b-button>\n      //     <b-button type=\"submit\" variant=\"primary\" name=\"save-experiment-button\">\n      //       Save\n      //     </b-button>\n      //   </div>\n      // </slot>\n      const buttonsRowEl = document.createElement(\"div\");\n      buttonsRowEl.classList.add(\"d-flex\", \"justify-content-end\");\n      const saveAndLaunchButtonEl = document.createElement(\"button\");\n      saveAndLaunchButtonEl.setAttribute(\"type\", \"submit\");\n      saveAndLaunchButtonEl.setAttribute(\n        \"name\",\n        \"save-and-launch-experiment-button\"\n      );\n      saveAndLaunchButtonEl.classList.add(\"btn\", \"btn-success\", \"mr-2\");\n      saveAndLaunchButtonEl.textContent = \"Save and Launch\";\n      const saveButtonEl = document.createElement(\"button\");\n      saveButtonEl.setAttribute(\"type\", \"submit\");\n      saveButtonEl.setAttribute(\"name\", \"save-experiment-button\");\n      saveButtonEl.classList.add(\"btn\", \"btn-primary\");\n      saveButtonEl.textContent = \"Save\";\n      buttonsRowEl.append(saveAndLaunchButtonEl, saveButtonEl);\n      this.$refs.experimentButtons.append(\n        this.createSlot(\"experiment-buttons\", buttonsRowEl)\n      );\n    });\n  },\n  computed: {\n    ...mapGetters([\"experiment\", \"groupResourceProfileId\"]),\n  },\n  methods: {\n    updateExperimentName(event) {\n      this.$store.dispatch(\"updateExperimentName\", {\n        name: event.target.value,\n      });\n    },\n    updateInputValue(inputName, event) {\n      // web component input events have the current value in a detail array,\n      // native input events have the current value in target.value\n      const value = Array.isArray(event.detail)\n        ? event.detail[0]\n        : event.target // Backwards compatibility: second argument changed from the value to the 'event'\n        ? event.target.value\n        : event;\n      this.$store.dispatch(\"updateExperimentInputValue\", { inputName, value });\n    },\n    updateProjectId(event) {\n      const [projectId] = event.detail;\n      this.$store.dispatch(\"updateProjectId\", { projectId });\n    },\n    updateGroupResourceProfileId(event) {\n      const [groupResourceProfileId] = event.detail;\n      this.$store.dispatch(\"updateGroupResourceProfileId\", {\n        groupResourceProfileId,\n      });\n    },\n    async onSubmit(event) {\n      // console.log(event);\n      // 'save' event is cancelable. Listener can call .preventDefault() on the event to cancel.\n      // composed: true allows the shadow DOM event to bubble up through the shadow root.\n      const saveEvent = new CustomEvent(\"save\", {\n        detail: [this.experiment],\n        cancelable: true,\n        composed: true,\n      });\n      this.$el.dispatchEvent(saveEvent);\n      if (saveEvent.defaultPrevented) {\n        return;\n      }\n      if (event.submitter.name === \"save-experiment-button\") {\n        await this.$store.dispatch(\"saveExperiment\");\n        this.postSave();\n        return;\n      } else {\n        // Default submit button handling is save and launch\n        await this.$store.dispatch(\"saveExperiment\");\n        await this.$store.dispatch(\"launchExperiment\");\n        this.postSaveAndLaunch(this.experiment);\n        return;\n      }\n    },\n    postSave() {\n      // client code can listen for 'saved' and preventDefault() on it to handle\n      // it differently. Default action is to navigate to experiments list.\n      const savedEvent = new CustomEvent(\"saved\", {\n        detail: [this.experiment],\n        cancelable: true,\n        composed: true,\n      });\n      this.$el.dispatchEvent(savedEvent);\n      if (savedEvent.defaultPrevented) {\n        return;\n      }\n      urls.navigateToExperimentsList();\n    },\n    postSaveAndLaunch(experiment) {\n      // client code can listen for 'saved-and-launched' and preventDefault() on\n      // it to handle it differently. Default action is to navigate to\n      // the experiment summary page.\n      const savedAndLaunchedEvent = new CustomEvent(\"saved-and-launched\", {\n        detail: [this.experiment],\n        cancelable: true,\n        composed: true,\n      });\n      this.$el.dispatchEvent(savedAndLaunchedEvent);\n      if (savedAndLaunchedEvent.defaultPrevented) {\n        return;\n      }\n      urls.navigateToViewExperiment(experiment, { launching: true });\n    },\n    createSlot(name, ...children) {\n      const slot = document.createElement(\"slot\");\n      slot.setAttribute(\"name\", name);\n      slot.append(...children);\n      return slot;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n@import \"./styles\";\n\n:host {\n  display: block;\n  margin-bottom: 1em;\n}\n</style>\n"],"sourceRoot":"static/django_airavata_workspace/js/web-components"}]}