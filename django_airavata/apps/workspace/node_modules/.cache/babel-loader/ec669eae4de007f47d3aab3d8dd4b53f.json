{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/Cache.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/Cache.js","mtime":1638641844323},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["var DEFAULT_EXPIRATION_TIME_MS = 5 * 60 * 1000;\n\nclass CacheEntry {\n  constructor(value, expireDate) {\n    this._value = value;\n    this._expireDate = expireDate;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get isExpired() {\n    return this._expireDate.getTime() < Date.now();\n  }\n\n}\n\nexport default class Cache {\n  constructor() {\n    this._cache = {};\n  }\n\n  get(key) {\n    if (this.has(key)) {\n      var cacheEntry = this._cache[key];\n      return cacheEntry.value;\n    } else {\n      return null;\n    }\n  }\n\n  put(_ref) {\n    var key = _ref.key,\n        value = _ref.value,\n        _ref$expireDate = _ref.expireDate,\n        expireDate = _ref$expireDate === void 0 ? new Date(Date.now() + DEFAULT_EXPIRATION_TIME_MS) : _ref$expireDate;\n    this._cache[key] = new CacheEntry(value, expireDate);\n  }\n\n  has(key) {\n    if (this._cache.hasOwnProperty(key)) {\n      var cacheEntry = this._cache[key];\n\n      if (cacheEntry.isExpired) {\n        delete this._cache[key];\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n}",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/Cache.js"],"names":["DEFAULT_EXPIRATION_TIME_MS","CacheEntry","constructor","value","expireDate","_value","_expireDate","isExpired","getTime","Date","now","Cache","_cache","get","key","has","cacheEntry","put","hasOwnProperty"],"mappings":"AAAA,IAAMA,0BAA0B,GAAG,IAAI,EAAJ,GAAS,IAA5C;;AAEA,MAAMC,UAAN,CAAiB;AACfC,EAAAA,WAAW,CAACC,KAAD,EAAQC,UAAR,EAAoB;AAC7B,SAAKC,MAAL,GAAcF,KAAd;AACA,SAAKG,WAAL,GAAmBF,UAAnB;AACD;;AAED,MAAID,KAAJ,GAAY;AACV,WAAO,KAAKE,MAAZ;AACD;;AAED,MAAIE,SAAJ,GAAgB;AACd,WAAO,KAAKD,WAAL,CAAiBE,OAAjB,KAA6BC,IAAI,CAACC,GAAL,EAApC;AACD;;AAZc;;AAejB,eAAe,MAAMC,KAAN,CAAY;AACzBT,EAAAA,WAAW,GAAG;AACZ,SAAKU,MAAL,GAAc,EAAd;AACD;;AAEDC,EAAAA,GAAG,CAACC,GAAD,EAAM;AACP,QAAI,KAAKC,GAAL,CAASD,GAAT,CAAJ,EAAmB;AACjB,UAAME,UAAU,GAAG,KAAKJ,MAAL,CAAYE,GAAZ,CAAnB;AACA,aAAOE,UAAU,CAACb,KAAlB;AACD,KAHD,MAGO;AACL,aAAO,IAAP;AACD;AACF;;AAEDc,EAAAA,GAAG,OAIA;AAAA,QAHDH,GAGC,QAHDA,GAGC;AAAA,QAFDX,KAEC,QAFDA,KAEC;AAAA,+BADDC,UACC;AAAA,QADDA,UACC,gCADY,IAAIK,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAaV,0BAAtB,CACZ;AACD,SAAKY,MAAL,CAAYE,GAAZ,IAAmB,IAAIb,UAAJ,CAAeE,KAAf,EAAsBC,UAAtB,CAAnB;AACD;;AAEDW,EAAAA,GAAG,CAACD,GAAD,EAAM;AACP,QAAI,KAAKF,MAAL,CAAYM,cAAZ,CAA2BJ,GAA3B,CAAJ,EAAqC;AACnC,UAAME,UAAU,GAAG,KAAKJ,MAAL,CAAYE,GAAZ,CAAnB;;AACA,UAAIE,UAAU,CAACT,SAAf,EAA0B;AACxB,eAAO,KAAKK,MAAL,CAAYE,GAAZ,CAAP;AACA,eAAO,KAAP;AACD,OAHD,MAGO;AACL,eAAO,IAAP;AACD;AACF,KARD,MAQO;AACL,aAAO,KAAP;AACD;AACF;;AAlCwB","sourcesContent":["const DEFAULT_EXPIRATION_TIME_MS = 5 * 60 * 1000;\n\nclass CacheEntry {\n  constructor(value, expireDate) {\n    this._value = value;\n    this._expireDate = expireDate;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get isExpired() {\n    return this._expireDate.getTime() < Date.now();\n  }\n}\n\nexport default class Cache {\n  constructor() {\n    this._cache = {};\n  }\n\n  get(key) {\n    if (this.has(key)) {\n      const cacheEntry = this._cache[key];\n      return cacheEntry.value;\n    } else {\n      return null;\n    }\n  }\n\n  put({\n    key,\n    value,\n    expireDate = new Date(Date.now() + DEFAULT_EXPIRATION_TIME_MS),\n  }) {\n    this._cache[key] = new CacheEntry(value, expireDate);\n  }\n\n  has(key) {\n    if (this._cache.hasOwnProperty(key)) {\n      const cacheEntry = this._cache[key];\n      if (cacheEntry.isExpired) {\n        delete this._cache[key];\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n}\n"]}]}