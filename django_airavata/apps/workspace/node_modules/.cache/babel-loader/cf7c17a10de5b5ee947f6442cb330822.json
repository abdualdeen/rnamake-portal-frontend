{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/input-editors/AutocompleteInputEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/input-editors/AutocompleteInputEditor.vue","mtime":1638641844339},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { utils } from \"django-airavata-api\";\nimport { InputEditorMixin } from \"django-airavata-workspace-plugin-api\";\nimport { components } from \"django-airavata-common-ui\";\nimport _ from \"lodash\";\nexport default {\n  name: \"autocomplete-input-editor\",\n  mixins: [InputEditorMixin],\n  components: {\n    \"autocomplete-text-input\": components.AutocompleteTextInput\n  },\n  props: {\n    value: {\n      type: String\n    }\n  },\n  data: function data() {\n    return {\n      text: null,\n      searchString: \"\",\n      searchResults: null,\n      lastUpdate: Date.now()\n    };\n  },\n  computed: {\n    suggestions: function suggestions() {\n      return this.searchResults ? this.searchResults.results.map(function (r) {\n        return {\n          id: r.value,\n          name: r.text\n        };\n      }) : [];\n    },\n    autocompleteUrl: function autocompleteUrl() {\n      if (this.experimentInput.editorConfig && \"url\" in this.experimentInput.editorConfig) {\n        return this.experimentInput.editorConfig.url;\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\"editor config is missing 'url'. Make sure input \" + this.experimentInput.name + \" has metadata configuration something like:\\n\" + JSON.stringify({\n          editor: {\n            \"ui-component-id\": \"autocomplete-input-editor\",\n            config: {\n              url: \"/some/custom/search/\"\n            }\n          }\n        }, null, 4));\n        return null;\n      }\n    }\n  },\n  methods: {\n    loadTextForValue: function loadTextForValue(value) {\n      if (this.autocompleteUrl) {\n        return utils.FetchUtils.get(this.autocompleteUrl, {\n          exact: value\n        }, {\n          ignoreErrors: true // don't automatically report errors to user - code will handle 404s\n\n        }).then(function (resp) {\n          if (resp.results && resp.results.length > 0) {\n            return resp.results[0].text;\n          } else {\n            return \"value: \".concat(value);\n          }\n        }).catch(function (error) {\n          if (error.details.status === 404) {\n            // if we can't fine an exact match, just return the value as the text\n            return \"value: \".concat(value);\n          } else {\n            throw error;\n          }\n        });\n      } else {\n        return Promise.resolve(null);\n      }\n    },\n    cancel: function cancel() {\n      this.data = null;\n      this.valueChanged();\n    },\n    selected: function selected(suggestion) {\n      this.data = suggestion.id;\n      this.text = suggestion.name;\n      this.valueChanged();\n    },\n    searchChanged: _.debounce(function (newValue) {\n      var _this = this;\n\n      // TODO: don't query when search value is empty string\n      this.searchString = newValue;\n      var currentTime = Date.now();\n\n      if (this.autocompleteUrl) {\n        utils.FetchUtils.get(this.autocompleteUrl, {\n          search: this.searchString\n        }, {\n          showSpinner: false\n        }).then(function (resp) {\n          // Prevent older responses from overwriting newer ones\n          if (currentTime > _this.lastUpdate) {\n            _this.searchResults = resp;\n            _this.lastUpdate = currentTime;\n          }\n        });\n      }\n    }, 200)\n  },\n  created: function created() {\n    var _this2 = this;\n\n    if (this.value) {\n      this.loadTextForValue(this.value).then(function (text) {\n        return _this2.text = text;\n      });\n    }\n  }\n};",{"version":3,"sources":["AutocompleteInputEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA,SAAA,KAAA,QAAA,qBAAA;AACA,SAAA,gBAAA,QAAA,sCAAA;AACA,SAAA,UAAA,QAAA,2BAAA;AACA,OAAA,CAAA,MAAA,QAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,2BADA;AAEA,EAAA,MAAA,EAAA,CAAA,gBAAA,CAFA;AAGA,EAAA,UAAA,EAAA;AACA,+BAAA,UAAA,CAAA;AADA,GAHA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA;AADA,GANA;AAWA,EAAA,IAXA,kBAWA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,IADA;AAEA,MAAA,YAAA,EAAA,EAFA;AAGA,MAAA,aAAA,EAAA,IAHA;AAIA,MAAA,UAAA,EAAA,IAAA,CAAA,GAAA;AAJA,KAAA;AAMA,GAlBA;AAmBA,EAAA,QAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,aAAA,KAAA,aAAA,GACA,KAAA,aAAA,CAAA,OAAA,CAAA,GAAA,CAAA,UAAA,CAAA,EAAA;AACA,eAAA;AACA,UAAA,EAAA,EAAA,CAAA,CAAA,KADA;AAEA,UAAA,IAAA,EAAA,CAAA,CAAA;AAFA,SAAA;AAIA,OALA,CADA,GAOA,EAPA;AAQA,KAVA;AAWA,IAAA,eAXA,6BAWA;AACA,UACA,KAAA,eAAA,CAAA,YAAA,IACA,SAAA,KAAA,eAAA,CAAA,YAFA,EAGA;AACA,eAAA,KAAA,eAAA,CAAA,YAAA,CAAA,GAAA;AACA,OALA,MAKA;AACA;AACA,QAAA,OAAA,CAAA,IAAA,CACA,qDACA,KAAA,eAAA,CAAA,IADA,GAEA,+CAFA,GAGA,IAAA,CAAA,SAAA,CACA;AACA,UAAA,MAAA,EAAA;AACA,+BAAA,2BADA;AAEA,YAAA,MAAA,EAAA;AACA,cAAA,GAAA,EAAA;AADA;AAFA;AADA,SADA,EASA,IATA,EAUA,CAVA,CAJA;AAiBA,eAAA,IAAA;AACA;AACA;AAtCA,GAnBA;AA2DA,EAAA,OAAA,EAAA;AACA,IAAA,gBADA,4BACA,KADA,EACA;AACA,UAAA,KAAA,eAAA,EAAA;AACA,eAAA,KAAA,CAAA,UAAA,CAAA,GAAA,CACA,KAAA,eADA,EAEA;AACA,UAAA,KAAA,EAAA;AADA,SAFA,EAKA;AACA,UAAA,YAAA,EAAA,IADA,CACA;;AADA,SALA,EASA,IATA,CASA,UAAA,IAAA,EAAA;AACA,cAAA,IAAA,CAAA,OAAA,IAAA,IAAA,CAAA,OAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,mBAAA,IAAA,CAAA,OAAA,CAAA,CAAA,EAAA,IAAA;AACA,WAFA,MAEA;AACA,oCAAA,KAAA;AACA;AACA,SAfA,EAgBA,KAhBA,CAgBA,UAAA,KAAA,EAAA;AACA,cAAA,KAAA,CAAA,OAAA,CAAA,MAAA,KAAA,GAAA,EAAA;AACA;AACA,oCAAA,KAAA;AACA,WAHA,MAGA;AACA,kBAAA,KAAA;AACA;AACA,SAvBA,CAAA;AAwBA,OAzBA,MAyBA;AACA,eAAA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA;AACA;AACA,KA9BA;AA+BA,IAAA,MA/BA,oBA+BA;AACA,WAAA,IAAA,GAAA,IAAA;AACA,WAAA,YAAA;AACA,KAlCA;AAmCA,IAAA,QAnCA,oBAmCA,UAnCA,EAmCA;AACA,WAAA,IAAA,GAAA,UAAA,CAAA,EAAA;AACA,WAAA,IAAA,GAAA,UAAA,CAAA,IAAA;AACA,WAAA,YAAA;AACA,KAvCA;AAwCA,IAAA,aAAA,EAAA,CAAA,CAAA,QAAA,CAAA,UAAA,QAAA,EAAA;AAAA;;AACA;AACA,WAAA,YAAA,GAAA,QAAA;AACA,UAAA,WAAA,GAAA,IAAA,CAAA,GAAA,EAAA;;AACA,UAAA,KAAA,eAAA,EAAA;AACA,QAAA,KAAA,CAAA,UAAA,CAAA,GAAA,CACA,KAAA,eADA,EAEA;AACA,UAAA,MAAA,EAAA,KAAA;AADA,SAFA,EAKA;AAAA,UAAA,WAAA,EAAA;AAAA,SALA,EAMA,IANA,CAMA,UAAA,IAAA,EAAA;AACA;AACA,cAAA,WAAA,GAAA,KAAA,CAAA,UAAA,EAAA;AACA,YAAA,KAAA,CAAA,aAAA,GAAA,IAAA;AACA,YAAA,KAAA,CAAA,UAAA,GAAA,WAAA;AACA;AACA,SAZA;AAaA;AACA,KAnBA,EAmBA,GAnBA;AAxCA,GA3DA;AAwHA,EAAA,OAxHA,qBAwHA;AAAA;;AACA,QAAA,KAAA,KAAA,EAAA;AACA,WAAA,gBAAA,CAAA,KAAA,KAAA,EAAA,IAAA,CAAA,UAAA,IAAA;AAAA,eAAA,MAAA,CAAA,IAAA,GAAA,IAAA;AAAA,OAAA;AACA;AACA;AA5HA,CAAA","sourcesContent":["<template>\n  <div v-if=\"value\" class=\"d-flex pl-3\">\n    {{ text }}\n    <b-link @click=\"cancel\" class=\"ml-auto text-danger\"\n      >Cancel\n      <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n    </b-link>\n  </div>\n  <div v-else>\n    <autocomplete-text-input\n      :suggestions=\"suggestions\"\n      @selected=\"selected\"\n      @search-changed=\"searchChanged\"\n      :max-matches=\"10\"\n    />\n  </div>\n</template>\n\n<script>\nimport { utils } from \"django-airavata-api\";\nimport { InputEditorMixin } from \"django-airavata-workspace-plugin-api\";\nimport { components } from \"django-airavata-common-ui\";\nimport _ from \"lodash\";\n\nexport default {\n  name: \"autocomplete-input-editor\",\n  mixins: [InputEditorMixin],\n  components: {\n    \"autocomplete-text-input\": components.AutocompleteTextInput,\n  },\n  props: {\n    value: {\n      type: String,\n    },\n  },\n  data() {\n    return {\n      text: null,\n      searchString: \"\",\n      searchResults: null,\n      lastUpdate: Date.now(),\n    };\n  },\n  computed: {\n    suggestions() {\n      return this.searchResults\n        ? this.searchResults.results.map((r) => {\n            return {\n              id: r.value,\n              name: r.text,\n            };\n          })\n        : [];\n    },\n    autocompleteUrl() {\n      if (\n        this.experimentInput.editorConfig &&\n        \"url\" in this.experimentInput.editorConfig\n      ) {\n        return this.experimentInput.editorConfig.url;\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"editor config is missing 'url'. Make sure input \" +\n            this.experimentInput.name +\n            \" has metadata configuration something like:\\n\" +\n            JSON.stringify(\n              {\n                editor: {\n                  \"ui-component-id\": \"autocomplete-input-editor\",\n                  config: {\n                    url: \"/some/custom/search/\",\n                  },\n                },\n              },\n              null,\n              4\n            )\n        );\n        return null;\n      }\n    },\n  },\n  methods: {\n    loadTextForValue(value) {\n      if (this.autocompleteUrl) {\n        return utils.FetchUtils.get(\n          this.autocompleteUrl,\n          {\n            exact: value,\n          },\n          {\n            ignoreErrors: true, // don't automatically report errors to user - code will handle 404s\n          }\n        )\n          .then((resp) => {\n            if (resp.results && resp.results.length > 0) {\n              return resp.results[0].text;\n            } else {\n              return `value: ${value}`;\n            }\n          })\n          .catch((error) => {\n            if (error.details.status === 404) {\n              // if we can't fine an exact match, just return the value as the text\n              return `value: ${value}`;\n            } else {\n              throw error;\n            }\n          });\n      } else {\n        return Promise.resolve(null);\n      }\n    },\n    cancel() {\n      this.data = null;\n      this.valueChanged();\n    },\n    selected(suggestion) {\n      this.data = suggestion.id;\n      this.text = suggestion.name;\n      this.valueChanged();\n    },\n    searchChanged: _.debounce(function (newValue) {\n      // TODO: don't query when search value is empty string\n      this.searchString = newValue;\n      const currentTime = Date.now();\n      if (this.autocompleteUrl) {\n        utils.FetchUtils.get(\n          this.autocompleteUrl,\n          {\n            search: this.searchString,\n          },\n          { showSpinner: false }\n        ).then((resp) => {\n          // Prevent older responses from overwriting newer ones\n          if (currentTime > this.lastUpdate) {\n            this.searchResults = resp;\n            this.lastUpdate = currentTime;\n          }\n        });\n      }\n    }, 200),\n  },\n  created() {\n    if (this.value) {\n      this.loadTextForValue(this.value).then((text) => (this.text = text));\n    }\n  },\n};\n</script>\n"],"sourceRoot":"static/django_airavata_workspace/js/components/experiment/input-editors"}]}