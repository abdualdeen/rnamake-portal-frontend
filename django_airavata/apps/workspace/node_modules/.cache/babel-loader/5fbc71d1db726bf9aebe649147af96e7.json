{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/ApplicationInterfaceDefinition.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/ApplicationInterfaceDefinition.js","mtime":1638641844319},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import BaseModel from \"./BaseModel\";\nimport InputDataObjectType from \"./InputDataObjectType\";\nimport OutputDataObjectType from \"./OutputDataObjectType\";\nimport DataType from \"./DataType\";\nimport Experiment from \"./Experiment\";\nvar FIELDS = [\"applicationInterfaceId\", \"applicationName\", \"applicationDescription\", {\n  name: \"applicationModules\",\n  type: \"string\",\n  list: true\n}, // When saving/updating, the order of the inputs in the applicationInputs\n// array determines the 'inputOrder' that will be applied to each input on the\n// backend. Updating 'inputOrder' will have no effect.\n{\n  name: \"applicationInputs\",\n  type: InputDataObjectType,\n  list: true,\n  default: BaseModel.defaultNewInstance(Array)\n}, {\n  name: \"applicationOutputs\",\n  type: OutputDataObjectType,\n  list: true,\n  default: BaseModel.defaultNewInstance(Array)\n}, {\n  name: \"archiveWorkingDirectory\",\n  type: \"boolean\",\n  default: false\n}, {\n  name: \"hasOptionalFileInputs\",\n  type: \"boolean\",\n  default: false\n}, \"userHasWriteAccess\"];\nexport default class ApplicationInterfaceDefinition extends BaseModel {\n  constructor() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(FIELDS, data);\n  }\n\n  addStandardOutAndStandardErrorOutputs() {\n    var stdout = new OutputDataObjectType({\n      name: \"Standard-Out\",\n      type: DataType.STDOUT,\n      isRequired: true,\n      metaData: {\n        \"file-metadata\": {\n          \"mime-type\": \"text/plain\"\n        }\n      }\n    });\n    var stderr = new OutputDataObjectType({\n      name: \"Standard-Error\",\n      type: DataType.STDERR,\n      isRequired: true,\n      metaData: {\n        \"file-metadata\": {\n          \"mime-type\": \"text/plain\"\n        }\n      }\n    });\n\n    if (!this.applicationOutputs) {\n      this.applicationOutputs = [];\n    }\n\n    this.applicationOutputs.push(stdout, stderr);\n  }\n\n  createExperiment() {\n    var experiment = new Experiment();\n    experiment.populateInputsOutputsFromApplicationInterface(this);\n    experiment.executionId = this.applicationInterfaceId;\n    return experiment;\n  }\n\n  get applicationModuleId() {\n    if (!this.applicationModules || this.applicationModules.length > 1) {\n      throw new Error(`No unique application module exists for interface\n        ${this.applicationName}: modules=${this.applicationModules}`);\n    }\n\n    return this.applicationModules[0];\n  }\n\n}",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/ApplicationInterfaceDefinition.js"],"names":["BaseModel","InputDataObjectType","OutputDataObjectType","DataType","Experiment","FIELDS","name","type","list","default","defaultNewInstance","Array","ApplicationInterfaceDefinition","constructor","data","addStandardOutAndStandardErrorOutputs","stdout","STDOUT","isRequired","metaData","stderr","STDERR","applicationOutputs","push","createExperiment","experiment","populateInputsOutputsFromApplicationInterface","executionId","applicationInterfaceId","applicationModuleId","applicationModules","length","Error","applicationName"],"mappings":"AAAA,OAAOA,SAAP;AACA,OAAOC,mBAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,QAAP;AACA,OAAOC,UAAP;AAEA,IAAMC,MAAM,GAAG,CACb,wBADa,EAEb,iBAFa,EAGb,wBAHa,EAIb;AACEC,EAAAA,IAAI,EAAE,oBADR;AAEEC,EAAAA,IAAI,EAAE,QAFR;AAGEC,EAAAA,IAAI,EAAE;AAHR,CAJa,EASb;AACA;AACA;AACA;AACEF,EAAAA,IAAI,EAAE,mBADR;AAEEC,EAAAA,IAAI,EAAEN,mBAFR;AAGEO,EAAAA,IAAI,EAAE,IAHR;AAIEC,EAAAA,OAAO,EAAET,SAAS,CAACU,kBAAV,CAA6BC,KAA7B;AAJX,CAZa,EAkBb;AACEL,EAAAA,IAAI,EAAE,oBADR;AAEEC,EAAAA,IAAI,EAAEL,oBAFR;AAGEM,EAAAA,IAAI,EAAE,IAHR;AAIEC,EAAAA,OAAO,EAAET,SAAS,CAACU,kBAAV,CAA6BC,KAA7B;AAJX,CAlBa,EAwBb;AACEL,EAAAA,IAAI,EAAE,yBADR;AAEEC,EAAAA,IAAI,EAAE,SAFR;AAGEE,EAAAA,OAAO,EAAE;AAHX,CAxBa,EA6Bb;AACEH,EAAAA,IAAI,EAAE,uBADR;AAEEC,EAAAA,IAAI,EAAE,SAFR;AAGEE,EAAAA,OAAO,EAAE;AAHX,CA7Ba,EAkCb,oBAlCa,CAAf;AAqCA,eAAe,MAAMG,8BAAN,SAA6CZ,SAA7C,CAAuD;AACpEa,EAAAA,WAAW,GAAY;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AACrB,UAAMT,MAAN,EAAcS,IAAd;AACD;;AAEDC,EAAAA,qCAAqC,GAAG;AACtC,QAAMC,MAAM,GAAG,IAAId,oBAAJ,CAAyB;AACtCI,MAAAA,IAAI,EAAE,cADgC;AAEtCC,MAAAA,IAAI,EAAEJ,QAAQ,CAACc,MAFuB;AAGtCC,MAAAA,UAAU,EAAE,IAH0B;AAItCC,MAAAA,QAAQ,EAAE;AACR,yBAAiB;AACf,uBAAa;AADE;AADT;AAJ4B,KAAzB,CAAf;AAUA,QAAMC,MAAM,GAAG,IAAIlB,oBAAJ,CAAyB;AACtCI,MAAAA,IAAI,EAAE,gBADgC;AAEtCC,MAAAA,IAAI,EAAEJ,QAAQ,CAACkB,MAFuB;AAGtCH,MAAAA,UAAU,EAAE,IAH0B;AAItCC,MAAAA,QAAQ,EAAE;AACR,yBAAiB;AACf,uBAAa;AADE;AADT;AAJ4B,KAAzB,CAAf;;AAUA,QAAI,CAAC,KAAKG,kBAAV,EAA8B;AAC5B,WAAKA,kBAAL,GAA0B,EAA1B;AACD;;AACD,SAAKA,kBAAL,CAAwBC,IAAxB,CAA6BP,MAA7B,EAAqCI,MAArC;AACD;;AAEDI,EAAAA,gBAAgB,GAAG;AACjB,QAAMC,UAAU,GAAG,IAAIrB,UAAJ,EAAnB;AACAqB,IAAAA,UAAU,CAACC,6CAAX,CAAyD,IAAzD;AACAD,IAAAA,UAAU,CAACE,WAAX,GAAyB,KAAKC,sBAA9B;AACA,WAAOH,UAAP;AACD;;AAED,MAAII,mBAAJ,GAA0B;AACxB,QAAI,CAAC,KAAKC,kBAAN,IAA4B,KAAKA,kBAAL,CAAwBC,MAAxB,GAAiC,CAAjE,EAAoE;AAClE,YAAM,IAAIC,KAAJ,CACH;UACC,KAAKC,eAAgB,aAAY,KAAKH,kBAAmB,EAFvD,CAAN;AAID;;AACD,WAAO,KAAKA,kBAAL,CAAwB,CAAxB,CAAP;AACD;;AA/CmE","sourcesContent":["import BaseModel from \"./BaseModel\";\nimport InputDataObjectType from \"./InputDataObjectType\";\nimport OutputDataObjectType from \"./OutputDataObjectType\";\nimport DataType from \"./DataType\";\nimport Experiment from \"./Experiment\";\n\nconst FIELDS = [\n  \"applicationInterfaceId\",\n  \"applicationName\",\n  \"applicationDescription\",\n  {\n    name: \"applicationModules\",\n    type: \"string\",\n    list: true,\n  },\n  // When saving/updating, the order of the inputs in the applicationInputs\n  // array determines the 'inputOrder' that will be applied to each input on the\n  // backend. Updating 'inputOrder' will have no effect.\n  {\n    name: \"applicationInputs\",\n    type: InputDataObjectType,\n    list: true,\n    default: BaseModel.defaultNewInstance(Array),\n  },\n  {\n    name: \"applicationOutputs\",\n    type: OutputDataObjectType,\n    list: true,\n    default: BaseModel.defaultNewInstance(Array),\n  },\n  {\n    name: \"archiveWorkingDirectory\",\n    type: \"boolean\",\n    default: false,\n  },\n  {\n    name: \"hasOptionalFileInputs\",\n    type: \"boolean\",\n    default: false,\n  },\n  \"userHasWriteAccess\",\n];\n\nexport default class ApplicationInterfaceDefinition extends BaseModel {\n  constructor(data = {}) {\n    super(FIELDS, data);\n  }\n\n  addStandardOutAndStandardErrorOutputs() {\n    const stdout = new OutputDataObjectType({\n      name: \"Standard-Out\",\n      type: DataType.STDOUT,\n      isRequired: true,\n      metaData: {\n        \"file-metadata\": {\n          \"mime-type\": \"text/plain\",\n        },\n      },\n    });\n    const stderr = new OutputDataObjectType({\n      name: \"Standard-Error\",\n      type: DataType.STDERR,\n      isRequired: true,\n      metaData: {\n        \"file-metadata\": {\n          \"mime-type\": \"text/plain\",\n        },\n      },\n    });\n    if (!this.applicationOutputs) {\n      this.applicationOutputs = [];\n    }\n    this.applicationOutputs.push(stdout, stderr);\n  }\n\n  createExperiment() {\n    const experiment = new Experiment();\n    experiment.populateInputsOutputsFromApplicationInterface(this);\n    experiment.executionId = this.applicationInterfaceId;\n    return experiment;\n  }\n\n  get applicationModuleId() {\n    if (!this.applicationModules || this.applicationModules.length > 1) {\n      throw new Error(\n        `No unique application module exists for interface\n        ${this.applicationName}: modules=${this.applicationModules}`\n      );\n    }\n    return this.applicationModules[0];\n  }\n}\n"]}]}