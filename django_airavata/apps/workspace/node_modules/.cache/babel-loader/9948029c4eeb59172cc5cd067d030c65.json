{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/GroupResourceProfile.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/GroupResourceProfile.js","mtime":1638641844319},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.assign\";\nimport BaseModel from \"./BaseModel\";\nimport BatchQueueResourcePolicy from \"./BatchQueueResourcePolicy\";\nimport ComputeResourcePolicy from \"./ComputeResourcePolicy\";\nimport GroupComputeResourcePreference from \"./GroupComputeResourcePreference\";\nvar FIELDS = [\"gatewayId\", \"groupResourceProfileId\", \"groupResourceProfileName\", {\n  name: \"computePreferences\",\n  type: GroupComputeResourcePreference,\n  list: true,\n  default: BaseModel.defaultNewInstance(Array)\n}, {\n  name: \"computeResourcePolicies\",\n  type: ComputeResourcePolicy,\n  list: true,\n  default: BaseModel.defaultNewInstance(Array)\n}, {\n  name: \"batchQueueResourcePolicies\",\n  type: BatchQueueResourcePolicy,\n  list: true,\n  default: BaseModel.defaultNewInstance(Array)\n}, {\n  name: \"creationTime\",\n  type: \"date\"\n}, {\n  name: \"updatedTime\",\n  type: \"date\"\n}, \"defaultCredentialStoreToken\", \"userHasWriteAccess\" // true if current user has write access\n];\nexport default class GroupResourceProfile extends BaseModel {\n  constructor() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(FIELDS, data);\n  }\n\n  getComputePreference(computeResourceId) {\n    return this.computePreferences.find(pref => pref.computeResourceId === computeResourceId);\n  }\n\n  getComputeResourcePolicy(computeResourceId) {\n    return this.computeResourcePolicies.find(pol => pol.computeResourceId === computeResourceId);\n  }\n\n  getBatchQueueResourcePolicies(computeResourceId) {\n    return this.batchQueueResourcePolicies.filter(pol => pol.computeResourceId === computeResourceId);\n  }\n\n  mergeComputeResourcePreference(computeResourcePreference, computeResourcePolicy, batchQueueResourcePolicies) {\n    var _this = this;\n\n    // merge/add computeResourcePreference and computeResourcePolicy\n    var existingComputeResourcePreference = this.computePreferences.find(pref => pref.computeResourceId === computeResourcePreference.computeResourceId);\n\n    if (existingComputeResourcePreference) {\n      Object.assign(existingComputeResourcePreference, computeResourcePreference);\n    } else {\n      this.computePreferences.push(computeResourcePreference);\n    }\n\n    var existingComputeResourcePolicy = this.computeResourcePolicies.find(pol => pol.computeResourceId === computeResourcePolicy.computeResourceId);\n\n    if (existingComputeResourcePolicy) {\n      Object.assign(existingComputeResourcePolicy, computeResourcePolicy);\n    } else {\n      this.computeResourcePolicies.push(computeResourcePolicy);\n    } // merge/add/remove batchQueueResourcePolicies\n\n\n    var existingBatchQueueResourcePolicies = this.batchQueueResourcePolicies.filter(pol => pol.computeResourceId === computeResourcePreference.computeResourceId);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      var _loop = function _loop() {\n        var batchQueueResourcePolicy = _step.value;\n        var existingBatchQueueResourcePolicy = existingBatchQueueResourcePolicies.find(pol => pol.queuename === batchQueueResourcePolicy.queuename);\n\n        if (existingBatchQueueResourcePolicy) {\n          Object.assign(existingBatchQueueResourcePolicy, batchQueueResourcePolicy);\n          var existingBatchQueueResourcePolicyIndex = existingBatchQueueResourcePolicies.findIndex(pol => pol.queuename === batchQueueResourcePolicy.queuename);\n\n          if (existingBatchQueueResourcePolicyIndex >= 0) {\n            existingBatchQueueResourcePolicies.splice(existingBatchQueueResourcePolicyIndex, 1);\n          }\n        } else {\n          _this.batchQueueResourcePolicies.push(batchQueueResourcePolicy);\n        }\n      };\n\n      for (var _iterator = batchQueueResourcePolicies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        _loop();\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      var _loop2 = function _loop2() {\n        var existingBatchQueueResourcePolicy = _step2.value;\n\n        var existingBatchQueueResourcePolicyIndex = _this.batchQueueResourcePolicies.findIndex(pol => pol.computeResourceId === existingBatchQueueResourcePolicy.computeResourceId && pol.queuename === existingBatchQueueResourcePolicy.queuename);\n\n        if (existingBatchQueueResourcePolicyIndex >= 0) {\n          _this.batchQueueResourcePolicies.splice(existingBatchQueueResourcePolicyIndex, 1);\n        }\n      };\n\n      for (var _iterator2 = existingBatchQueueResourcePolicies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        _loop2();\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n  /**\n   * Remove compute resource preference, compute resource policy and batch queue policies.\n   * @param {string} computeResourceId\n   * @returns {boolean} true if this GroupResourceProfile was changed\n   */\n\n\n  removeComputeResource(computeResourceId) {\n    var removedChildren = false;\n    var existingComputeResourcePreferenceIndex = this.computePreferences.findIndex(pref => pref.computeResourceId === computeResourceId);\n\n    if (existingComputeResourcePreferenceIndex >= 0) {\n      this.computePreferences.splice(existingComputeResourcePreferenceIndex, 1);\n      removedChildren = true;\n    }\n\n    var existingComputeResourcePolicyIndex = this.computeResourcePolicies.findIndex(pol => pol.computeResourceId === computeResourceId);\n\n    if (existingComputeResourcePolicyIndex >= 0) {\n      this.computeResourcePolicies.splice(existingComputeResourcePolicyIndex, 1);\n      removedChildren = true;\n    }\n\n    var existingBatchQueueResourcePolicies = this.batchQueueResourcePolicies.filter(pol => pol.computeResourceId === computeResourceId);\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = existingBatchQueueResourcePolicies[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var existingBatchQueueResourcePolicy = _step3.value;\n        var existingBatchQueueResourcePolicyIndex = this.batchQueueResourcePolicies.indexOf(existingBatchQueueResourcePolicy);\n        this.batchQueueResourcePolicies.splice(existingBatchQueueResourcePolicyIndex, 1);\n        removedChildren = true;\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    return removedChildren;\n  }\n\n}",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/GroupResourceProfile.js"],"names":["BaseModel","BatchQueueResourcePolicy","ComputeResourcePolicy","GroupComputeResourcePreference","FIELDS","name","type","list","default","defaultNewInstance","Array","GroupResourceProfile","constructor","data","getComputePreference","computeResourceId","computePreferences","find","pref","getComputeResourcePolicy","computeResourcePolicies","pol","getBatchQueueResourcePolicies","batchQueueResourcePolicies","filter","mergeComputeResourcePreference","computeResourcePreference","computeResourcePolicy","existingComputeResourcePreference","Object","assign","push","existingComputeResourcePolicy","existingBatchQueueResourcePolicies","batchQueueResourcePolicy","existingBatchQueueResourcePolicy","queuename","existingBatchQueueResourcePolicyIndex","findIndex","splice","removeComputeResource","removedChildren","existingComputeResourcePreferenceIndex","existingComputeResourcePolicyIndex","indexOf"],"mappings":"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","sourcesContent":["import BaseModel from \"./BaseModel\";\nimport BatchQueueResourcePolicy from \"./BatchQueueResourcePolicy\";\nimport ComputeResourcePolicy from \"./ComputeResourcePolicy\";\nimport GroupComputeResourcePreference from \"./GroupComputeResourcePreference\";\n\nconst FIELDS = [\n  \"gatewayId\",\n  \"groupResourceProfileId\",\n  \"groupResourceProfileName\",\n  {\n    name: \"computePreferences\",\n    type: GroupComputeResourcePreference,\n    list: true,\n    default: BaseModel.defaultNewInstance(Array),\n  },\n  {\n    name: \"computeResourcePolicies\",\n    type: ComputeResourcePolicy,\n    list: true,\n    default: BaseModel.defaultNewInstance(Array),\n  },\n  {\n    name: \"batchQueueResourcePolicies\",\n    type: BatchQueueResourcePolicy,\n    list: true,\n    default: BaseModel.defaultNewInstance(Array),\n  },\n  {\n    name: \"creationTime\",\n    type: \"date\",\n  },\n  {\n    name: \"updatedTime\",\n    type: \"date\",\n  },\n  \"defaultCredentialStoreToken\",\n  \"userHasWriteAccess\", // true if current user has write access\n];\n\nexport default class GroupResourceProfile extends BaseModel {\n  constructor(data = {}) {\n    super(FIELDS, data);\n  }\n\n  getComputePreference(computeResourceId) {\n    return this.computePreferences.find(\n      (pref) => pref.computeResourceId === computeResourceId\n    );\n  }\n\n  getComputeResourcePolicy(computeResourceId) {\n    return this.computeResourcePolicies.find(\n      (pol) => pol.computeResourceId === computeResourceId\n    );\n  }\n\n  getBatchQueueResourcePolicies(computeResourceId) {\n    return this.batchQueueResourcePolicies.filter(\n      (pol) => pol.computeResourceId === computeResourceId\n    );\n  }\n\n  mergeComputeResourcePreference(\n    computeResourcePreference,\n    computeResourcePolicy,\n    batchQueueResourcePolicies\n  ) {\n    // merge/add computeResourcePreference and computeResourcePolicy\n    const existingComputeResourcePreference = this.computePreferences.find(\n      (pref) =>\n        pref.computeResourceId === computeResourcePreference.computeResourceId\n    );\n    if (existingComputeResourcePreference) {\n      Object.assign(\n        existingComputeResourcePreference,\n        computeResourcePreference\n      );\n    } else {\n      this.computePreferences.push(computeResourcePreference);\n    }\n    const existingComputeResourcePolicy = this.computeResourcePolicies.find(\n      (pol) => pol.computeResourceId === computeResourcePolicy.computeResourceId\n    );\n    if (existingComputeResourcePolicy) {\n      Object.assign(existingComputeResourcePolicy, computeResourcePolicy);\n    } else {\n      this.computeResourcePolicies.push(computeResourcePolicy);\n    }\n    // merge/add/remove batchQueueResourcePolicies\n    const existingBatchQueueResourcePolicies = this.batchQueueResourcePolicies.filter(\n      (pol) =>\n        pol.computeResourceId === computeResourcePreference.computeResourceId\n    );\n    for (const batchQueueResourcePolicy of batchQueueResourcePolicies) {\n      const existingBatchQueueResourcePolicy = existingBatchQueueResourcePolicies.find(\n        (pol) => pol.queuename === batchQueueResourcePolicy.queuename\n      );\n      if (existingBatchQueueResourcePolicy) {\n        Object.assign(\n          existingBatchQueueResourcePolicy,\n          batchQueueResourcePolicy\n        );\n        const existingBatchQueueResourcePolicyIndex = existingBatchQueueResourcePolicies.findIndex(\n          (pol) => pol.queuename === batchQueueResourcePolicy.queuename\n        );\n        if (existingBatchQueueResourcePolicyIndex >= 0) {\n          existingBatchQueueResourcePolicies.splice(\n            existingBatchQueueResourcePolicyIndex,\n            1\n          );\n        }\n      } else {\n        this.batchQueueResourcePolicies.push(batchQueueResourcePolicy);\n      }\n    }\n    for (const existingBatchQueueResourcePolicy of existingBatchQueueResourcePolicies) {\n      const existingBatchQueueResourcePolicyIndex = this.batchQueueResourcePolicies.findIndex(\n        (pol) =>\n          pol.computeResourceId ===\n            existingBatchQueueResourcePolicy.computeResourceId &&\n          pol.queuename === existingBatchQueueResourcePolicy.queuename\n      );\n      if (existingBatchQueueResourcePolicyIndex >= 0) {\n        this.batchQueueResourcePolicies.splice(\n          existingBatchQueueResourcePolicyIndex,\n          1\n        );\n      }\n    }\n  }\n\n  /**\n   * Remove compute resource preference, compute resource policy and batch queue policies.\n   * @param {string} computeResourceId\n   * @returns {boolean} true if this GroupResourceProfile was changed\n   */\n  removeComputeResource(computeResourceId) {\n    let removedChildren = false;\n    const existingComputeResourcePreferenceIndex = this.computePreferences.findIndex(\n      (pref) => pref.computeResourceId === computeResourceId\n    );\n    if (existingComputeResourcePreferenceIndex >= 0) {\n      this.computePreferences.splice(existingComputeResourcePreferenceIndex, 1);\n      removedChildren = true;\n    }\n    const existingComputeResourcePolicyIndex = this.computeResourcePolicies.findIndex(\n      (pol) => pol.computeResourceId === computeResourceId\n    );\n    if (existingComputeResourcePolicyIndex >= 0) {\n      this.computeResourcePolicies.splice(\n        existingComputeResourcePolicyIndex,\n        1\n      );\n      removedChildren = true;\n    }\n    const existingBatchQueueResourcePolicies = this.batchQueueResourcePolicies.filter(\n      (pol) => pol.computeResourceId === computeResourceId\n    );\n    for (const existingBatchQueueResourcePolicy of existingBatchQueueResourcePolicies) {\n      const existingBatchQueueResourcePolicyIndex = this.batchQueueResourcePolicies.indexOf(\n        existingBatchQueueResourcePolicy\n      );\n      this.batchQueueResourcePolicies.splice(\n        existingBatchQueueResourcePolicyIndex,\n        1\n      );\n      removedChildren = true;\n    }\n\n    return removedChildren;\n  }\n}\n"]}]}