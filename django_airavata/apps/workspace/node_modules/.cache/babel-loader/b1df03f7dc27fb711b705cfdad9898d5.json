{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/containers/RecentExperimentsContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/containers/RecentExperimentsContainer.vue","mtime":1638641844343},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport urls from \"../utils/urls\";\nimport { errors, models, services, utils } from \"django-airavata-api\";\nimport { components } from \"django-airavata-common-ui\";\nexport default {\n  name: \"recent-experiments-container\",\n  props: {\n    viewAllExperiments: String,\n    username: String\n  },\n  components: {\n    sidebar: components.Sidebar,\n    \"sidebar-header\": components.SidebarHeader,\n    \"sidebar-feed\": components.SidebarFeed,\n    \"experiment-status-badge\": components.ExperimentStatusBadge\n  },\n  created: function created() {\n    this.pollExperiments();\n  },\n  methods: {\n    pollExperiments: function pollExperiments() {\n      var _this = this;\n\n      this.loadExperiments().then(function () {\n        setTimeout(function () {\n          this.pollExperiments();\n        }.bind(_this), _this.refreshDelay);\n      }).catch(function () {// If loading experiments fails, just ignore. This can happen if the\n        // user navigates away from the page while a request is executing.\n      });\n    },\n    loadExperiments: function loadExperiments() {\n      var _this2 = this;\n\n      return services.ExperimentSearchService.list(_defineProperty({\n        limit: 5,\n        offset: 0\n      }, models.ExperimentSearchFields.USER_NAME.name, this.username), {\n        showSpinner: false,\n        ignoreErrors: true\n      }).then(function (experiments) {\n        _this2.feedItems = experiments.results.map(function (e) {\n          return {\n            id: e.experimentId,\n            statusName: e.experimentStatus.name,\n            title: e.name,\n            url: urls.viewExperiment(e),\n            timestamp: e.statusUpdateTime,\n            interfaceId: e.executionId,\n            isProgressing: e.convertToExperiment().isProgressing,\n            type: null\n          };\n        }); // Load any application interfaces that haven't been loaded yet, so that\n        // we can display the applicationName of each experiment\n\n        var unloadedInterfaceIds = {};\n\n        _this2.feedItems.filter(function (i) {\n          return !(i.interfaceId in _this2.applicationInterfaces);\n        }).forEach(function (i) {\n          return unloadedInterfaceIds[i.interfaceId] = true;\n        });\n\n        Promise.all(Object.keys(unloadedInterfaceIds).map(function (interfaceId) {\n          return _this2.loadApplicationInterface(interfaceId);\n        })).then(function () {\n          _this2.populateApplicationNames();\n        });\n      });\n    },\n    loadApplicationInterface: function loadApplicationInterface(interfaceId) {\n      var _this3 = this;\n\n      return services.ApplicationInterfaceService.retrieve({\n        lookup: interfaceId\n      }, {\n        showSpinner: false,\n        ignoreErrors: true\n      }).then(function (applicationInterface) {\n        _this3.applicationInterfaces[interfaceId] = applicationInterface;\n      }).catch(function (error) {\n        // ignore if missing\n        if (errors.ErrorUtils.isNotFoundError(error)) {\n          _this3.applicationInterfaces[interfaceId] = null;\n        } else {\n          throw error;\n        }\n      }).catch(utils.FetchUtils.reportError);\n    },\n    populateApplicationNames: function populateApplicationNames() {\n      var _this4 = this;\n\n      this.feedItems.filter(function (i) {\n        return i.type === null;\n      }).forEach(function (feedItem) {\n        if (feedItem.interfaceId in _this4.applicationInterfaces && _this4.applicationInterfaces[feedItem.interfaceId]) {\n          feedItem.type = _this4.applicationInterfaces[feedItem.interfaceId].applicationName;\n        }\n      });\n    }\n  },\n  data: function data() {\n    return {\n      feedItems: null,\n      applicationInterfaces: {},\n      refreshDelay: 10000\n    };\n  }\n};",{"version":3,"sources":["RecentExperimentsContainer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <sidebar>\n    <sidebar-header\n      title=\"My Recent Experiments\"\n      :view-all-url=\"viewAllExperiments\"\n    />\n    <sidebar-feed :feed-items=\"feedItems\">\n      <template slot=\"description\" slot-scope=\"slotProps\">\n        <experiment-status-badge :status-name=\"slotProps.feedItem.statusName\" />\n        <i\n          v-if=\"slotProps.feedItem.isProgressing\"\n          class=\"fa fa-sync-alt fa-spin ml-1\"\n        ></i>\n      </template>\n    </sidebar-feed>\n  </sidebar>\n</template>\n\n<script>\nimport urls from \"../utils/urls\";\nimport { errors, models, services, utils } from \"django-airavata-api\";\nimport { components } from \"django-airavata-common-ui\";\nexport default {\n  name: \"recent-experiments-container\",\n  props: {\n    viewAllExperiments: String,\n    username: String,\n  },\n  components: {\n    sidebar: components.Sidebar,\n    \"sidebar-header\": components.SidebarHeader,\n    \"sidebar-feed\": components.SidebarFeed,\n    \"experiment-status-badge\": components.ExperimentStatusBadge,\n  },\n  created() {\n    this.pollExperiments();\n  },\n  methods: {\n    pollExperiments() {\n      this.loadExperiments()\n        .then(() => {\n          setTimeout(\n            function () {\n              this.pollExperiments();\n            }.bind(this),\n            this.refreshDelay\n          );\n        })\n        .catch(() => {\n          // If loading experiments fails, just ignore. This can happen if the\n          // user navigates away from the page while a request is executing.\n        });\n    },\n    loadExperiments() {\n      return services.ExperimentSearchService.list(\n        {\n          limit: 5,\n          offset: 0,\n          [models.ExperimentSearchFields.USER_NAME.name]: this.username,\n        },\n        {\n          showSpinner: false,\n          ignoreErrors: true,\n        }\n      ).then((experiments) => {\n        this.feedItems = experiments.results.map((e) => {\n          return {\n            id: e.experimentId,\n            statusName: e.experimentStatus.name,\n            title: e.name,\n            url: urls.viewExperiment(e),\n            timestamp: e.statusUpdateTime,\n            interfaceId: e.executionId,\n            isProgressing: e.convertToExperiment().isProgressing,\n            type: null,\n          };\n        });\n        // Load any application interfaces that haven't been loaded yet, so that\n        // we can display the applicationName of each experiment\n        const unloadedInterfaceIds = {};\n        this.feedItems\n          .filter((i) => !(i.interfaceId in this.applicationInterfaces))\n          .forEach((i) => (unloadedInterfaceIds[i.interfaceId] = true));\n        Promise.all(\n          Object.keys(unloadedInterfaceIds).map((interfaceId) => {\n            return this.loadApplicationInterface(interfaceId);\n          })\n        ).then(() => {\n          this.populateApplicationNames();\n        });\n      });\n    },\n    loadApplicationInterface(interfaceId) {\n      return services.ApplicationInterfaceService.retrieve(\n        {\n          lookup: interfaceId,\n        },\n        {\n          showSpinner: false,\n          ignoreErrors: true,\n        }\n      )\n        .then((applicationInterface) => {\n          this.applicationInterfaces[interfaceId] = applicationInterface;\n        })\n        .catch((error) => {\n          // ignore if missing\n          if (errors.ErrorUtils.isNotFoundError(error)) {\n            this.applicationInterfaces[interfaceId] = null;\n          } else {\n            throw error;\n          }\n        })\n        .catch(utils.FetchUtils.reportError);\n    },\n    populateApplicationNames() {\n      this.feedItems\n        .filter((i) => i.type === null)\n        .forEach((feedItem) => {\n          if (\n            feedItem.interfaceId in this.applicationInterfaces &&\n            this.applicationInterfaces[feedItem.interfaceId]\n          ) {\n            feedItem.type = this.applicationInterfaces[\n              feedItem.interfaceId\n            ].applicationName;\n          }\n        });\n    },\n  },\n  data() {\n    return {\n      feedItems: null,\n      applicationInterfaces: {},\n      refreshDelay: 10000,\n    };\n  },\n};\n</script>\n"],"sourceRoot":"static/django_airavata_workspace/js/containers"}]}