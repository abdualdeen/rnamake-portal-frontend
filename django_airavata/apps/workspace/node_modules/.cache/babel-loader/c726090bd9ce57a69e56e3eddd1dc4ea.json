{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/ExperimentSummary.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/ExperimentSummary.vue","mtime":1638641844339},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { models, services } from \"django-airavata-api\";\nimport { components, notifications } from \"django-airavata-common-ui\";\nimport OutputDisplayContainer from \"./output-displays/OutputDisplayContainer\";\nimport urls from \"../../utils/urls\";\nimport moment from \"moment\";\nimport ExperimentStorageViewContainer from \"../storage/ExperimentStorageViewContainer.vue\";\nimport DataProductViewer from \"django-airavata-common-ui/js/components/DataProductViewer.vue\";\nexport default {\n  name: \"experiment-summary\",\n  props: {\n    fullExperiment: {\n      type: models.FullExperiment,\n      required: true\n    },\n    launching: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      localFullExperiment: this.fullExperiment.clone()\n    };\n  },\n  components: {\n    \"clipboard-copy-link\": components.ClipboardCopyLink,\n    \"share-button\": components.ShareButton,\n    OutputDisplayContainer: OutputDisplayContainer,\n    ExperimentStorageViewContainer: ExperimentStorageViewContainer,\n    DataProductViewer: DataProductViewer\n  },\n  computed: {\n    inputDataProducts: function inputDataProducts() {\n      var _this = this;\n\n      var result = {};\n\n      if (this.localFullExperiment && this.localFullExperiment.inputDataProducts) {\n        this.localFullExperiment.experiment.experimentInputs.forEach(function (input) {\n          result[input.name] = _this.getDataProducts(input, _this.localFullExperiment.inputDataProducts);\n        });\n      }\n\n      return result;\n    },\n    outputDataProducts: function outputDataProducts() {\n      var _this2 = this;\n\n      var result = {};\n\n      if (this.localFullExperiment && this.localFullExperiment.outputDataProducts) {\n        this.localFullExperiment.experiment.experimentOutputs.forEach(function (output) {\n          result[output.name] = _this2.getDataProducts(output, _this2.localFullExperiment.outputDataProducts);\n        });\n      }\n\n      return result;\n    },\n    creationTime: function creationTime() {\n      return moment(this.localFullExperiment.experiment.creationTime).fromNow();\n    },\n    lastModifiedTime: function lastModifiedTime() {\n      return moment(this.localFullExperiment.experimentStatus.timeOfStateChange).fromNow();\n    },\n    experiment: function experiment() {\n      return this.localFullExperiment.experiment;\n    },\n    jobCreationTimes: function jobCreationTimes() {\n      return this.localFullExperiment.jobDetails.map(function (jobDetail) {\n        return moment(jobDetail.creationTime).fromNow();\n      });\n    },\n    editLink: function editLink() {\n      return urls.editExperiment(this.experiment);\n    },\n    isEditable: function isEditable() {\n      return this.experiment.isEditable && this.localFullExperiment.applicationName && !this.launching;\n    },\n    isLaunchable: function isLaunchable() {\n      return this.isEditable;\n    },\n    isClonable: function isClonable() {\n      return this.localFullExperiment.applicationName;\n    },\n    isCancelable: function isCancelable() {\n      return this.localFullExperiment.experiment.isCancelable;\n    }\n  },\n  methods: {\n    loadExperiment: function loadExperiment() {\n      var _this3 = this;\n\n      return services.FullExperimentService.retrieve({\n        lookup: this.localFullExperiment.experiment.experimentId\n      }, {\n        ignoreErrors: true,\n        showSpinner: false\n      }).then(function (exp) {\n        return _this3.localFullExperiment = exp;\n      });\n    },\n    initPollingExperiment: function initPollingExperiment() {\n      var pollExperiment = function () {\n        var _this4 = this;\n\n        if (this.launching && !this.localFullExperiment.experiment.hasLaunched || this.localFullExperiment.experiment.isProgressing) {\n          this.loadExperiment().then(function () {\n            setTimeout(pollExperiment.bind(_this4), 3000);\n          }).catch(function () {\n            // Wait 30 seconds after an error and then try again\n            setTimeout(pollExperiment.bind(_this4), 30000);\n          });\n        }\n      }.bind(this);\n\n      setTimeout(pollExperiment, 3000);\n    },\n    clone: function clone() {\n      services.ExperimentService.clone({\n        lookup: this.experiment.experimentId\n      }).then(function (clonedExperiment) {\n        urls.navigateToEditExperiment(clonedExperiment);\n      });\n    },\n    launch: function launch() {\n      var _this5 = this;\n\n      services.ExperimentService.launch({\n        lookup: this.experiment.experimentId\n      }).then(function () {\n        _this5.$emit(\"Launched\");\n      });\n    },\n    cancel: function cancel() {\n      services.ExperimentService.cancel({\n        lookup: this.experiment.experimentId\n      }).then(function () {\n        notifications.NotificationList.add(new notifications.Notification({\n          type: \"SUCCESS\",\n          message: \"Cancel-experiment requested\",\n          duration: 5\n        }));\n      });\n    },\n    getDataProducts: function getDataProducts(io, collection) {\n      if (!io.value || !collection) {\n        return [];\n      }\n\n      var dataProducts = null;\n\n      if (io.type === models.DataType.URI_COLLECTION) {\n        var dataProductURIs = io.value.split(\",\");\n        dataProducts = dataProductURIs.map(function (uri) {\n          return collection.find(function (dp) {\n            return dp.productUri === uri;\n          });\n        });\n      } else {\n        var dataProductURI = io.value;\n        dataProducts = collection.filter(function (dp) {\n          return dp.productUri === dataProductURI;\n        });\n      }\n\n      return dataProducts ? dataProducts.filter(function (dp) {\n        return dp ? true : false;\n      }) : [];\n    }\n  },\n  watch: {\n    launching: function launching(val) {\n      if (val == true) {\n        this.initPollingExperiment();\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.initPollingExperiment();\n  }\n};",{"version":3,"sources":["ExperimentSummary.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col-auto mr-auto\">\n        <h1 class=\"h4 mb-4\">\n          <slot name=\"title\">Experiment Summary</slot>\n        </h1>\n      </div>\n      <div class=\"col-auto\">\n        <share-button :entity-id=\"experiment.experimentId\" />\n        <b-link v-if=\"isEditable\" class=\"btn btn-primary\" :href=\"editLink\">\n          Edit\n          <i class=\"fa fa-edit\" aria-hidden=\"true\"></i>\n        </b-link>\n        <b-link v-if=\"isLaunchable\" class=\"btn btn-primary\" @click=\"launch\">\n          Launch\n          <i class=\"fa fa-running\" aria-hidden=\"true\"></i>\n        </b-link>\n        <b-btn v-if=\"isClonable\" variant=\"primary\" @click=\"clone\">\n          Clone\n          <i class=\"fa fa-copy\" aria-hidden=\"true\"></i>\n        </b-btn>\n        <b-btn v-if=\"isCancelable\" variant=\"primary\" @click=\"cancel\">\n          Cancel\n          <i class=\"fa fa-window-close\" aria-hidden=\"true\"></i>\n        </b-btn>\n      </div>\n    </div>\n    <template v-for=\"output in experiment.experimentOutputs\">\n      <div\n        class=\"row\"\n        v-if=\"\n          experiment.isFinished && outputDataProducts[output.name].length > 0\n        \"\n        :key=\"output.name\"\n      >\n        <div class=\"col\">\n          <output-display-container\n            :experiment-output=\"output\"\n            :data-products=\"outputDataProducts[output.name]\"\n            :output-views=\"localFullExperiment.outputViews[output.name]\"\n            :experiment-id=\"experiment.experimentId\"\n          />\n        </div>\n      </div>\n    </template>\n    <div class=\"row\" v-if=\"experiment.isFinished\">\n      <div class=\"col\">\n        <experiment-storage-view-container\n          :experimentId=\"experiment.experimentId\"\n        />\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <div class=\"card border-default\">\n          <div class=\"card-body\">\n            <table class=\"table\">\n              <tbody>\n                <tr>\n                  <th scope=\"row\">Name</th>\n                  <td>\n                    <div :title=\"experiment.experimentId\">\n                      {{ experiment.experimentName }}\n                    </div>\n                    <small class=\"text-muted\">\n                      ID: {{ experiment.experimentId }} (<clipboard-copy-link\n                        :text=\"experiment.experimentId\"\n                        :link-classes=\"['text-reset']\"\n                      >\n                        copy\n                        <span slot=\"icon\"></span>\n                        <span slot=\"tooltip\"\n                          >Copied ID!</span\n                        > </clipboard-copy-link\n                      >)\n                    </small>\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">Description</th>\n                  <td>{{ experiment.description }}</td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">Project</th>\n                  <td v-if=\"localFullExperiment.project\">\n                    {{ localFullExperiment.projectName }}\n                  </td>\n                  <td v-else>\n                    <em>You don't have access to this project.</em>\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">Owner</th>\n                  <td>{{ experiment.userName }}</td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">Application</th>\n                  <td v-if=\"localFullExperiment.applicationName\">\n                    {{ localFullExperiment.applicationName }}\n                  </td>\n                  <td v-else class=\"font-italic text-muted\">\n                    Unable to load interface\n                    {{ localFullExperiment.experiment.executionId }}\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">Compute Resource</th>\n                  <td v-if=\"localFullExperiment.computeHostName\">\n                    {{ localFullExperiment.computeHostName }}\n                  </td>\n                  <td v-else class=\"font-italic text-muted\">\n                    Unable to load compute resource\n                    {{ localFullExperiment.resourceHostId }}\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">Experiment Status</th>\n                  <td>\n                    <template\n                      v-if=\"localFullExperiment.experiment.isProgressing\"\n                    >\n                      <i class=\"fa fa-sync-alt fa-spin\"></i>\n                      <span class=\"sr-only\">Progressing...</span>\n                    </template>\n                    {{ localFullExperiment.experimentStatusName }}\n                  </td>\n                </tr>\n                <tr\n                  v-if=\"\n                    localFullExperiment.jobDetails &&\n                    localFullExperiment.jobDetails.length > 0\n                  \"\n                >\n                  <th scope=\"row\">Job</th>\n                  <td>\n                    <table class=\"table\">\n                      <thead>\n                        <th>Name</th>\n                        <th>ID</th>\n                        <th>Status</th>\n                        <th>Creation Time</th>\n                      </thead>\n                      <tr\n                        v-for=\"(jobDetail,\n                        index) in localFullExperiment.jobDetails\"\n                        :key=\"jobDetail.jobId\"\n                      >\n                        <td>{{ jobDetail.jobName }}</td>\n                        <td>{{ jobDetail.jobId }}</td>\n                        <td>{{ jobDetail.jobStatusStateName }}</td>\n                        <td>\n                          <span :title=\"jobDetail.creationTime.toString()\">{{\n                            jobCreationTimes[index]\n                          }}</span>\n                        </td>\n                      </tr>\n                    </table>\n                  </td>\n                </tr>\n                <!--  TODO: leave this out for now -->\n                <!-- <tr>\n                                    <th scope=\"row\">Notification List</th>\n                                    <td>{{ experiment.emailAddresses\n                                            ? experiment.emailAddresses.join(\", \")\n                                            : '' }}</td>\n                                </tr> -->\n                <tr>\n                  <th scope=\"row\">Creation Time</th>\n                  <td>\n                    <span :title=\"experiment.creationTime.toString()\">{{\n                      creationTime\n                    }}</span>\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">Last Modified Time</th>\n                  <td>\n                    <span\n                      :title=\"\n                        localFullExperiment.experimentStatus.timeOfStateChange.toString()\n                      \"\n                      >{{ lastModifiedTime }}</span\n                    >\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">Wall Time Limit</th>\n                  <td>\n                    {{\n                      experiment.userConfigurationData\n                        .computationalResourceScheduling.wallTimeLimit\n                    }}\n                    minutes\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">CPU Count</th>\n                  <td>\n                    {{\n                      experiment.userConfigurationData\n                        .computationalResourceScheduling.totalCPUCount\n                    }}\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">Node Count</th>\n                  <td>\n                    {{\n                      experiment.userConfigurationData\n                        .computationalResourceScheduling.nodeCount\n                    }}\n                  </td>\n                </tr>\n                <tr\n                  v-if=\"\n                    experiment.userConfigurationData\n                      .computationalResourceScheduling.totalPhysicalMemory\n                  \"\n                >\n                  <th scope=\"row\">Total Physical Memory</th>\n                  <td>\n                    {{\n                      experiment.userConfigurationData.computationalResourceScheduling.totalPhysicalMemory.toLocaleString()\n                    }}\n                    MB\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">Queue</th>\n                  <td>\n                    {{\n                      experiment.userConfigurationData\n                        .computationalResourceScheduling.queueName\n                    }}\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">Inputs</th>\n                  <td>\n                    <ul>\n                      <li\n                        v-for=\"input in experiment.experimentInputs\"\n                        :key=\"input.name\"\n                      >\n                        {{ input.name }}:\n                        <template v-if=\"input.type.isSimpleValueType\">\n                          <span class=\"text-break\">{{ input.value }}</span>\n                        </template>\n                        <data-product-viewer\n                          v-for=\"dp in inputDataProducts[input.name]\"\n                          v-else-if=\"input.type.isFileValueType\"\n                          :data-product=\"dp\"\n                          :input-file=\"true\"\n                          :key=\"dp.productUri\"\n                        />\n                      </li>\n                    </ul>\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">Errors</th>\n                  <td>\n                    <b-card\n                      v-for=\"error in experiment.errors\"\n                      :key=\"error.errorId\"\n                      header=\"Error\"\n                    >\n                      <p>{{ error.userFriendlyMessage }}</p>\n                    </b-card>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { models, services } from \"django-airavata-api\";\nimport { components, notifications } from \"django-airavata-common-ui\";\nimport OutputDisplayContainer from \"./output-displays/OutputDisplayContainer\";\nimport urls from \"../../utils/urls\";\n\nimport moment from \"moment\";\nimport ExperimentStorageViewContainer from \"../storage/ExperimentStorageViewContainer.vue\";\nimport DataProductViewer from \"django-airavata-common-ui/js/components/DataProductViewer.vue\";\n\nexport default {\n  name: \"experiment-summary\",\n  props: {\n    fullExperiment: {\n      type: models.FullExperiment,\n      required: true,\n    },\n    launching: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      localFullExperiment: this.fullExperiment.clone(),\n    };\n  },\n  components: {\n    \"clipboard-copy-link\": components.ClipboardCopyLink,\n    \"share-button\": components.ShareButton,\n    OutputDisplayContainer,\n    ExperimentStorageViewContainer,\n    DataProductViewer,\n  },\n  computed: {\n    inputDataProducts() {\n      const result = {};\n      if (\n        this.localFullExperiment &&\n        this.localFullExperiment.inputDataProducts\n      ) {\n        this.localFullExperiment.experiment.experimentInputs.forEach(\n          (input) => {\n            result[input.name] = this.getDataProducts(\n              input,\n              this.localFullExperiment.inputDataProducts\n            );\n          }\n        );\n      }\n      return result;\n    },\n    outputDataProducts() {\n      const result = {};\n      if (\n        this.localFullExperiment &&\n        this.localFullExperiment.outputDataProducts\n      ) {\n        this.localFullExperiment.experiment.experimentOutputs.forEach(\n          (output) => {\n            result[output.name] = this.getDataProducts(\n              output,\n              this.localFullExperiment.outputDataProducts\n            );\n          }\n        );\n      }\n      return result;\n    },\n    creationTime: function () {\n      return moment(this.localFullExperiment.experiment.creationTime).fromNow();\n    },\n    lastModifiedTime: function () {\n      return moment(\n        this.localFullExperiment.experimentStatus.timeOfStateChange\n      ).fromNow();\n    },\n    experiment: function () {\n      return this.localFullExperiment.experiment;\n    },\n    jobCreationTimes: function () {\n      return this.localFullExperiment.jobDetails.map((jobDetail) =>\n        moment(jobDetail.creationTime).fromNow()\n      );\n    },\n    editLink() {\n      return urls.editExperiment(this.experiment);\n    },\n    isEditable() {\n      return (\n        this.experiment.isEditable &&\n        this.localFullExperiment.applicationName &&\n        !this.launching\n      );\n    },\n    isLaunchable() {\n      return this.isEditable;\n    },\n    isClonable() {\n      return this.localFullExperiment.applicationName;\n    },\n    isCancelable() {\n      return this.localFullExperiment.experiment.isCancelable;\n    },\n  },\n  methods: {\n    loadExperiment: function () {\n      return services.FullExperimentService.retrieve(\n        { lookup: this.localFullExperiment.experiment.experimentId },\n        { ignoreErrors: true, showSpinner: false }\n      ).then((exp) => (this.localFullExperiment = exp));\n    },\n    initPollingExperiment: function () {\n      var pollExperiment = function () {\n        if (\n          (this.launching &&\n            !this.localFullExperiment.experiment.hasLaunched) ||\n          this.localFullExperiment.experiment.isProgressing\n        ) {\n          this.loadExperiment()\n            .then(() => {\n              setTimeout(pollExperiment.bind(this), 3000);\n            })\n            .catch(() => {\n              // Wait 30 seconds after an error and then try again\n              setTimeout(pollExperiment.bind(this), 30000);\n            });\n        }\n      }.bind(this);\n      setTimeout(pollExperiment, 3000);\n    },\n    clone() {\n      services.ExperimentService.clone({\n        lookup: this.experiment.experimentId,\n      }).then((clonedExperiment) => {\n        urls.navigateToEditExperiment(clonedExperiment);\n      });\n    },\n    launch() {\n      services.ExperimentService.launch({\n        lookup: this.experiment.experimentId,\n      }).then(() => {\n        this.$emit(\"Launched\");\n      });\n    },\n    cancel() {\n      services.ExperimentService.cancel({\n        lookup: this.experiment.experimentId,\n      }).then(() => {\n        notifications.NotificationList.add(\n          new notifications.Notification({\n            type: \"SUCCESS\",\n            message: \"Cancel-experiment requested\",\n            duration: 5,\n          })\n        );\n      });\n    },\n    getDataProducts(io, collection) {\n      if (!io.value || !collection) {\n        return [];\n      }\n      let dataProducts = null;\n      if (io.type === models.DataType.URI_COLLECTION) {\n        const dataProductURIs = io.value.split(\",\");\n        dataProducts = dataProductURIs.map((uri) =>\n          collection.find((dp) => dp.productUri === uri)\n        );\n      } else {\n        const dataProductURI = io.value;\n        dataProducts = collection.filter(\n          (dp) => dp.productUri === dataProductURI\n        );\n      }\n      return dataProducts\n        ? dataProducts.filter((dp) => (dp ? true : false))\n        : [];\n    },\n  },\n  watch: {\n    launching: function (val) {\n      if (val == true) {\n        this.initPollingExperiment();\n      }\n    },\n  },\n  mounted: function () {\n    this.initPollingExperiment();\n  },\n};\n</script>\n"],"sourceRoot":"static/django_airavata_workspace/js/components/experiment"}]}