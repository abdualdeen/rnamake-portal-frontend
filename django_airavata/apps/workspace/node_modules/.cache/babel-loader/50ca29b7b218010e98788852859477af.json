{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/SharedEntityEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/SharedEntityEditor.vue","mtime":1638641844579},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { models, utils, session } from \"django-airavata-api\";\nimport AutocompleteTextInput from \"./AutocompleteTextInput.vue\";\nimport VModelMixin from \"../mixins/VModelMixin\";\nexport default {\n  name: \"shared-entity-editor\",\n  mixins: [VModelMixin],\n  props: {\n    value: {\n      type: models.SharedEntity\n    },\n    users: {\n      type: Array,\n      required: true\n    },\n    groups: {\n      type: Array,\n      required: true\n    },\n    disallowEditingAdminGroups: {\n      type: Boolean,\n      default: true\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  components: {\n    AutocompleteTextInput\n  },\n  computed: {\n    userFields: function userFields() {\n      return [{\n        key: \"name\",\n        label: \"User Name\",\n        class: \"text-truncate\"\n      }, {\n        key: \"email\",\n        label: \"Email\",\n        class: \"text-truncate\"\n      }, {\n        key: \"permission\",\n        label: \"Permission\"\n      }, {\n        key: \"remove\",\n        label: \"Remove\"\n      }];\n    },\n    groupFields: function groupFields() {\n      return [{\n        key: \"name\",\n        label: \"Group Name\"\n      }, {\n        key: \"permission\",\n        label: \"Permission\"\n      }, {\n        key: \"remove\",\n        label: \"Remove\"\n      }];\n    },\n    usersCount: function usersCount() {\n      return this.data && this.data.userPermissions ? this.data.userPermissions.length : 0;\n    },\n    sortedUserPermissions: function sortedUserPermissions() {\n      var userPermsCopy = this.data.userPermissions ? this.data.userPermissions.slice() : [];\n      var sortedUserPerms = utils.StringUtils.sortIgnoreCase(userPermsCopy, userPerm => userPerm.user.lastName + \", \" + userPerm.user.firstName); // When in readonly mode, if the current owner isn't the owner, display\n      // the user with the OWNER permission\n\n      if (this.readonly && !this.data.isOwner) {\n        sortedUserPerms.push(new models.UserPermission({\n          user: this.data.owner,\n          permissionType: models.ResourcePermissionType.OWNER\n        }));\n      }\n\n      return sortedUserPerms;\n    },\n\n    userDataClasses() {\n      return {\n        \"text-muted\": this.readonly,\n        \"font-italic\": this.readonly\n      };\n    },\n\n    filteredGroupPermissions: function filteredGroupPermissions() {\n      return this.data && this.data.groupPermissions ? this.data.groupPermissions : [];\n    },\n    sortedGroupPermissions: function sortedGroupPermissions() {\n      var groupPermsCopy = this.filteredGroupPermissions.slice(); // Sort by name, then admin groups should come last if editing is disallowed\n\n      utils.StringUtils.sortIgnoreCase(groupPermsCopy, g => g.group.name);\n\n      if (this.disallowEditingAdminGroups) {\n        groupPermsCopy.sort((a, b) => {\n          if (a.group.isAdminGroup && !b.group.isAdminGroup) {\n            return 1;\n          }\n        });\n      }\n\n      return groupPermsCopy;\n    },\n    groupsCount: function groupsCount() {\n      return this.filteredGroupPermissions.length;\n    },\n    totalCount: function totalCount() {\n      return this.usersCount + this.groupsCount;\n    },\n    permissionOptions: function permissionOptions() {\n      var options = [models.ResourcePermissionType.READ, models.ResourcePermissionType.WRITE]; // manage_sharing permission is visible only if the user is the owner or it is a new entity and owner is not defined\n\n      if (this.data.isOwner || this.data.isOwner === null) {\n        options.push(models.ResourcePermissionType.MANAGE_SHARING);\n      }\n\n      return options.map(perm => {\n        return {\n          value: perm,\n          text: perm.name\n        };\n      });\n    },\n    groupSuggestions: function groupSuggestions() {\n      // filter out already selected groups\n      var currentGroupIds = this.filteredGroupPermissions.map(groupPerm => groupPerm.group.id);\n      return this.groups.filter(group => currentGroupIds.indexOf(group.id) < 0).filter(group => {\n        // Filter out admin groups from options\n        if (this.disallowEditingAdminGroups) {\n          return !group.isAdminGroup;\n        } else {\n          return true;\n        }\n      }).map(group => {\n        return {\n          id: group.id,\n          name: group.name,\n          type: \"group\"\n        };\n      });\n    },\n    userSuggestions: function userSuggestions() {\n      // filter out already selected users\n      var currentUserIds = this.data.userPermissions ? this.data.userPermissions.map(userPerm => userPerm.user.airavataInternalUserId) : [];\n      return this.users.filter(user => currentUserIds.indexOf(user.airavataInternalUserId) < 0).filter(user => user.airavataInternalUserId !== session.Session.airavataInternalUserId).map(user => {\n        return {\n          id: user.airavataInternalUserId,\n          name: user.firstName + \" \" + user.lastName + \" (\" + user.userId + \") \" + user.email,\n          user: user,\n          type: \"user\"\n        };\n      });\n    },\n    usersAndGroupsSuggestions: function usersAndGroupsSuggestions() {\n      return this.userSuggestions.concat(this.groupSuggestions);\n    }\n  },\n  methods: {\n    removeUser: function removeUser(user) {\n      this.data.removeUser(user);\n    },\n    removeGroup: function removeGroup(group) {\n      this.data.removeGroup(group);\n    },\n    suggestionSelected: function suggestionSelected(suggestion) {\n      if (suggestion.type === \"group\") {\n        var group = this.groups.find(group => group.id === suggestion.id);\n        this.data.addGroup({\n          group\n        });\n      } else if (suggestion.type === \"user\") {\n        var user = this.users.find(user => user.airavataInternalUserId === suggestion.id);\n        this.data.addUser(user);\n      }\n    },\n\n    /**\n     * For some entity types the backend automatically shares the entity with\n     * admin users and doesn't allow editing or removing those admin groups.\n     * For that reason the disallowEditingAdminGroups property was added and\n     * when it is true editing of the \"Admins\" and \"Read Only Admins\" groups\n     * should not be allowed.\n     */\n    editingAllowed(group, permission) {\n      return !this.readonly && (!this.disallowEditingAdminGroups || !group.isAdminGroup) && !(!this.data.isOwner && permission === models.ResourcePermissionType.MANAGE_SHARING);\n    },\n\n    isPermissionReadOnly: function isPermissionReadOnly(permission) {\n      // if it is a new entity, it will not be readonly\n      if (this.data.isOwner == null) {\n        return false;\n      }\n\n      return !this.data.isOwner && permission === models.ResourcePermissionType.MANAGE_SHARING;\n    }\n  }\n};",{"version":3,"sources":["SharedEntityEditor.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <b-form-group\n      v-if=\"!readonly\"\n      label=\"Search for users/groups\"\n      labelFor=\"user-groups-autocomplete\"\n    >\n      <autocomplete-text-input\n        id=\"user-groups-autocomplete\"\n        :suggestions=\"usersAndGroupsSuggestions\"\n        @selected=\"suggestionSelected\"\n      >\n        <template slot=\"suggestion\" slot-scope=\"slotProps\">\n          <span v-if=\"slotProps.suggestion.type == 'group'\">\n            <i class=\"fa fa-users\"></i> {{ slotProps.suggestion.name }}\n          </span>\n          <span v-if=\"slotProps.suggestion.type == 'user'\">\n            <i class=\"fa fa-user\"></i>\n            {{ slotProps.suggestion.user.firstName }}\n            {{ slotProps.suggestion.user.lastName }} ({{\n              slotProps.suggestion.user.userId\n            }}) - {{ slotProps.suggestion.user.email }}\n          </span>\n        </template>\n      </autocomplete-text-input>\n    </b-form-group>\n    <h5 v-if=\"totalCount > 0\">\n      <slot name=\"permissions-header\">Currently Shared With</slot>\n    </h5>\n    <b-table\n      v-if=\"usersCount > 0\"\n      id=\"modal-user-table\"\n      hover\n      :items=\"sortedUserPermissions\"\n      :fields=\"userFields\"\n    >\n      <template slot=\"cell(name)\" slot-scope=\"data\">\n        <span\n          :title=\"data.item.user.userId\"\n          :class=\"userDataClasses\"\n          v-if=\"!isPermissionReadOnly(data.item.permissionType)\"\n          >{{ data.item.user.firstName }} {{ data.item.user.lastName }}</span\n        >\n        <span v-else class=\"text-muted font-italic\"\n          >{{ data.item.user.firstName }} {{ data.item.user.lastName }}</span\n        >\n      </template>\n      <template slot=\"cell(email)\" slot-scope=\"data\">\n        <span\n          :class=\"userDataClasses\"\n          v-if=\"!isPermissionReadOnly(data.item.permissionType)\"\n          >{{ data.item.user.email }}</span\n        >\n        <span v-else class=\"text-muted font-italic\">{{\n          data.item.user.email\n        }}</span>\n      </template>\n      <template slot=\"cell(permission)\" slot-scope=\"data\">\n        <b-form-select\n          v-if=\"!isPermissionReadOnly(data.item.permissionType)\"\n          v-model=\"data.item.permissionType\"\n          :options=\"permissionOptions\"\n        />\n        <span\n          v-else\n          class=\"text-uppercase text-muted font-italic\"\n          :class=\"userDataClasses\"\n          >{{ data.item.permissionType.name }}</span\n        >\n      </template>\n      <template slot=\"cell(remove)\" slot-scope=\"data\">\n        <b-link\n          v-if=\"!isPermissionReadOnly(data.item.permissionType)\"\n          @click=\"removeUser(data.item.user)\"\n        >\n          <span class=\"fa fa-trash\"></span>\n        </b-link>\n      </template>\n    </b-table>\n    <b-table\n      v-if=\"groupsCount > 0\"\n      id=\"modal-group-table\"\n      hover\n      :items=\"sortedGroupPermissions\"\n      :fields=\"groupFields\"\n    >\n      <template slot=\"cell(name)\" slot-scope=\"data\">\n        <span\n          v-if=\"editingAllowed(data.item.group, data.item.permissionType)\"\n          >{{ data.item.group.name }}</span\n        >\n        <span v-else class=\"text-muted font-italic\">{{\n          data.item.group.name\n        }}</span>\n      </template>\n      <template slot=\"cell(permission)\" slot-scope=\"data\">\n        <b-form-select\n          v-if=\"editingAllowed(data.item.group, data.item.permissionType)\"\n          v-model=\"data.item.permissionType\"\n          :options=\"permissionOptions\"\n        />\n        <span v-else class=\"text-muted font-italic\">{{\n          data.item.permissionType.name\n        }}</span>\n      </template>\n      <template slot=\"cell(remove)\" slot-scope=\"data\">\n        <b-link\n          v-if=\"editingAllowed(data.item.group, data.item.permissionType)\"\n          @click=\"removeGroup(data.item.group)\"\n        >\n          <span class=\"fa fa-trash\"></span>\n        </b-link>\n      </template>\n    </b-table>\n  </div>\n</template>\n\n<script>\nimport { models, utils, session } from \"django-airavata-api\";\nimport AutocompleteTextInput from \"./AutocompleteTextInput.vue\";\nimport VModelMixin from \"../mixins/VModelMixin\";\n\nexport default {\n  name: \"shared-entity-editor\",\n  mixins: [VModelMixin],\n  props: {\n    value: {\n      type: models.SharedEntity,\n    },\n    users: {\n      type: Array,\n      required: true,\n    },\n    groups: {\n      type: Array,\n      required: true,\n    },\n    disallowEditingAdminGroups: {\n      type: Boolean,\n      default: true,\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  components: {\n    AutocompleteTextInput,\n  },\n  computed: {\n    userFields: function () {\n      return [\n        { key: \"name\", label: \"User Name\", class: \"text-truncate\" },\n        { key: \"email\", label: \"Email\", class: \"text-truncate\" },\n        { key: \"permission\", label: \"Permission\" },\n        { key: \"remove\", label: \"Remove\" },\n      ];\n    },\n    groupFields: function () {\n      return [\n        { key: \"name\", label: \"Group Name\" },\n        { key: \"permission\", label: \"Permission\" },\n        { key: \"remove\", label: \"Remove\" },\n      ];\n    },\n    usersCount: function () {\n      return this.data && this.data.userPermissions\n        ? this.data.userPermissions.length\n        : 0;\n    },\n    sortedUserPermissions: function () {\n      const userPermsCopy = this.data.userPermissions\n        ? this.data.userPermissions.slice()\n        : [];\n      const sortedUserPerms = utils.StringUtils.sortIgnoreCase(\n        userPermsCopy,\n        (userPerm) => userPerm.user.lastName + \", \" + userPerm.user.firstName\n      );\n      // When in readonly mode, if the current owner isn't the owner, display\n      // the user with the OWNER permission\n      if (this.readonly && !this.data.isOwner) {\n        sortedUserPerms.push(\n          new models.UserPermission({\n            user: this.data.owner,\n            permissionType: models.ResourcePermissionType.OWNER,\n          })\n        );\n      }\n      return sortedUserPerms;\n    },\n    userDataClasses() {\n      return {\n        \"text-muted\": this.readonly,\n        \"font-italic\": this.readonly,\n      };\n    },\n    filteredGroupPermissions: function () {\n      return this.data && this.data.groupPermissions\n        ? this.data.groupPermissions\n        : [];\n    },\n    sortedGroupPermissions: function () {\n      const groupPermsCopy = this.filteredGroupPermissions.slice();\n      // Sort by name, then admin groups should come last if editing is disallowed\n      utils.StringUtils.sortIgnoreCase(groupPermsCopy, (g) => g.group.name);\n      if (this.disallowEditingAdminGroups) {\n        groupPermsCopy.sort((a, b) => {\n          if (a.group.isAdminGroup && !b.group.isAdminGroup) {\n            return 1;\n          }\n        });\n      }\n      return groupPermsCopy;\n    },\n    groupsCount: function () {\n      return this.filteredGroupPermissions.length;\n    },\n    totalCount: function () {\n      return this.usersCount + this.groupsCount;\n    },\n    permissionOptions: function () {\n      var options = [\n        models.ResourcePermissionType.READ,\n        models.ResourcePermissionType.WRITE,\n      ];\n      // manage_sharing permission is visible only if the user is the owner or it is a new entity and owner is not defined\n      if (this.data.isOwner || this.data.isOwner === null) {\n        options.push(models.ResourcePermissionType.MANAGE_SHARING);\n      }\n      return options.map((perm) => {\n        return {\n          value: perm,\n          text: perm.name,\n        };\n      });\n    },\n    groupSuggestions: function () {\n      // filter out already selected groups\n      const currentGroupIds = this.filteredGroupPermissions.map(\n        (groupPerm) => groupPerm.group.id\n      );\n      return this.groups\n        .filter((group) => currentGroupIds.indexOf(group.id) < 0)\n        .filter((group) => {\n          // Filter out admin groups from options\n          if (this.disallowEditingAdminGroups) {\n            return !group.isAdminGroup;\n          } else {\n            return true;\n          }\n        })\n        .map((group) => {\n          return {\n            id: group.id,\n            name: group.name,\n            type: \"group\",\n          };\n        });\n    },\n    userSuggestions: function () {\n      // filter out already selected users\n      const currentUserIds = this.data.userPermissions\n        ? this.data.userPermissions.map(\n            (userPerm) => userPerm.user.airavataInternalUserId\n          )\n        : [];\n      return this.users\n        .filter(\n          (user) => currentUserIds.indexOf(user.airavataInternalUserId) < 0\n        )\n        .filter(\n          (user) =>\n            user.airavataInternalUserId !==\n            session.Session.airavataInternalUserId\n        )\n        .map((user) => {\n          return {\n            id: user.airavataInternalUserId,\n            name:\n              user.firstName +\n              \" \" +\n              user.lastName +\n              \" (\" +\n              user.userId +\n              \") \" +\n              user.email,\n            user: user,\n            type: \"user\",\n          };\n        });\n    },\n    usersAndGroupsSuggestions: function () {\n      return this.userSuggestions.concat(this.groupSuggestions);\n    },\n  },\n  methods: {\n    removeUser: function (user) {\n      this.data.removeUser(user);\n    },\n    removeGroup: function (group) {\n      this.data.removeGroup(group);\n    },\n    suggestionSelected: function (suggestion) {\n      if (suggestion.type === \"group\") {\n        const group = this.groups.find((group) => group.id === suggestion.id);\n        this.data.addGroup({ group });\n      } else if (suggestion.type === \"user\") {\n        const user = this.users.find(\n          (user) => user.airavataInternalUserId === suggestion.id\n        );\n        this.data.addUser(user);\n      }\n    },\n    /**\n     * For some entity types the backend automatically shares the entity with\n     * admin users and doesn't allow editing or removing those admin groups.\n     * For that reason the disallowEditingAdminGroups property was added and\n     * when it is true editing of the \"Admins\" and \"Read Only Admins\" groups\n     * should not be allowed.\n     */\n    editingAllowed(group, permission) {\n      return (\n        !this.readonly &&\n        (!this.disallowEditingAdminGroups || !group.isAdminGroup) &&\n        !(\n          !this.data.isOwner &&\n          permission === models.ResourcePermissionType.MANAGE_SHARING\n        )\n      );\n    },\n    isPermissionReadOnly: function (permission) {\n      // if it is a new entity, it will not be readonly\n      if (this.data.isOwner == null) {\n        return false;\n      }\n      return (\n        !this.data.isOwner &&\n        permission === models.ResourcePermissionType.MANAGE_SHARING\n      );\n    },\n  },\n};\n</script>\n\n<style scoped>\n#modal-user-table {\n  table-layout: fixed;\n}\n</style>\n"],"sourceRoot":"../../static/common/js/components"}]}