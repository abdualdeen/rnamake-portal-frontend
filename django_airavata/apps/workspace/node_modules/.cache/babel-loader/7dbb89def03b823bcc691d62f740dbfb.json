{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/django-airavata-workspace-plugin-api/js/input-editors/InputEditorMixin.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/django-airavata-workspace-plugin-api/js/input-editors/InputEditorMixin.js","mtime":1638641844336},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es6.promise\";\nimport \"core-js/modules/web.dom.iterable\";\n// InputEditorMixin: mixin for experiment InputEditors, provides basic v-model\n// and validation functionality and defines the basic props interface\n// (experimentInput and id).\nimport { models } from \"django-airavata-api\";\nexport default {\n  props: {\n    value: {\n      type: String\n    },\n    experimentInput: {\n      type: models.InputDataObjectType,\n      required: true\n    },\n    experiment: {\n      type: models.Experiment,\n      required: false\n    },\n    id: {\n      type: String,\n      required: true\n    },\n    readOnly: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      data: this.value,\n      inputHasBegun: false\n    };\n  },\n\n  asyncComputed: {\n    validationResults: {\n      get() {\n        var results = this.experimentInput.validate(this.data);\n        var value = [];\n\n        if (\"value\" in results) {\n          value = Promise.all(results[\"value\"]).then(arr => arr.filter(x => x !== null));\n        }\n\n        return {\n          \"value\": value\n        };\n      },\n\n      default() {\n        return {\n          \"value\": []\n        };\n      }\n\n    },\n    validationMessages: function validationMessages() {\n      return \"value\" in this.validationResults ? this.validationResults[\"value\"] : [];\n    },\n    valid: function valid() {\n      if (this.validationMessages) return this.validationMessages.length === 0;else return false;\n    },\n    componentValidState: function componentValidState() {\n      if (this.inputHasBegun) {\n        return this.valid ? \"valid\" : \"invalid\";\n      } else {\n        return null;\n      }\n    }\n  },\n  computed: {\n    editorConfig: function editorConfig() {\n      return this.experimentInput.editorConfig;\n    }\n  },\n  methods: {\n    valueChanged: function valueChanged() {\n      this.inputHasBegun = true;\n      this.$emit(\"input\", this.data);\n    },\n    checkValidation: function checkValidation() {\n      if (this.valid) {\n        this.$emit(\"valid\");\n      } else {\n        this.$emit(\"invalid\", this.validationMessages);\n      }\n    }\n  },\n  created: function created() {\n    this.checkValidation();\n  },\n  watch: {\n    value(newValue) {\n      this.data = newValue;\n    },\n\n    valid() {\n      this.checkValidation();\n    },\n\n    validationMessages() {\n      this.checkValidation();\n    }\n\n  }\n};",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/django-airavata-workspace-plugin-api/js/input-editors/InputEditorMixin.js"],"names":["models","props","value","type","String","experimentInput","InputDataObjectType","required","experiment","Experiment","id","readOnly","Boolean","default","data","inputHasBegun","asyncComputed","validationResults","get","results","validate","Promise","all","then","arr","filter","x","validationMessages","valid","length","componentValidState","computed","editorConfig","methods","valueChanged","$emit","checkValidation","created","watch","newValue"],"mappings":"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","sourcesContent":["// InputEditorMixin: mixin for experiment InputEditors, provides basic v-model\n// and validation functionality and defines the basic props interface\n// (experimentInput and id).\nimport { models } from \"django-airavata-api\";\nexport default {\n  props: {\n    value: {\n      type: String,\n    },\n    experimentInput: {\n      type: models.InputDataObjectType,\n      required: true,\n    },\n    experiment: {\n      type: models.Experiment,\n      required: false,\n    },\n    id: {\n      type: String,\n      required: true,\n    },\n    readOnly: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      data: this.value,\n      inputHasBegun: false,\n    };\n  },\n  asyncComputed: {\n    validationResults: {\n      get () {\n        let results = this.experimentInput.validate(this.data);\n        let value = []\n        if (\"value\" in results) {\n          value = Promise.all(results[\"value\"]).then(\n            arr => arr.filter(x => x !== null)\n          )\n        }\n        return {\n          \"value\": value\n        };\n      },\n      default () {\n        return {\n          \"value\": []\n        }\n      }\n    },\n    validationMessages: function () {\n      return \"value\" in this.validationResults\n        ? this.validationResults[\"value\"]\n        : [];\n    },\n    valid: function () {\n      if (this.validationMessages)\n        return this.validationMessages.length === 0;\n      else\n        return false;\n    },\n    componentValidState: function () {\n      if (this.inputHasBegun) {\n        return this.valid ? \"valid\" : \"invalid\";\n      } else {\n        return null;\n      }\n    },\n  },\n  computed: {\n    editorConfig: function () {\n      return this.experimentInput.editorConfig;\n    },\n  },\n  methods: {\n    valueChanged: function () {\n      this.inputHasBegun = true;\n      this.$emit(\"input\", this.data);\n    },\n    checkValidation: function () {\n      if (this.valid) {\n        this.$emit(\"valid\");\n      } else {\n        this.$emit(\"invalid\", this.validationMessages);\n      }\n    },\n  },\n  created: function () {\n    this.checkValidation();\n  },\n  watch: {\n    value(newValue) {\n      this.data = newValue;\n    },\n    valid() {\n      this.checkValidation();\n    },\n    validationMessages() {\n      this.checkValidation();\n    }\n  },\n};\n"]}]}