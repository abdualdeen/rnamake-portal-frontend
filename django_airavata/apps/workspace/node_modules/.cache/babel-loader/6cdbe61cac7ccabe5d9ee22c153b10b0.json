{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/InputDataObjectType.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/InputDataObjectType.js","mtime":1638641844319},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport BaseModel from \"./BaseModel\";\nimport DataType from \"./DataType\";\nimport BooleanExpressionEvaluator from \"./dependencies/BooleanExpressionEvaluator\";\nimport uuidv4 from \"uuid/v4\";\nimport ValidatorFactory from \"./validators/ValidatorFactory\";\nvar FIELDS = [\"name\", \"value\", {\n  name: \"type\",\n  type: DataType,\n  default: DataType.STRING\n}, \"applicationArgument\", {\n  name: \"standardInput\",\n  type: \"boolean\",\n  default: false\n}, \"userFriendlyDescription\", \"metaData\", \"inputOrder\", {\n  name: \"isRequired\",\n  type: \"boolean\",\n  default: false\n}, {\n  name: \"requiredToAddedToCommandLine\",\n  type: \"boolean\",\n  default: false\n}, {\n  name: \"dataStaged\",\n  type: \"boolean\",\n  default: false\n}, \"storageResourceId\", {\n  name: \"isReadOnly\",\n  type: \"boolean\",\n  default: false\n}, \"overrideFilename\"];\nvar IS_REQUIRED_DEFAULT = \"This field is required.\";\nvar IS_REQUIRED_URI_COLLECTION = \"At least one file must be selected.\";\nexport default class InputDataObjectType extends BaseModel {\n  constructor() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(FIELDS, data);\n    this._key = data.key ? data.key : uuidv4();\n    this.show = true;\n  }\n\n  get key() {\n    return this._key;\n  }\n  /**\n   * Get the UI component id for the editor component to use for this input.\n   * Returns null if there is no editor UI component id.\n   *\n   * The expected JSON schema for the editor UI component id is the following:\n   * {\n   *   \"editor\": {\n   *     \"ui-component-id\": \"input-editor-component-id\",\n   *     ...\n   *   }\n   * }\n   */\n\n\n  get editorUIComponentId() {\n    var metadata = this._getMetadata();\n\n    if (metadata && \"editor\" in metadata && \"ui-component-id\" in metadata[\"editor\"]) {\n      return metadata[\"editor\"][\"ui-component-id\"];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Get the configuration for the editor component, which will be available\n   * to the editor component for customizing its look and functionality.\n   * Returns empty object if there is no editor config.\n   *\n   * The expected JSON schema for the editor config is the following:\n   * {\n   *   \"editor\": {\n   *     \"config\": {\n   *       ... anything can go here ...\n   *     }\n   *     ...\n   *   }\n   * }\n   */\n\n\n  get editorConfig() {\n    var metadata = this._getMetadata();\n\n    if (metadata && \"editor\" in metadata && \"config\" in metadata[\"editor\"]) {\n      return metadata[\"editor\"][\"config\"];\n    } else {\n      return {};\n    }\n  }\n  /**\n   * Get the validations for the editor component. See ValidatorFactory for a\n   * list of available validations. Returns empty array if there are no\n   * validations.\n   *\n   * The expected JSON schema for the editor validations is the following:\n   * {\n   *   \"editor\": {\n   *     \"validations\": [\n   *       {\n   *         \"type\": \"validation-name\",\n   *         \"value\": \"some value for configuring validation, passed to validator constructor\",\n   *         \"message\": \"(Optional) custom validation error message\"\n   *       },\n   *       ... additional validations go here ...\n   *     ]\n   *     ...\n   *   }\n   * }\n   *\n   * Note: \"message\" is optional for all validations.\n   */\n\n\n  get editorValidations() {\n    var metadata = this._getMetadata();\n\n    if (metadata && \"editor\" in metadata && \"validations\" in metadata[\"editor\"]) {\n      return metadata[\"editor\"][\"validations\"];\n    } else {\n      return [];\n    }\n  }\n  /**\n   * Get the dependencies for the editor component. Returns empty object if\n   * there are no dependencies. See evaluateDependencies for a list of\n   * available kinds of dependencies.\n   *\n   * The expected JSON schema for the editor validations is the following:\n   * {\n   *   \"editor\": {\n   *     \"dependencies\": {\n   *       \"show\": {\n   *         \"AND\": [              // Boolean operator (\"AND\", \"OR\")\n   *           \"INPUT_1\": {        // Name of other application input\n   *             \"type\": \"equals\", // Name of comparison type\n   *             \"value\": \"1\"      // Value to compare with\n   *           },\n   *           \"NOT\": {            // \"NOT\" is given a single input comparison or \"AND\" or \"OR\" expression\n   *             \"INPUT_2\": {\n   *               ...\n   *             }\n   *           }\n   *           ... additional boolean expressions (\"AND\", \"OR\", \"NOT\")\n   *           ... additional application input comparisons\n   *         ]\n   *       },\n   *       \"showOptions\": {        // Optional\n   *         \"isRequired\": true    // Set isRequired to true when shown, false otherwise (Note:\n   *                               // REST API automatically adds and updates this metadata as needed)\n   *       }\n   *     }\n   *   }\n   * }\n   */\n\n\n  get editorDependencies() {\n    var metadata = this._getMetadata();\n\n    if (metadata && \"editor\" in metadata && \"dependencies\" in metadata[\"editor\"]) {\n      return metadata[\"editor\"][\"dependencies\"];\n    } else {\n      return {};\n    }\n  }\n\n  _getMetadata() {\n    // metaData could really be anything, here we expect it to be an object\n    // so safely check if it is first\n    if (this.metaData && typeof this.metaData === \"object\") {\n      return this.metaData;\n    } else {\n      return null;\n    }\n  }\n\n  validate() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    var inputValue = typeof value != \"undefined\" ? value : this.value;\n    var results = {}; // Skip running validations when the input isn't shown\n\n    if (!this.show) {\n      return results;\n    }\n\n    var valueErrorMessages = [];\n\n    if (this.isRequired && this.isEmpty(inputValue)) {\n      if (this.type === DataType.URI_COLLECTION) {\n        valueErrorMessages.push(IS_REQUIRED_URI_COLLECTION);\n      } else {\n        valueErrorMessages.push(IS_REQUIRED_DEFAULT);\n      }\n    } // Run through any validations if configured\n\n\n    if (this.editorValidations.length > 0) {\n      var validatorFactory = new ValidatorFactory();\n      valueErrorMessages = valueErrorMessages.concat(validatorFactory.validate(this.editorValidations, inputValue));\n    }\n\n    if (valueErrorMessages.length > 0) {\n      results[\"value\"] = valueErrorMessages;\n    }\n\n    return results;\n  }\n  /**\n   * Evaluate dependencies on the values of other application inputs.\n   */\n\n\n  evaluateDependencies(inputValues) {\n    if (Object.keys(this.editorDependencies).length > 0) {\n      var booleanExpressionEvaluator = new BooleanExpressionEvaluator(inputValues);\n\n      if (\"show\" in this.editorDependencies) {\n        this.show = booleanExpressionEvaluator.evaluate(this.editorDependencies.show);\n\n        if (\"showOptions\" in this.editorDependencies) {\n          if (\"isRequired\" in this.editorDependencies.showOptions && this.editorDependencies.showOptions.isRequired) {\n            this.isRequired = this.show;\n          }\n        }\n      }\n    }\n  }\n\n}\nInputDataObjectType.VALID_DATA_TYPES = [DataType.STRING, DataType.INTEGER, DataType.FLOAT, DataType.URI, DataType.URI_COLLECTION];",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/InputDataObjectType.js"],"names":["BaseModel","DataType","BooleanExpressionEvaluator","uuidv4","ValidatorFactory","FIELDS","name","type","default","STRING","IS_REQUIRED_DEFAULT","IS_REQUIRED_URI_COLLECTION","InputDataObjectType","constructor","data","_key","key","show","editorUIComponentId","metadata","_getMetadata","editorConfig","editorValidations","editorDependencies","metaData","validate","value","undefined","inputValue","results","valueErrorMessages","isRequired","isEmpty","URI_COLLECTION","push","length","validatorFactory","concat","evaluateDependencies","inputValues","Object","keys","booleanExpressionEvaluator","evaluate","showOptions","VALID_DATA_TYPES","INTEGER","FLOAT","URI"],"mappings":"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","sourcesContent":["import BaseModel from \"./BaseModel\";\nimport DataType from \"./DataType\";\nimport BooleanExpressionEvaluator from \"./dependencies/BooleanExpressionEvaluator\";\nimport uuidv4 from \"uuid/v4\";\nimport ValidatorFactory from \"./validators/ValidatorFactory\";\n\nconst FIELDS = [\n  \"name\",\n  \"value\",\n  {\n    name: \"type\",\n    type: DataType,\n    default: DataType.STRING,\n  },\n  \"applicationArgument\",\n  {\n    name: \"standardInput\",\n    type: \"boolean\",\n    default: false,\n  },\n  \"userFriendlyDescription\",\n  \"metaData\",\n  \"inputOrder\",\n  {\n    name: \"isRequired\",\n    type: \"boolean\",\n    default: false,\n  },\n  {\n    name: \"requiredToAddedToCommandLine\",\n    type: \"boolean\",\n    default: false,\n  },\n  {\n    name: \"dataStaged\",\n    type: \"boolean\",\n    default: false,\n  },\n  \"storageResourceId\",\n  {\n    name: \"isReadOnly\",\n    type: \"boolean\",\n    default: false,\n  },\n  \"overrideFilename\",\n];\n\nconst IS_REQUIRED_DEFAULT = \"This field is required.\";\nconst IS_REQUIRED_URI_COLLECTION = \"At least one file must be selected.\";\n\nexport default class InputDataObjectType extends BaseModel {\n  constructor(data = {}) {\n    super(FIELDS, data);\n    this._key = data.key ? data.key : uuidv4();\n    this.show = true;\n  }\n\n  get key() {\n    return this._key;\n  }\n\n  /**\n   * Get the UI component id for the editor component to use for this input.\n   * Returns null if there is no editor UI component id.\n   *\n   * The expected JSON schema for the editor UI component id is the following:\n   * {\n   *   \"editor\": {\n   *     \"ui-component-id\": \"input-editor-component-id\",\n   *     ...\n   *   }\n   * }\n   */\n  get editorUIComponentId() {\n    const metadata = this._getMetadata();\n    if (\n      metadata &&\n      \"editor\" in metadata &&\n      \"ui-component-id\" in metadata[\"editor\"]\n    ) {\n      return metadata[\"editor\"][\"ui-component-id\"];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the configuration for the editor component, which will be available\n   * to the editor component for customizing its look and functionality.\n   * Returns empty object if there is no editor config.\n   *\n   * The expected JSON schema for the editor config is the following:\n   * {\n   *   \"editor\": {\n   *     \"config\": {\n   *       ... anything can go here ...\n   *     }\n   *     ...\n   *   }\n   * }\n   */\n  get editorConfig() {\n    const metadata = this._getMetadata();\n    if (metadata && \"editor\" in metadata && \"config\" in metadata[\"editor\"]) {\n      return metadata[\"editor\"][\"config\"];\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * Get the validations for the editor component. See ValidatorFactory for a\n   * list of available validations. Returns empty array if there are no\n   * validations.\n   *\n   * The expected JSON schema for the editor validations is the following:\n   * {\n   *   \"editor\": {\n   *     \"validations\": [\n   *       {\n   *         \"type\": \"validation-name\",\n   *         \"value\": \"some value for configuring validation, passed to validator constructor\",\n   *         \"message\": \"(Optional) custom validation error message\"\n   *       },\n   *       ... additional validations go here ...\n   *     ]\n   *     ...\n   *   }\n   * }\n   *\n   * Note: \"message\" is optional for all validations.\n   */\n  get editorValidations() {\n    const metadata = this._getMetadata();\n    if (\n      metadata &&\n      \"editor\" in metadata &&\n      \"validations\" in metadata[\"editor\"]\n    ) {\n      return metadata[\"editor\"][\"validations\"];\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Get the dependencies for the editor component. Returns empty object if\n   * there are no dependencies. See evaluateDependencies for a list of\n   * available kinds of dependencies.\n   *\n   * The expected JSON schema for the editor validations is the following:\n   * {\n   *   \"editor\": {\n   *     \"dependencies\": {\n   *       \"show\": {\n   *         \"AND\": [              // Boolean operator (\"AND\", \"OR\")\n   *           \"INPUT_1\": {        // Name of other application input\n   *             \"type\": \"equals\", // Name of comparison type\n   *             \"value\": \"1\"      // Value to compare with\n   *           },\n   *           \"NOT\": {            // \"NOT\" is given a single input comparison or \"AND\" or \"OR\" expression\n   *             \"INPUT_2\": {\n   *               ...\n   *             }\n   *           }\n   *           ... additional boolean expressions (\"AND\", \"OR\", \"NOT\")\n   *           ... additional application input comparisons\n   *         ]\n   *       },\n   *       \"showOptions\": {        // Optional\n   *         \"isRequired\": true    // Set isRequired to true when shown, false otherwise (Note:\n   *                               // REST API automatically adds and updates this metadata as needed)\n   *       }\n   *     }\n   *   }\n   * }\n   */\n  get editorDependencies() {\n    const metadata = this._getMetadata();\n    if (\n      metadata &&\n      \"editor\" in metadata &&\n      \"dependencies\" in metadata[\"editor\"]\n    ) {\n      return metadata[\"editor\"][\"dependencies\"];\n    } else {\n      return {};\n    }\n  }\n\n  _getMetadata() {\n    // metaData could really be anything, here we expect it to be an object\n    // so safely check if it is first\n    if (this.metaData && typeof this.metaData === \"object\") {\n      return this.metaData;\n    } else {\n      return null;\n    }\n  }\n\n  validate(value = undefined) {\n    let inputValue = typeof value != \"undefined\" ? value : this.value;\n    let results = {};\n    // Skip running validations when the input isn't shown\n    if (!this.show) {\n      return results;\n    }\n    let valueErrorMessages = [];\n    if (this.isRequired && this.isEmpty(inputValue)) {\n      if (this.type === DataType.URI_COLLECTION) {\n        valueErrorMessages.push(IS_REQUIRED_URI_COLLECTION);\n      } else {\n        valueErrorMessages.push(IS_REQUIRED_DEFAULT);\n      }\n    }\n    // Run through any validations if configured\n    if (this.editorValidations.length > 0) {\n      const validatorFactory = new ValidatorFactory();\n      valueErrorMessages = valueErrorMessages.concat(\n        validatorFactory.validate(this.editorValidations, inputValue)\n      );\n    }\n    if (valueErrorMessages.length > 0) {\n      results[\"value\"] = valueErrorMessages;\n    }\n    return results;\n  }\n\n  /**\n   * Evaluate dependencies on the values of other application inputs.\n   */\n  evaluateDependencies(inputValues) {\n    if (Object.keys(this.editorDependencies).length > 0) {\n      const booleanExpressionEvaluator = new BooleanExpressionEvaluator(\n        inputValues\n      );\n      if (\"show\" in this.editorDependencies) {\n        this.show = booleanExpressionEvaluator.evaluate(\n          this.editorDependencies.show\n        );\n        if (\"showOptions\" in this.editorDependencies) {\n          if (\n            \"isRequired\" in this.editorDependencies.showOptions &&\n            this.editorDependencies.showOptions.isRequired\n          ) {\n            this.isRequired = this.show;\n          }\n        }\n      }\n    }\n  }\n}\n\nInputDataObjectType.VALID_DATA_TYPES = [\n  DataType.STRING,\n  DataType.INTEGER,\n  DataType.FLOAT,\n  DataType.URI,\n  DataType.URI_COLLECTION,\n];\n"]}]}