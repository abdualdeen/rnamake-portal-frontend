{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/containers/CreateExperimentContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/containers/CreateExperimentContainer.vue","mtime":1638641844343},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.object.keys\";\nimport _slicedToArray from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { services } from \"django-airavata-api\";\nimport { notifications } from \"django-airavata-common-ui\";\nimport ExperimentEditor from \"../components/experiment/ExperimentEditor.vue\";\nimport urls from \"../utils/urls\";\nimport moment from \"moment\";\nexport default {\n  name: \"create-experiment-container\",\n  props: [\"app-module-id\", \"user-input-values\", \"experiment-data-dir\"],\n  data: function data() {\n    return {\n      experiment: null,\n      appModule: null\n    };\n  },\n  components: {\n    \"experiment-editor\": ExperimentEditor\n  },\n  methods: {\n    handleSavedExperiment: function handleSavedExperiment() {\n      // Redirect to experiment view\n      urls.navigateToExperimentsList();\n    },\n    handleSavedAndLaunchedExperiment: function handleSavedAndLaunchedExperiment(experiment) {\n      // Redirect to experiment view\n      urls.navigateToViewExperiment(experiment, {\n        launching: true\n      });\n    }\n  },\n  computed: {},\n  mounted: function mounted() {\n    var _this = this;\n\n    var loadAppModule = services.ApplicationModuleService.retrieve({\n      lookup: this.appModuleId\n    }, {\n      ignoreErrors: true\n    });\n    var loadAppInterface = services.ApplicationModuleService.getApplicationInterface({\n      lookup: this.appModuleId\n    }, {\n      ignoreErrors: true\n    });\n    Promise.all([loadAppModule, loadAppInterface]).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          appModule = _ref2[0],\n          appInterface = _ref2[1];\n\n      var experiment = appInterface.createExperiment();\n      experiment.experimentName = appModule.appModuleName + \" on \" + moment().format(\"lll\");\n      _this.appModule = appModule;\n\n      if (_this.userInputValues) {\n        Object.keys(_this.userInputValues).forEach(function (k) {\n          var experimentInput = experiment.experimentInputs.find(function (inp) {\n            return inp.name === k;\n          });\n\n          if (experimentInput) {\n            experimentInput.value = _this.userInputValues[k];\n          }\n        });\n      }\n\n      if (_this.experimentDataDir) {\n        experiment.userConfigurationData.experimentDataDir = _this.experimentDataDir;\n      }\n\n      _this.experiment = experiment;\n    }).catch(function (error) {\n      notifications.NotificationList.addError(error);\n    });\n  }\n};",{"version":3,"sources":["CreateExperimentContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAaA,SAAA,QAAA,QAAA,qBAAA;AACA,SAAA,aAAA,QAAA,2BAAA;AACA,OAAA,gBAAA;AACA,OAAA,IAAA;AAEA,OAAA,MAAA,MAAA,QAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,6BADA;AAEA,EAAA,KAAA,EAAA,CAAA,eAAA,EAAA,mBAAA,EAAA,qBAAA,CAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,IADA;AAEA,MAAA,SAAA,EAAA;AAFA,KAAA;AAIA,GARA;AASA,EAAA,UAAA,EAAA;AACA,yBAAA;AADA,GATA;AAYA,EAAA,OAAA,EAAA;AACA,IAAA,qBAAA,EAAA,iCAAA;AACA;AACA,MAAA,IAAA,CAAA,yBAAA;AACA,KAJA;AAKA,IAAA,gCAAA,EAAA,0CAAA,UAAA,EAAA;AACA;AACA,MAAA,IAAA,CAAA,wBAAA,CAAA,UAAA,EAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAAA;AACA;AARA,GAZA;AAsBA,EAAA,QAAA,EAAA,EAtBA;AAuBA,EAAA,OAAA,EAAA,mBAAA;AAAA;;AACA,QAAA,aAAA,GAAA,QAAA,CAAA,wBAAA,CAAA,QAAA,CACA;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,KADA,EAEA;AAAA,MAAA,YAAA,EAAA;AAAA,KAFA,CAAA;AAIA,QAAA,gBAAA,GAAA,QAAA,CAAA,wBAAA,CAAA,uBAAA,CACA;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,KADA,EAEA;AAAA,MAAA,YAAA,EAAA;AAAA,KAFA,CAAA;AAIA,IAAA,OAAA,CAAA,GAAA,CAAA,CAAA,aAAA,EAAA,gBAAA,CAAA,EACA,IADA,CACA,gBAAA;AAAA;AAAA,UAAA,SAAA;AAAA,UAAA,YAAA;;AACA,UAAA,UAAA,GAAA,YAAA,CAAA,gBAAA,EAAA;AACA,MAAA,UAAA,CAAA,cAAA,GACA,SAAA,CAAA,aAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,CAAA,KAAA,CADA;AAEA,MAAA,KAAA,CAAA,SAAA,GAAA,SAAA;;AACA,UAAA,KAAA,CAAA,eAAA,EAAA;AACA,QAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,EAAA,OAAA,CAAA,UAAA,CAAA,EAAA;AACA,cAAA,eAAA,GAAA,UAAA,CAAA,gBAAA,CAAA,IAAA,CACA,UAAA,GAAA;AAAA,mBAAA,GAAA,CAAA,IAAA,KAAA,CAAA;AAAA,WADA,CAAA;;AAGA,cAAA,eAAA,EAAA;AACA,YAAA,eAAA,CAAA,KAAA,GAAA,KAAA,CAAA,eAAA,CAAA,CAAA,CAAA;AACA;AACA,SAPA;AAQA;;AACA,UAAA,KAAA,CAAA,iBAAA,EAAA;AACA,QAAA,UAAA,CAAA,qBAAA,CAAA,iBAAA,GAAA,KAAA,CAAA,iBAAA;AACA;;AACA,MAAA,KAAA,CAAA,UAAA,GAAA,UAAA;AACA,KApBA,EAqBA,KArBA,CAqBA,UAAA,KAAA,EAAA;AACA,MAAA,aAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,KAAA;AACA,KAvBA;AAwBA;AAxDA,CAAA","sourcesContent":["<template>\n  <experiment-editor\n    v-if=\"experiment\"\n    :experiment=\"experiment\"\n    :app-module=\"appModule\"\n    @saved=\"handleSavedExperiment\"\n    @savedAndLaunched=\"handleSavedAndLaunchedExperiment\"\n  >\n    <span slot=\"title\">Create a New Experiment</span>\n  </experiment-editor>\n</template>\n\n<script>\nimport { services } from \"django-airavata-api\";\nimport { notifications } from \"django-airavata-common-ui\";\nimport ExperimentEditor from \"../components/experiment/ExperimentEditor.vue\";\nimport urls from \"../utils/urls\";\n\nimport moment from \"moment\";\n\nexport default {\n  name: \"create-experiment-container\",\n  props: [\"app-module-id\", \"user-input-values\", \"experiment-data-dir\"],\n  data() {\n    return {\n      experiment: null,\n      appModule: null,\n    };\n  },\n  components: {\n    \"experiment-editor\": ExperimentEditor,\n  },\n  methods: {\n    handleSavedExperiment: function () {\n      // Redirect to experiment view\n      urls.navigateToExperimentsList();\n    },\n    handleSavedAndLaunchedExperiment: function (experiment) {\n      // Redirect to experiment view\n      urls.navigateToViewExperiment(experiment, { launching: true });\n    },\n  },\n  computed: {},\n  mounted: function () {\n    const loadAppModule = services.ApplicationModuleService.retrieve(\n      { lookup: this.appModuleId },\n      { ignoreErrors: true }\n    );\n    const loadAppInterface = services.ApplicationModuleService.getApplicationInterface(\n      { lookup: this.appModuleId },\n      { ignoreErrors: true }\n    );\n    Promise.all([loadAppModule, loadAppInterface])\n      .then(([appModule, appInterface]) => {\n        const experiment = appInterface.createExperiment();\n        experiment.experimentName =\n          appModule.appModuleName + \" on \" + moment().format(\"lll\");\n        this.appModule = appModule;\n        if (this.userInputValues) {\n          Object.keys(this.userInputValues).forEach((k) => {\n            const experimentInput = experiment.experimentInputs.find(\n              (inp) => inp.name === k\n            );\n            if (experimentInput) {\n              experimentInput.value = this.userInputValues[k];\n            }\n          });\n        }\n        if (this.experimentDataDir) {\n          experiment.userConfigurationData.experimentDataDir = this.experimentDataDir;\n        }\n        this.experiment = experiment;\n      })\n      .catch((error) => {\n        notifications.NotificationList.addError(error);\n      });\n  },\n};\n</script>\n<style>\n/* style the containing div, in base.html template */\n.main-content-wrapper {\n  background-color: #ffffff;\n}\n</style>\n"],"sourceRoot":"static/django_airavata_workspace/js/containers"}]}