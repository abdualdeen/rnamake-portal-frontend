{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/input-editors/InputEditorContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/input-editors/InputEditorContainer.vue","mtime":1638641844339},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport UserFileInputEditor from \"./UserFileInputEditor.vue\";\nimport AutocompleteInputEditor from \"./AutocompleteInputEditor\";\nimport CheckboxInputEditor from \"./CheckboxInputEditor.vue\";\nimport FileInputEditor from \"./FileInputEditor.vue\";\nimport InputEditorFormGroup from \"./InputEditorFormGroup.vue\";\nimport MultiFileInputEditor from \"./MultiFileInputEditor.vue\";\nimport RadioButtonInputEditor from \"./RadioButtonInputEditor.vue\";\nimport RangeSliderInputEditor from \"./RangeSliderInputEditor.vue\";\nimport SelectInputEditor from \"./SelectInputEditor.vue\";\nimport SliderInputEditor from \"./SliderInputEditor.vue\";\nimport StringInputEditor from \"./StringInputEditor.vue\";\nimport TextareaInputEditor from \"./TextareaInputEditor.vue\";\nimport { models } from \"django-airavata-api\";\nimport { mixins, utils } from \"django-airavata-common-ui\";\nexport default {\n  name: \"input-editor-container\",\n  mixins: [mixins.VModelMixin],\n  props: {\n    experimentInput: {\n      type: models.InputDataObjectType,\n      required: true\n    },\n    experiment: {\n      type: models.Experiment,\n      required: true\n    }\n  },\n  components: {\n    AutocompleteInputEditor: AutocompleteInputEditor,\n    CheckboxInputEditor: CheckboxInputEditor,\n    FileInputEditor: FileInputEditor,\n    InputEditorFormGroup: InputEditorFormGroup,\n    MultiFileInputEditor: MultiFileInputEditor,\n    RadioButtonInputEditor: RadioButtonInputEditor,\n    RangeSliderInputEditor: RangeSliderInputEditor,\n    SelectInputEditor: SelectInputEditor,\n    SliderInputEditor: SliderInputEditor,\n    StringInputEditor: StringInputEditor,\n    TextareaInputEditor: TextareaInputEditor,\n    UserFileInputEditor: UserFileInputEditor\n  },\n  created: function created() {\n    if (!this.show) {\n      this.handleHidingInput();\n    }\n  },\n  data: function data() {\n    return {\n      state: null,\n      feedbackMessages: [],\n      inputHasBegun: false,\n      // Store the current value when hiding input so we can restore it when shown again\n      oldValue: null,\n      show: this.experimentInput.show\n    };\n  },\n  computed: {\n    inputEditorComponentName: function inputEditorComponentName() {\n      // If input specifices an editor UI component, use that\n      if (this.experimentInput.editorUIComponentId) {\n        return this.experimentInput.editorUIComponentId;\n      } // Default UI components based on input type\n\n\n      if (this.experimentInput.type === models.DataType.STRING) {\n        return \"string-input-editor\";\n      } else if (this.experimentInput.type === models.DataType.URI) {\n        return \"file-input-editor\";\n      } else if (this.experimentInput.type === models.DataType.URI_COLLECTION) {\n        return \"multi-file-input-editor\";\n      } // Default\n\n\n      return \"string-input-editor\";\n    },\n    inputEditorComponentId: function inputEditorComponentId() {\n      return utils.sanitizeHTMLId(this.experimentInput.name);\n    },\n    validationFeedback: function validationFeedback() {\n      // Only display validation feedback after the user has provided\n      // input so that missing required value errors are only displayed\n      // after interacting with the input editor\n      return this.inputHasBegun ? this.feedbackMessages : null;\n    },\n    validationState: function validationState() {\n      return this.inputHasBegun ? this.state : null;\n    }\n  },\n  methods: {\n    recordValidInputEditorValue: function recordValidInputEditorValue() {\n      this.state = \"valid\";\n      this.$emit(\"valid\");\n    },\n    recordInvalidInputEditorValue: function recordInvalidInputEditorValue(feedbackMessages) {\n      this.feedbackMessages = feedbackMessages;\n      this.state = \"invalid\";\n      this.$emit(\"invalid\", feedbackMessages);\n    },\n    valueChanged: function valueChanged() {\n      this.inputHasBegun = true;\n    },\n    handleHidingInput: function handleHidingInput() {\n      this.oldValue = this.data;\n      this.data = null;\n    },\n    handleShowingInput: function handleShowingInput() {\n      if (this.oldValue !== null) {\n        this.data = this.oldValue;\n      }\n    },\n    uploadStart: function uploadStart() {\n      this.$emit(\"uploadstart\");\n    },\n    uploadEnd: function uploadEnd() {\n      this.$emit(\"uploadend\");\n    }\n  },\n  watch: {\n    // This is a bit of a workaround for testing purposes. Watcher for\n    // \"experimentInput.show\" does not get triggered during unit test so sync it\n    // to \"show\" data variable and then in the unit test manipulate \"show\"\n    // directly.\n    \"experimentInput.show\": function experimentInputShow(newValue) {\n      this.show = newValue;\n    },\n    show: function show(newValue, oldValue) {\n      // Hiding\n      if (oldValue && !newValue) {\n        this.handleHidingInput();\n      } // Showing\n      else if (newValue && !oldValue) {\n          this.handleShowingInput();\n        }\n    }\n  }\n};",{"version":3,"sources":["InputEditorContainer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <input-editor-form-group\n    :label=\"experimentInput.name\"\n    :label-for=\"inputEditorComponentId\"\n    :state=\"validationState\"\n    :feedback-messages=\"validationFeedback\"\n    :description=\"experimentInput.userFriendlyDescription\"\n  >\n    <component\n      :is=\"inputEditorComponentName\"\n      :id=\"inputEditorComponentId\"\n      :experiment-input=\"experimentInput\"\n      :experiment=\"experiment\"\n      :read-only=\"experimentInput.isReadOnly\"\n      v-model=\"data\"\n      @invalid=\"recordInvalidInputEditorValue\"\n      @valid=\"recordValidInputEditorValue\"\n      @input=\"valueChanged\"\n      @uploadstart=\"uploadStart\"\n      @uploadend=\"uploadEnd\"\n    />\n  </input-editor-form-group>\n</template>\n\n<script>\nimport UserFileInputEditor from \"./UserFileInputEditor.vue\";\nimport AutocompleteInputEditor from \"./AutocompleteInputEditor\";\nimport CheckboxInputEditor from \"./CheckboxInputEditor.vue\";\nimport FileInputEditor from \"./FileInputEditor.vue\";\nimport InputEditorFormGroup from \"./InputEditorFormGroup.vue\";\nimport MultiFileInputEditor from \"./MultiFileInputEditor.vue\";\nimport RadioButtonInputEditor from \"./RadioButtonInputEditor.vue\";\nimport RangeSliderInputEditor from \"./RangeSliderInputEditor.vue\";\nimport SelectInputEditor from \"./SelectInputEditor.vue\";\nimport SliderInputEditor from \"./SliderInputEditor.vue\";\nimport StringInputEditor from \"./StringInputEditor.vue\";\nimport TextareaInputEditor from \"./TextareaInputEditor.vue\";\n\nimport { models } from \"django-airavata-api\";\nimport { mixins, utils } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"input-editor-container\",\n  mixins: [mixins.VModelMixin],\n  props: {\n    experimentInput: {\n      type: models.InputDataObjectType,\n      required: true,\n    },\n    experiment: {\n      type: models.Experiment,\n      required: true,\n    },\n  },\n  components: {\n    AutocompleteInputEditor,\n    CheckboxInputEditor,\n    FileInputEditor,\n    InputEditorFormGroup,\n    MultiFileInputEditor,\n    RadioButtonInputEditor,\n    RangeSliderInputEditor,\n    SelectInputEditor,\n    SliderInputEditor,\n    StringInputEditor,\n    TextareaInputEditor,\n    UserFileInputEditor,\n  },\n  created() {\n    if (!this.show) {\n      this.handleHidingInput();\n    }\n  },\n  data: function () {\n    return {\n      state: null,\n      feedbackMessages: [],\n      inputHasBegun: false,\n      // Store the current value when hiding input so we can restore it when shown again\n      oldValue: null,\n      show: this.experimentInput.show,\n    };\n  },\n  computed: {\n    inputEditorComponentName: function () {\n      // If input specifices an editor UI component, use that\n      if (this.experimentInput.editorUIComponentId) {\n        return this.experimentInput.editorUIComponentId;\n      }\n      // Default UI components based on input type\n      if (this.experimentInput.type === models.DataType.STRING) {\n        return \"string-input-editor\";\n      } else if (this.experimentInput.type === models.DataType.URI) {\n        return \"file-input-editor\";\n      } else if (this.experimentInput.type === models.DataType.URI_COLLECTION) {\n        return \"multi-file-input-editor\";\n      }\n      // Default\n      return \"string-input-editor\";\n    },\n    inputEditorComponentId: function () {\n      return utils.sanitizeHTMLId(this.experimentInput.name);\n    },\n    validationFeedback: function () {\n      // Only display validation feedback after the user has provided\n      // input so that missing required value errors are only displayed\n      // after interacting with the input editor\n      return this.inputHasBegun ? this.feedbackMessages : null;\n    },\n    validationState: function () {\n      return this.inputHasBegun ? this.state : null;\n    },\n  },\n  methods: {\n    recordValidInputEditorValue: function () {\n      this.state = \"valid\";\n      this.$emit(\"valid\");\n    },\n    recordInvalidInputEditorValue: function (feedbackMessages) {\n      this.feedbackMessages = feedbackMessages;\n      this.state = \"invalid\";\n      this.$emit(\"invalid\", feedbackMessages);\n    },\n    valueChanged: function () {\n      this.inputHasBegun = true;\n    },\n    handleHidingInput: function () {\n      this.oldValue = this.data;\n      this.data = null;\n    },\n    handleShowingInput: function () {\n      if (this.oldValue !== null) {\n        this.data = this.oldValue;\n      }\n    },\n    uploadStart() {\n      this.$emit(\"uploadstart\");\n    },\n    uploadEnd() {\n      this.$emit(\"uploadend\");\n    },\n  },\n  watch: {\n    // This is a bit of a workaround for testing purposes. Watcher for\n    // \"experimentInput.show\" does not get triggered during unit test so sync it\n    // to \"show\" data variable and then in the unit test manipulate \"show\"\n    // directly.\n    \"experimentInput.show\": function (newValue) {\n      this.show = newValue;\n    },\n    show: function (newValue, oldValue) {\n      // Hiding\n      if (oldValue && !newValue) {\n        this.handleHidingInput();\n      }\n      // Showing\n      else if (newValue && !oldValue) {\n        this.handleShowingInput();\n      }\n    },\n  },\n};\n</script>\n"],"sourceRoot":"static/django_airavata_workspace/js/components/experiment/input-editors"}]}