{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/errors/ErrorReporter.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/errors/ErrorReporter.js","mtime":1638641844319},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport _classCallCheck from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { services } from \"..\";\nimport LogRecord from \"../models/LogRecord\";\nimport StackTrace from \"stacktrace-js\";\n\nvar ErrorReporter =\n/*#__PURE__*/\nfunction () {\n  function ErrorReporter() {\n    _classCallCheck(this, ErrorReporter);\n  }\n\n  _createClass(ErrorReporter, [{\n    key: \"reportUnhandledError\",\n    value: function reportUnhandledError(unhandledError) {\n      console.log(JSON.stringify(unhandledError, null, 4)); // eslint-disable-line no-console\n\n      StackTrace.fromError(unhandledError.error).then(function (stackframes) {\n        var stacktrace = stackframes.map(function (sf) {\n          return sf.toString();\n        });\n        services.LoggingService.send({\n          data: new LogRecord({\n            level: \"ERROR\",\n            message: unhandledError.message,\n            details: unhandledError.details,\n            stacktrace: stacktrace\n          })\n        }, {\n          ignoreErrors: true\n        }).catch(function (err) {\n          console.log(\"Failed to log error\", err); // eslint-disable-line no-console\n        });\n      }).catch(function (err) {\n        console.log(\"Failed to produce stacktrace\", err); // eslint-disable-line no-console\n      });\n    }\n  }]);\n\n  return ErrorReporter;\n}();\n\nexport default new ErrorReporter();",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/errors/ErrorReporter.js"],"names":["services","LogRecord","StackTrace","ErrorReporter","unhandledError","console","log","JSON","stringify","fromError","error","then","stackframes","stacktrace","map","sf","toString","LoggingService","send","data","level","message","details","ignoreErrors","catch","err"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,IAAzB;AACA,OAAOC,SAAP;AAEA,OAAOC,UAAP,MAAuB,eAAvB;;IAEMC,a;;;;;;;;;yCACiBC,c,EAAgB;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,cAAf,EAA+B,IAA/B,EAAqC,CAArC,CAAZ,EADmC,CACmB;;AAEtDF,MAAAA,UAAU,CAACO,SAAX,CAAqBL,cAAc,CAACM,KAApC,EACGC,IADH,CACQ,UAACC,WAAD,EAAiB;AACrB,YAAMC,UAAU,GAAGD,WAAW,CAACE,GAAZ,CAAgB,UAACC,EAAD;AAAA,iBAAQA,EAAE,CAACC,QAAH,EAAR;AAAA,SAAhB,CAAnB;AACAhB,QAAAA,QAAQ,CAACiB,cAAT,CAAwBC,IAAxB,CACE;AACEC,UAAAA,IAAI,EAAE,IAAIlB,SAAJ,CAAc;AAClBmB,YAAAA,KAAK,EAAE,OADW;AAElBC,YAAAA,OAAO,EAAEjB,cAAc,CAACiB,OAFN;AAGlBC,YAAAA,OAAO,EAAElB,cAAc,CAACkB,OAHN;AAIlBT,YAAAA,UAAU,EAAEA;AAJM,WAAd;AADR,SADF,EASE;AAAEU,UAAAA,YAAY,EAAE;AAAhB,SATF,EAUEC,KAVF,CAUQ,UAACC,GAAD,EAAS;AACfpB,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCmB,GAAnC,EADe,CAC0B;AAC1C,SAZD;AAaD,OAhBH,EAiBGD,KAjBH,CAiBS,UAACC,GAAD,EAAS;AACdpB,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CmB,GAA5C,EADc,CACoC;AACnD,OAnBH;AAoBD;;;;;;AAGH,eAAe,IAAItB,aAAJ,EAAf","sourcesContent":["import { services } from \"..\";\nimport LogRecord from \"../models/LogRecord\";\n\nimport StackTrace from \"stacktrace-js\";\n\nclass ErrorReporter {\n  reportUnhandledError(unhandledError) {\n    console.log(JSON.stringify(unhandledError, null, 4)); // eslint-disable-line no-console\n\n    StackTrace.fromError(unhandledError.error)\n      .then((stackframes) => {\n        const stacktrace = stackframes.map((sf) => sf.toString());\n        services.LoggingService.send(\n          {\n            data: new LogRecord({\n              level: \"ERROR\",\n              message: unhandledError.message,\n              details: unhandledError.details,\n              stacktrace: stacktrace,\n            }),\n          },\n          { ignoreErrors: true }\n        ).catch((err) => {\n          console.log(\"Failed to log error\", err); // eslint-disable-line no-console\n        });\n      })\n      .catch((err) => {\n        console.log(\"Failed to produce stacktrace\", err); // eslint-disable-line no-console\n      });\n  }\n}\n\nexport default new ErrorReporter();\n"]}]}