{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/PaginationIterator.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/PaginationIterator.js","mtime":1638641844323},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import FetchUtils from \"./FetchUtils\";\nexport default class PaginationIterator {\n  constructor(pagedResponse) {\n    var resultType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    this.resultType = resultType;\n    this.processResponse(pagedResponse);\n  }\n\n  next() {\n    return FetchUtils.get(this._next).then(json => this.processResponse(json));\n  }\n\n  hasNext() {\n    return this._next != null;\n  }\n\n  previous() {\n    return FetchUtils.get(this._previous).then(json => this.processResponse(json));\n  }\n\n  hasPrevious() {\n    return this._previous != null;\n  }\n\n  processResponse(pagedResponse) {\n    this._next = pagedResponse.next;\n    this._previous = pagedResponse.previous;\n\n    if (this.resultType) {\n      if (Array.isArray(pagedResponse.results)) {\n        this.results = pagedResponse.results.map(result => new this.resultType(result));\n      } else {\n        this.results = new this.resultType(pagedResponse.results);\n      }\n    } else {\n      this.results = pagedResponse.results;\n    }\n\n    this.offset = pagedResponse.offset;\n    this.limit = pagedResponse.limit;\n    this.count = pagedResponse.count;\n    return this;\n  }\n\n  toArray() {\n    var results = [].concat(this.results);\n\n    while (this.hasNext()) {\n      results = results.concat(this.next().results);\n    }\n\n    return results;\n  }\n\n}",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/PaginationIterator.js"],"names":["FetchUtils","PaginationIterator","constructor","pagedResponse","resultType","processResponse","next","get","_next","then","json","hasNext","previous","_previous","hasPrevious","Array","isArray","results","map","result","offset","limit","count","toArray","concat"],"mappings":"AAAA,OAAOA,UAAP;AAEA,eAAe,MAAMC,kBAAN,CAAyB;AACtCC,EAAAA,WAAW,CAACC,aAAD,EAAmC;AAAA,QAAnBC,UAAmB,uEAAN,IAAM;AAC5C,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,eAAL,CAAqBF,aAArB;AACD;;AAEDG,EAAAA,IAAI,GAAG;AACL,WAAON,UAAU,CAACO,GAAX,CAAe,KAAKC,KAApB,EAA2BC,IAA3B,CAAiCC,IAAD,IACrC,KAAKL,eAAL,CAAqBK,IAArB,CADK,CAAP;AAGD;;AAEDC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKH,KAAL,IAAc,IAArB;AACD;;AAEDI,EAAAA,QAAQ,GAAG;AACT,WAAOZ,UAAU,CAACO,GAAX,CAAe,KAAKM,SAApB,EAA+BJ,IAA/B,CAAqCC,IAAD,IACzC,KAAKL,eAAL,CAAqBK,IAArB,CADK,CAAP;AAGD;;AAEDI,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKD,SAAL,IAAkB,IAAzB;AACD;;AAEDR,EAAAA,eAAe,CAACF,aAAD,EAAgB;AAC7B,SAAKK,KAAL,GAAaL,aAAa,CAACG,IAA3B;AACA,SAAKO,SAAL,GAAiBV,aAAa,CAACS,QAA/B;;AACA,QAAI,KAAKR,UAAT,EAAqB;AACnB,UAAIW,KAAK,CAACC,OAAN,CAAcb,aAAa,CAACc,OAA5B,CAAJ,EAA0C;AACxC,aAAKA,OAAL,GAAed,aAAa,CAACc,OAAd,CAAsBC,GAAtB,CACZC,MAAD,IAAY,IAAI,KAAKf,UAAT,CAAoBe,MAApB,CADC,CAAf;AAGD,OAJD,MAIO;AACL,aAAKF,OAAL,GAAe,IAAI,KAAKb,UAAT,CAAoBD,aAAa,CAACc,OAAlC,CAAf;AACD;AACF,KARD,MAQO;AACL,WAAKA,OAAL,GAAed,aAAa,CAACc,OAA7B;AACD;;AACD,SAAKG,MAAL,GAAcjB,aAAa,CAACiB,MAA5B;AACA,SAAKC,KAAL,GAAalB,aAAa,CAACkB,KAA3B;AACA,SAAKC,KAAL,GAAanB,aAAa,CAACmB,KAA3B;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,QAAIN,OAAO,GAAG,GAAGO,MAAH,CAAU,KAAKP,OAAf,CAAd;;AACA,WAAO,KAAKN,OAAL,EAAP,EAAuB;AACrBM,MAAAA,OAAO,GAAGA,OAAO,CAACO,MAAR,CAAe,KAAKlB,IAAL,GAAYW,OAA3B,CAAV;AACD;;AACD,WAAOA,OAAP;AACD;;AApDqC","sourcesContent":["import FetchUtils from \"./FetchUtils\";\n\nexport default class PaginationIterator {\n  constructor(pagedResponse, resultType = null) {\n    this.resultType = resultType;\n    this.processResponse(pagedResponse);\n  }\n\n  next() {\n    return FetchUtils.get(this._next).then((json) =>\n      this.processResponse(json)\n    );\n  }\n\n  hasNext() {\n    return this._next != null;\n  }\n\n  previous() {\n    return FetchUtils.get(this._previous).then((json) =>\n      this.processResponse(json)\n    );\n  }\n\n  hasPrevious() {\n    return this._previous != null;\n  }\n\n  processResponse(pagedResponse) {\n    this._next = pagedResponse.next;\n    this._previous = pagedResponse.previous;\n    if (this.resultType) {\n      if (Array.isArray(pagedResponse.results)) {\n        this.results = pagedResponse.results.map(\n          (result) => new this.resultType(result)\n        );\n      } else {\n        this.results = new this.resultType(pagedResponse.results);\n      }\n    } else {\n      this.results = pagedResponse.results;\n    }\n    this.offset = pagedResponse.offset;\n    this.limit = pagedResponse.limit;\n    this.count = pagedResponse.count;\n    return this;\n  }\n\n  toArray() {\n    let results = [].concat(this.results);\n    while (this.hasNext()) {\n      results = results.concat(this.next().results);\n    }\n    return results;\n  }\n}\n"]}]}