{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/ComputationalResourceSchedulingEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/ComputationalResourceSchedulingEditor.vue","mtime":1638641844339},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.array.sort\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport QueueSettingsEditor from \"./QueueSettingsEditor.vue\";\nimport { errors, models, services, utils as apiUtils } from \"django-airavata-api\";\nimport { mixins, utils } from \"django-airavata-common-ui\";\nexport default {\n  name: \"computational-resource-scheduling-editor\",\n  mixins: [mixins.VModelMixin],\n  props: {\n    value: {\n      type: models.ComputationalResourceSchedulingModel\n    },\n    appModuleId: {\n      type: String,\n      required: true\n    },\n    groupResourceProfileId: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      computeResources: {},\n      applicationDeployments: [],\n      selectedGroupResourceProfileData: null,\n      resourceHostId: this.value.resourceHostId,\n      invalidQueueSettings: false,\n      workspacePreferences: null\n    };\n  },\n  components: {\n    QueueSettingsEditor: QueueSettingsEditor\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.loadWorkspacePreferences().then(function () {\n      _this.loadApplicationDeployments(_this.appModuleId, _this.groupResourceProfileId);\n    });\n    this.loadComputeResourceNames();\n    this.loadGroupResourceProfile();\n    this.validate();\n    this.$on(\"input\", function () {\n      return _this.validate();\n    });\n  },\n  computed: {\n    localComputationalResourceScheduling: function localComputationalResourceScheduling() {\n      return this.data;\n    },\n    computeResourceOptions: function computeResourceOptions() {\n      var _this2 = this;\n\n      var computeResourceOptions = this.applicationDeployments.map(function (dep) {\n        return {\n          value: dep.computeHostId,\n          text: dep.computeHostId in _this2.computeResources ? _this2.computeResources[dep.computeHostId] : \"\"\n        };\n      });\n      computeResourceOptions.sort(function (a, b) {\n        return a.text.localeCompare(b.text);\n      });\n      return computeResourceOptions;\n    },\n    selectedComputeResourcePolicy: function selectedComputeResourcePolicy() {\n      var _this3 = this;\n\n      if (this.selectedGroupResourceProfileData === null) {\n        return null;\n      }\n\n      return this.selectedGroupResourceProfileData.computeResourcePolicies.find(function (crp) {\n        return crp.computeResourceId === _this3.localComputationalResourceScheduling.resourceHostId;\n      });\n    },\n    batchQueueResourcePolicies: function batchQueueResourcePolicies() {\n      var _this4 = this;\n\n      if (this.selectedGroupResourceProfileData === null) {\n        return null;\n      }\n\n      return this.selectedGroupResourceProfileData.batchQueueResourcePolicies.filter(function (bqrp) {\n        return bqrp.computeResourceId === _this4.localComputationalResourceScheduling.resourceHostId;\n      });\n    },\n    appDeploymentId: function appDeploymentId() {\n      var _this5 = this;\n\n      // We'll only be able to figure out the appDeploymentId when a\n      // resourceHostId is selected and the application deployments are\n      // loaded\n      if (!this.resourceHostId || this.applicationDeployments.length === 0) {\n        return null;\n      } // Find application deployment that corresponds to this compute resource\n\n\n      var selectedApplicationDeployment = this.applicationDeployments.find(function (dep) {\n        return dep.computeHostId === _this5.resourceHostId;\n      });\n\n      if (!selectedApplicationDeployment) {\n        throw new Error(\"Failed to find application deployment!\");\n      }\n\n      return selectedApplicationDeployment.appDeploymentId;\n    },\n    validation: function validation() {\n      var queueInfo = {}; // QueueSettingsEditor will validate queue information\n\n      return this.localComputationalResourceScheduling.validate(queueInfo);\n    },\n    valid: function valid() {\n      return !this.invalidQueueSettings && Object.keys(this.validation).length === 0;\n    }\n  },\n  methods: {\n    computeResourceChanged: function computeResourceChanged(selectedComputeResourceId) {\n      this.data.resourceHostId = selectedComputeResourceId;\n    },\n    loadApplicationDeployments: function loadApplicationDeployments(appModuleId, groupResourceProfileId) {\n      var _this6 = this;\n\n      services.ApplicationDeploymentService.list({\n        appModuleId: appModuleId,\n        groupResourceProfileId: groupResourceProfileId\n      }, {\n        ignoreErrors: true\n      }).then(function (applicationDeployments) {\n        _this6.applicationDeployments = applicationDeployments;\n      }).catch(function (error) {\n        // Ignore unauthorized errors, force user to pick another GroupResourceProfile\n        if (!errors.ErrorUtils.isUnauthorizedError(error)) {\n          return Promise.reject(error);\n        }\n      }) // Report all other error types\n      .catch(apiUtils.FetchUtils.reportError);\n    },\n    loadGroupResourceProfile: function loadGroupResourceProfile() {\n      var _this7 = this;\n\n      services.GroupResourceProfileService.retrieve({\n        lookup: this.groupResourceProfileId\n      }, {\n        ignoreErrors: true\n      }).then(function (groupResourceProfile) {\n        _this7.selectedGroupResourceProfileData = groupResourceProfile;\n      }).catch(function (error) {\n        // Ignore unauthorized errors, force user to pick a different GroupResourceProfile\n        if (!errors.ErrorUtils.isUnauthorizedError(error)) {\n          return Promise.reject(error);\n        }\n      }) // Report all other error types\n      .catch(apiUtils.FetchUtils.reportError);\n    },\n    loadComputeResourceNames: function loadComputeResourceNames() {\n      var _this8 = this;\n\n      services.ComputeResourceService.names().then(function (computeResourceNames) {\n        return _this8.computeResources = computeResourceNames;\n      });\n    },\n    loadWorkspacePreferences: function loadWorkspacePreferences() {\n      var _this9 = this;\n\n      return services.WorkspacePreferencesService.get().then(function (workspacePreferences) {\n        return _this9.workspacePreferences = workspacePreferences;\n      });\n    },\n    queueSettingsChanged: function queueSettingsChanged() {\n      // QueueSettingsEditor updates the full\n      // ComputationalResourceSchedulingModel instance but doesn't know\n      // the resourceHostId so we need to copy it back into the instance\n      // whenever it changes\n      this.localComputationalResourceScheduling.resourceHostId = this.resourceHostId;\n      this.$emit(\"input\", this.data);\n    },\n    queueSettingsValidityChanged: function queueSettingsValidityChanged(valid) {\n      this.invalidQueueSettings = !valid;\n      this.validate();\n    },\n    validate: function validate() {\n      if (!this.valid) {\n        this.$emit(\"invalid\");\n      } else {\n        this.$emit(\"valid\");\n      }\n    },\n    emitValueChanged: function emitValueChanged() {\n      this.validate();\n      this.$emit(\"input\", this.localComputationalResourceScheduling);\n    },\n    getValidationFeedback: function getValidationFeedback(properties) {\n      return utils.getProperty(this.validation, properties);\n    },\n    getValidationState: function getValidationState(properties) {\n      return this.getValidationFeedback(properties) ? \"invalid\" : null;\n    }\n  },\n  watch: {\n    computeResourceOptions: function computeResourceOptions(newOptions) {\n      var _this10 = this;\n\n      // If the selected resourceHostId is not in the new list of\n      // computeResourceOptions, reset it to null\n      if (this.resourceHostId !== null && !newOptions.find(function (opt) {\n        return opt.value === _this10.resourceHostId;\n      })) {\n        this.resourceHostId = null;\n      } // Apply preferred (most recently used) compute resource\n\n\n      if (this.resourceHostId === null && this.workspacePreferences.most_recent_compute_resource_id && newOptions.find(function (opt) {\n        return opt.value === _this10.workspacePreferences.most_recent_compute_resource_id;\n      })) {\n        this.resourceHostId = this.workspacePreferences.most_recent_compute_resource_id;\n      } // If none selected, just pick the first one\n\n\n      if (this.resourceHostId === null && newOptions.length > 0) {\n        this.resourceHostId = newOptions[0].value;\n      }\n\n      this.computeResourceChanged(this.resourceHostId);\n    },\n    groupResourceProfileId: function groupResourceProfileId(newGroupResourceProfileId) {\n      this.loadApplicationDeployments(this.appModuleId, newGroupResourceProfileId);\n\n      if (this.selectedGroupResourceProfileData && this.selectedGroupResourceProfileData.groupResourceProfileId !== newGroupResourceProfileId) {\n        this.loadGroupResourceProfile();\n      }\n    }\n  }\n};",{"version":3,"sources":["ComputationalResourceSchedulingEditor.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <b-form-group\n          label=\"Compute Resource\"\n          label-for=\"compute-resource\"\n          :feedback=\"getValidationFeedback('resourceHostId')\"\n          :state=\"getValidationState('resourceHostId')\"\n        >\n          <b-form-select\n            id=\"compute-resource\"\n            v-model=\"resourceHostId\"\n            :options=\"computeResourceOptions\"\n            required\n            @change=\"computeResourceChanged\"\n            :state=\"getValidationState('resourceHostId')\"\n            :disabled=\"\n              !computeResourceOptions || computeResourceOptions.length === 0\n            \"\n          >\n            <template slot=\"first\">\n              <option :value=\"null\" disabled>Select a Compute Resource</option>\n            </template>\n          </b-form-select>\n        </b-form-group>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <queue-settings-editor\n          v-model=\"data\"\n          v-if=\"appDeploymentId\"\n          :app-deployment-id=\"appDeploymentId\"\n          :compute-resource-policy=\"selectedComputeResourcePolicy\"\n          :batch-queue-resource-policies=\"batchQueueResourcePolicies\"\n          @input=\"queueSettingsChanged\"\n          @valid=\"queueSettingsValidityChanged(true)\"\n          @invalid=\"queueSettingsValidityChanged(false)\"\n        >\n        </queue-settings-editor>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport QueueSettingsEditor from \"./QueueSettingsEditor.vue\";\nimport {\n  errors,\n  models,\n  services,\n  utils as apiUtils,\n} from \"django-airavata-api\";\nimport { mixins, utils } from \"django-airavata-common-ui\";\n\nexport default {\n  name: \"computational-resource-scheduling-editor\",\n  mixins: [mixins.VModelMixin],\n  props: {\n    value: {\n      type: models.ComputationalResourceSchedulingModel,\n    },\n    appModuleId: {\n      type: String,\n      required: true,\n    },\n    groupResourceProfileId: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      computeResources: {},\n      applicationDeployments: [],\n      selectedGroupResourceProfileData: null,\n      resourceHostId: this.value.resourceHostId,\n      invalidQueueSettings: false,\n      workspacePreferences: null,\n    };\n  },\n  components: {\n    QueueSettingsEditor,\n  },\n  mounted: function () {\n    this.loadWorkspacePreferences().then(() => {\n      this.loadApplicationDeployments(\n        this.appModuleId,\n        this.groupResourceProfileId\n      );\n    });\n    this.loadComputeResourceNames();\n    this.loadGroupResourceProfile();\n    this.validate();\n    this.$on(\"input\", () => this.validate());\n  },\n  computed: {\n    localComputationalResourceScheduling() {\n      return this.data;\n    },\n    computeResourceOptions: function () {\n      const computeResourceOptions = this.applicationDeployments.map((dep) => {\n        return {\n          value: dep.computeHostId,\n          text:\n            dep.computeHostId in this.computeResources\n              ? this.computeResources[dep.computeHostId]\n              : \"\",\n        };\n      });\n      computeResourceOptions.sort((a, b) => a.text.localeCompare(b.text));\n      return computeResourceOptions;\n    },\n    selectedComputeResourcePolicy: function () {\n      if (this.selectedGroupResourceProfileData === null) {\n        return null;\n      }\n      return this.selectedGroupResourceProfileData.computeResourcePolicies.find(\n        (crp) => {\n          return (\n            crp.computeResourceId ===\n            this.localComputationalResourceScheduling.resourceHostId\n          );\n        }\n      );\n    },\n    batchQueueResourcePolicies: function () {\n      if (this.selectedGroupResourceProfileData === null) {\n        return null;\n      }\n      return this.selectedGroupResourceProfileData.batchQueueResourcePolicies.filter(\n        (bqrp) => {\n          return (\n            bqrp.computeResourceId ===\n            this.localComputationalResourceScheduling.resourceHostId\n          );\n        }\n      );\n    },\n    appDeploymentId: function () {\n      // We'll only be able to figure out the appDeploymentId when a\n      // resourceHostId is selected and the application deployments are\n      // loaded\n      if (!this.resourceHostId || this.applicationDeployments.length === 0) {\n        return null;\n      }\n      // Find application deployment that corresponds to this compute resource\n      let selectedApplicationDeployment = this.applicationDeployments.find(\n        (dep) => dep.computeHostId === this.resourceHostId\n      );\n      if (!selectedApplicationDeployment) {\n        throw new Error(\"Failed to find application deployment!\");\n      }\n      return selectedApplicationDeployment.appDeploymentId;\n    },\n    validation() {\n      const queueInfo = {}; // QueueSettingsEditor will validate queue information\n      return this.localComputationalResourceScheduling.validate(queueInfo);\n    },\n    valid() {\n      return (\n        !this.invalidQueueSettings && Object.keys(this.validation).length === 0\n      );\n    },\n  },\n  methods: {\n    computeResourceChanged: function (selectedComputeResourceId) {\n      this.data.resourceHostId = selectedComputeResourceId;\n    },\n    loadApplicationDeployments: function (appModuleId, groupResourceProfileId) {\n      services.ApplicationDeploymentService.list(\n        {\n          appModuleId: appModuleId,\n          groupResourceProfileId: groupResourceProfileId,\n        },\n        { ignoreErrors: true }\n      )\n        .then((applicationDeployments) => {\n          this.applicationDeployments = applicationDeployments;\n        })\n        .catch((error) => {\n          // Ignore unauthorized errors, force user to pick another GroupResourceProfile\n          if (!errors.ErrorUtils.isUnauthorizedError(error)) {\n            return Promise.reject(error);\n          }\n        })\n        // Report all other error types\n        .catch(apiUtils.FetchUtils.reportError);\n    },\n    loadGroupResourceProfile: function () {\n      services.GroupResourceProfileService.retrieve(\n        { lookup: this.groupResourceProfileId },\n        { ignoreErrors: true }\n      )\n        .then((groupResourceProfile) => {\n          this.selectedGroupResourceProfileData = groupResourceProfile;\n        })\n        .catch((error) => {\n          // Ignore unauthorized errors, force user to pick a different GroupResourceProfile\n          if (!errors.ErrorUtils.isUnauthorizedError(error)) {\n            return Promise.reject(error);\n          }\n        })\n        // Report all other error types\n        .catch(apiUtils.FetchUtils.reportError);\n    },\n    loadComputeResourceNames: function () {\n      services.ComputeResourceService.names().then(\n        (computeResourceNames) => (this.computeResources = computeResourceNames)\n      );\n    },\n    loadWorkspacePreferences() {\n      return services.WorkspacePreferencesService.get().then(\n        (workspacePreferences) =>\n          (this.workspacePreferences = workspacePreferences)\n      );\n    },\n    queueSettingsChanged: function () {\n      // QueueSettingsEditor updates the full\n      // ComputationalResourceSchedulingModel instance but doesn't know\n      // the resourceHostId so we need to copy it back into the instance\n      // whenever it changes\n      this.localComputationalResourceScheduling.resourceHostId = this.resourceHostId;\n      this.$emit(\"input\", this.data);\n    },\n    queueSettingsValidityChanged(valid) {\n      this.invalidQueueSettings = !valid;\n      this.validate();\n    },\n    validate() {\n      if (!this.valid) {\n        this.$emit(\"invalid\");\n      } else {\n        this.$emit(\"valid\");\n      }\n    },\n    emitValueChanged: function () {\n      this.validate();\n      this.$emit(\"input\", this.localComputationalResourceScheduling);\n    },\n    getValidationFeedback: function (properties) {\n      return utils.getProperty(this.validation, properties);\n    },\n    getValidationState: function (properties) {\n      return this.getValidationFeedback(properties) ? \"invalid\" : null;\n    },\n  },\n  watch: {\n    computeResourceOptions: function (newOptions) {\n      // If the selected resourceHostId is not in the new list of\n      // computeResourceOptions, reset it to null\n      if (\n        this.resourceHostId !== null &&\n        !newOptions.find((opt) => opt.value === this.resourceHostId)\n      ) {\n        this.resourceHostId = null;\n      }\n      // Apply preferred (most recently used) compute resource\n      if (\n        this.resourceHostId === null &&\n        this.workspacePreferences.most_recent_compute_resource_id &&\n        newOptions.find(\n          (opt) =>\n            opt.value ===\n            this.workspacePreferences.most_recent_compute_resource_id\n        )\n      ) {\n        this.resourceHostId = this.workspacePreferences.most_recent_compute_resource_id;\n      }\n      // If none selected, just pick the first one\n      if (this.resourceHostId === null && newOptions.length > 0) {\n        this.resourceHostId = newOptions[0].value;\n      }\n      this.computeResourceChanged(this.resourceHostId);\n    },\n    groupResourceProfileId: function (newGroupResourceProfileId) {\n      this.loadApplicationDeployments(\n        this.appModuleId,\n        newGroupResourceProfileId\n      );\n      if (\n        this.selectedGroupResourceProfileData &&\n        this.selectedGroupResourceProfileData.groupResourceProfileId !==\n          newGroupResourceProfileId\n      ) {\n        this.loadGroupResourceProfile();\n      }\n    },\n  },\n};\n</script>\n\n<style></style>\n"],"sourceRoot":"static/django_airavata_workspace/js/components/experiment"}]}