{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/output-displays/OutputViewDataLoader.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/output-displays/OutputViewDataLoader.js","mtime":1638641844339},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { utils } from \"django-airavata-api\"; // Set to true to enable test mode, which will use the test_output_file\n// attribute on the Output View Provider class instead of the actual output file\n\nvar TEST_MODE = false;\n\nvar OutputViewDataLoader =\n/*#__PURE__*/\nfunction () {\n  function OutputViewDataLoader(_ref) {\n    var url = _ref.url,\n        experimentId = _ref.experimentId,\n        experimentOutputName = _ref.experimentOutputName,\n        providerId = _ref.providerId;\n\n    _classCallCheck(this, OutputViewDataLoader);\n\n    this.url = url;\n    this.experimentId = experimentId;\n    this.experimentOutputName = experimentOutputName;\n    this.providerId = providerId;\n    this.data = null;\n  }\n\n  _createClass(OutputViewDataLoader, [{\n    key: \"load\",\n    value: function load() {\n      var _this = this;\n\n      var newParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (newParams && this.data) {\n        this.data.interactive = newParams;\n      }\n\n      return utils.FetchUtils.get(this.url, _objectSpread({\n        \"experiment-id\": this.experimentId,\n        \"experiment-output-name\": this.experimentOutputName,\n        \"provider-id\": this.providerId,\n        \"test-mode\": TEST_MODE\n      }, this.createInteractiveParams())).then(function (resp) {\n        _this.data = resp;\n        return resp;\n      });\n    }\n  }, {\n    key: \"createInteractiveParams\",\n    value: function createInteractiveParams() {\n      var params = {};\n      var meta = {};\n\n      if (this.data && this.data.interactive) {\n        this.data.interactive.forEach(function (p) {\n          params[p.name] = p.value;\n          meta[p.name] = {\n            type: p.type\n          };\n        });\n      }\n\n      if (Object.keys(meta).length > 0) {\n        // Special _meta query parameter holds type information, which is needed\n        // when the type of a parameter can't be inferred when it is missing a\n        // default value\n        params._meta = JSON.stringify(meta);\n      }\n\n      return params;\n    }\n  }]);\n\n  return OutputViewDataLoader;\n}();\n\nexport { OutputViewDataLoader as default };",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/output-displays/OutputViewDataLoader.js"],"names":["utils","TEST_MODE","OutputViewDataLoader","url","experimentId","experimentOutputName","providerId","data","newParams","interactive","FetchUtils","get","createInteractiveParams","then","resp","params","meta","forEach","p","name","value","type","Object","keys","length","_meta","JSON","stringify"],"mappings":";;;;;;;;;;;;AAAA,SAASA,KAAT,QAAsB,qBAAtB,C,CAEA;AACA;;AACA,IAAMC,SAAS,GAAG,KAAlB;;IAEqBC,oB;;;AACnB,sCAAqE;AAAA,QAAvDC,GAAuD,QAAvDA,GAAuD;AAAA,QAAlDC,YAAkD,QAAlDA,YAAkD;AAAA,QAApCC,oBAAoC,QAApCA,oBAAoC;AAAA,QAAdC,UAAc,QAAdA,UAAc;;AAAA;;AACnE,SAAKH,GAAL,GAAWA,GAAX;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,IAAL,GAAY,IAAZ;AACD;;;;2BAEsB;AAAA;;AAAA,UAAlBC,SAAkB,uEAAN,IAAM;;AACrB,UAAIA,SAAS,IAAI,KAAKD,IAAtB,EAA4B;AAC1B,aAAKA,IAAL,CAAUE,WAAV,GAAwBD,SAAxB;AACD;;AACD,aAAOR,KAAK,CAACU,UAAN,CAAiBC,GAAjB,CAAqB,KAAKR,GAA1B;AACL,yBAAiB,KAAKC,YADjB;AAEL,kCAA0B,KAAKC,oBAF1B;AAGL,uBAAe,KAAKC,UAHf;AAIL,qBAAaL;AAJR,SAKF,KAAKW,uBAAL,EALE,GAMJC,IANI,CAMC,UAACC,IAAD,EAAU;AAChB,QAAA,KAAI,CAACP,IAAL,GAAYO,IAAZ;AACA,eAAOA,IAAP;AACD,OATM,CAAP;AAUD;;;8CAEyB;AACxB,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,IAAI,GAAG,EAAb;;AACA,UAAI,KAAKT,IAAL,IAAa,KAAKA,IAAL,CAAUE,WAA3B,EAAwC;AACtC,aAAKF,IAAL,CAAUE,WAAV,CAAsBQ,OAAtB,CAA8B,UAACC,CAAD,EAAO;AACnCH,UAAAA,MAAM,CAACG,CAAC,CAACC,IAAH,CAAN,GAAiBD,CAAC,CAACE,KAAnB;AACAJ,UAAAA,IAAI,CAACE,CAAC,CAACC,IAAH,CAAJ,GAAe;AACbE,YAAAA,IAAI,EAAEH,CAAC,CAACG;AADK,WAAf;AAGD,SALD;AAMD;;AACD,UAAIC,MAAM,CAACC,IAAP,CAAYP,IAAZ,EAAkBQ,MAAlB,GAA2B,CAA/B,EAAkC;AAChC;AACA;AACA;AACAT,QAAAA,MAAM,CAACU,KAAP,GAAeC,IAAI,CAACC,SAAL,CAAeX,IAAf,CAAf;AACD;;AACD,aAAOD,MAAP;AACD;;;;;;SA3CkBb,oB","sourcesContent":["import { utils } from \"django-airavata-api\";\n\n// Set to true to enable test mode, which will use the test_output_file\n// attribute on the Output View Provider class instead of the actual output file\nconst TEST_MODE = false;\n\nexport default class OutputViewDataLoader {\n  constructor({ url, experimentId, experimentOutputName, providerId }) {\n    this.url = url;\n    this.experimentId = experimentId;\n    this.experimentOutputName = experimentOutputName;\n    this.providerId = providerId;\n    this.data = null;\n  }\n\n  load(newParams = null) {\n    if (newParams && this.data) {\n      this.data.interactive = newParams;\n    }\n    return utils.FetchUtils.get(this.url, {\n      \"experiment-id\": this.experimentId,\n      \"experiment-output-name\": this.experimentOutputName,\n      \"provider-id\": this.providerId,\n      \"test-mode\": TEST_MODE,\n      ...this.createInteractiveParams(),\n    }).then((resp) => {\n      this.data = resp;\n      return resp;\n    });\n  }\n\n  createInteractiveParams() {\n    const params = {};\n    const meta = {};\n    if (this.data && this.data.interactive) {\n      this.data.interactive.forEach((p) => {\n        params[p.name] = p.value;\n        meta[p.name] = {\n          type: p.type,\n        };\n      });\n    }\n    if (Object.keys(meta).length > 0) {\n      // Special _meta query parameter holds type information, which is needed\n      // when the type of a parameter can't be inferred when it is missing a\n      // default value\n      params._meta = JSON.stringify(meta);\n    }\n    return params;\n  }\n}\n"]}]}