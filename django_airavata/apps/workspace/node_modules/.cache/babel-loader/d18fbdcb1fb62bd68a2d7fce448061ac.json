{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/dependencies/BooleanExpressionEvaluator.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/dependencies/BooleanExpressionEvaluator.js","mtime":1638641844323},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nexport default class BooleanExpressionEvaluator {\n  /**\n   * Context to use for looking up values of variables in expressions.\n   * @param {object} context\n   */\n  constructor(context) {\n    this.context = context;\n  }\n  /**\n   * Evaluates boolean expression and returns boolean result.\n   * @param {object} expression\n   */\n\n\n  evaluate(expression) {\n    var keys = Object.keys(expression);\n\n    if (keys.length > 1) {\n      // Implicitly AND together several expressions\n      return this.evaluate({\n        AND: keys.map(k => {\n          var exp = {};\n          exp[k] = expression[k];\n          return exp;\n        })\n      });\n    }\n\n    if (keys.length < 1) {\n      throw new Error(\"Expression does not contain a key: \" + JSON.stringify(expression));\n    }\n\n    var key = keys[0];\n    var value = expression[key];\n\n    if (key === \"AND\") {\n      if (value instanceof Array) {\n        var evaluations = value.map(exp => this.evaluate(exp));\n        return evaluations.reduce((acc, curr) => acc && curr);\n      } else {\n        throw new Error(\"Unrecognized operand value for AND: \" + JSON.stringify(value));\n      }\n    } else if (key === \"OR\") {\n      if (value instanceof Array) {\n        var _evaluations = value.map(exp => this.evaluate(exp));\n\n        return _evaluations.reduce((acc, curr) => acc || curr);\n      } else {\n        throw new Error(\"Unrecognized operand value for OR: \" + JSON.stringify(value));\n      }\n    } else if (key === \"NOT\") {\n      if (typeof value === \"object\" && !(value instanceof Array)) {\n        return !this.evaluate(value);\n      } else {\n        throw new Error(\"Unrecognized operand value for NOT: \" + JSON.stringify(value));\n      }\n    }\n\n    if (typeof value === \"object\") {\n      if (!(key in this.context)) {\n        throw new Error(\"Missing context value for expression \" + JSON.stringify(expression) + \" in context \" + JSON.stringify(this.context));\n      }\n\n      var contextValue = this.context[key];\n      return this._evaluateComparison(contextValue, value);\n    }\n  }\n\n  _evaluateComparison(value, comparisonDefinition) {\n    var comparison = comparisonDefinition[\"comparison\"];\n\n    if (!comparison) {\n      throw new Error(\"Expression definition is missing 'comparison' property: \" + JSON.stringify(comparisonDefinition));\n    }\n\n    if (comparison === \"equals\") {\n      return value === this._getComparisonValue(comparisonDefinition);\n    }\n\n    throw new Error(\"Unrecognized comparison \" + JSON.stringify(comparison));\n  }\n\n  _getComparisonValue(comparisonDefinition) {\n    if (!(\"value\" in comparisonDefinition)) {\n      throw new Error(\"Missing required 'value' property in comparison definition: \" + JSON.stringify(comparisonDefinition));\n    }\n\n    return comparisonDefinition[\"value\"];\n  }\n\n}",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/dependencies/BooleanExpressionEvaluator.js"],"names":["BooleanExpressionEvaluator","constructor","context","evaluate","expression","keys","Object","length","AND","map","k","exp","Error","JSON","stringify","key","value","Array","evaluations","reduce","acc","curr","contextValue","_evaluateComparison","comparisonDefinition","comparison","_getComparisonValue"],"mappings":"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","sourcesContent":["export default class BooleanExpressionEvaluator {\n  /**\n   * Context to use for looking up values of variables in expressions.\n   * @param {object} context\n   */\n  constructor(context) {\n    this.context = context;\n  }\n  /**\n   * Evaluates boolean expression and returns boolean result.\n   * @param {object} expression\n   */\n  evaluate(expression) {\n    const keys = Object.keys(expression);\n    if (keys.length > 1) {\n      // Implicitly AND together several expressions\n      return this.evaluate({\n        AND: keys.map((k) => {\n          const exp = {};\n          exp[k] = expression[k];\n          return exp;\n        }),\n      });\n    }\n    if (keys.length < 1) {\n      throw new Error(\n        \"Expression does not contain a key: \" + JSON.stringify(expression)\n      );\n    }\n\n    const key = keys[0];\n    const value = expression[key];\n    if (key === \"AND\") {\n      if (value instanceof Array) {\n        const evaluations = value.map((exp) => this.evaluate(exp));\n        return evaluations.reduce((acc, curr) => acc && curr);\n      } else {\n        throw new Error(\n          \"Unrecognized operand value for AND: \" + JSON.stringify(value)\n        );\n      }\n    } else if (key === \"OR\") {\n      if (value instanceof Array) {\n        const evaluations = value.map((exp) => this.evaluate(exp));\n        return evaluations.reduce((acc, curr) => acc || curr);\n      } else {\n        throw new Error(\n          \"Unrecognized operand value for OR: \" + JSON.stringify(value)\n        );\n      }\n    } else if (key === \"NOT\") {\n      if (typeof value === \"object\" && !(value instanceof Array)) {\n        return !this.evaluate(value);\n      } else {\n        throw new Error(\n          \"Unrecognized operand value for NOT: \" + JSON.stringify(value)\n        );\n      }\n    }\n\n    if (typeof value === \"object\") {\n      if (!(key in this.context)) {\n        throw new Error(\n          \"Missing context value for expression \" +\n            JSON.stringify(expression) +\n            \" in context \" +\n            JSON.stringify(this.context)\n        );\n      }\n      const contextValue = this.context[key];\n      return this._evaluateComparison(contextValue, value);\n    }\n  }\n\n  _evaluateComparison(value, comparisonDefinition) {\n    const comparison = comparisonDefinition[\"comparison\"];\n    if (!comparison) {\n      throw new Error(\n        \"Expression definition is missing 'comparison' property: \" +\n          JSON.stringify(comparisonDefinition)\n      );\n    }\n    if (comparison === \"equals\") {\n      return value === this._getComparisonValue(comparisonDefinition);\n    }\n    throw new Error(\"Unrecognized comparison \" + JSON.stringify(comparison));\n  }\n\n  _getComparisonValue(comparisonDefinition) {\n    if (!(\"value\" in comparisonDefinition)) {\n      throw new Error(\n        \"Missing required 'value' property in comparison definition: \" +\n          JSON.stringify(comparisonDefinition)\n      );\n    }\n    return comparisonDefinition[\"value\"];\n  }\n}\n"]}]}