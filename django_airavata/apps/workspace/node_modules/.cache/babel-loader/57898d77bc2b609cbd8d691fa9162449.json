{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/Experiment.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/Experiment.js","mtime":1638641844319},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport BaseModel from \"./BaseModel\";\nimport ErrorModel from \"./ErrorModel\";\nimport ExperimentState from \"./ExperimentState\";\nimport ExperimentStatus from \"./ExperimentStatus\";\nimport InputDataObjectType from \"./InputDataObjectType\";\nimport OutputDataObjectType from \"./OutputDataObjectType\";\nimport ProcessModel from \"./ProcessModel\";\nimport UserConfigurationData from \"./UserConfigurationData\";\nvar FIELDS = [\"experimentId\", \"projectId\", \"gatewayId\", {\n  name: \"experimentType\",\n  type: \"number\",\n  default: 0\n}, \"userName\", \"experimentName\", {\n  name: \"creationTime\",\n  type: \"date\"\n}, \"description\", \"executionId\", {\n  name: \"enableEmailNotification\",\n  type: \"boolean\",\n  default: false\n}, {\n  name: \"emailAddresses\",\n  type: \"string\",\n  list: true\n}, {\n  name: \"userConfigurationData\",\n  type: UserConfigurationData,\n  default: BaseModel.defaultNewInstance(UserConfigurationData)\n}, {\n  name: \"experimentInputs\",\n  type: InputDataObjectType,\n  list: true,\n  default: BaseModel.defaultNewInstance(Array)\n}, {\n  name: \"experimentOutputs\",\n  type: OutputDataObjectType,\n  list: true\n}, {\n  name: \"experimentStatus\",\n  type: ExperimentStatus,\n  list: true\n}, {\n  name: \"errors\",\n  type: ErrorModel,\n  list: true\n}, {\n  name: \"processes\",\n  type: ProcessModel,\n  list: true\n}, \"workflow\", {\n  name: \"userHasWriteAccess\",\n  type: \"boolean\",\n  default: true\n}];\nexport default class Experiment extends BaseModel {\n  constructor() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(FIELDS, data);\n    this.evaluateInputDependencies();\n  }\n\n  validate() {\n    var validationResults = {};\n\n    if (this.isEmpty(this.experimentName)) {\n      validationResults[\"experimentName\"] = \"Please provide a name for this experiment.\";\n    }\n\n    if (this.isEmpty(this.projectId)) {\n      validationResults[\"projectId\"] = \"Please select a project.\";\n    }\n\n    return validationResults;\n  }\n\n  get latestStatus() {\n    if (this.experimentStatus && this.experimentStatus.length > 0) {\n      return this.experimentStatus[this.experimentStatus.length - 1];\n    } else {\n      return null;\n    }\n  }\n\n  get isProgressing() {\n    return this.latestStatus && this.latestStatus.isProgressing;\n  }\n\n  get isFinished() {\n    return this.latestStatus && this.latestStatus.isFinished;\n  }\n\n  get hasLaunched() {\n    var hasLaunchedStates = [ExperimentState.SCHEDULED, ExperimentState.LAUNCHED, ExperimentState.EXECUTING, ExperimentState.CANCELING, ExperimentState.CANCELED, ExperimentState.FAILED, ExperimentState.COMPLETED];\n    return this.latestStatus && hasLaunchedStates.indexOf(this.latestStatus.state) >= 0;\n  }\n\n  get isEditable() {\n    return (!this.latestStatus || this.latestStatus.state === ExperimentState.CREATED) && this.userHasWriteAccess;\n  }\n\n  get isCancelable() {\n    switch (this.latestStatus.state) {\n      case ExperimentState.VALIDATED:\n      case ExperimentState.SCHEDULED:\n      case ExperimentState.LAUNCHED:\n      case ExperimentState.EXECUTING:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  get resourceHostId() {\n    return this.userConfigurationData && this.userConfigurationData.computationalResourceScheduling ? this.userConfigurationData.computationalResourceScheduling.resourceHostId : null;\n  }\n\n  populateInputsOutputsFromApplicationInterface(applicationInterface) {\n    // Copy application inputs and outputs to the experiment\n    this.experimentInputs = applicationInterface.applicationInputs.map(input => input.clone());\n    this.evaluateInputDependencies();\n    this.experimentOutputs = applicationInterface.applicationOutputs.slice();\n  }\n\n  evaluateInputDependencies() {\n    var inputValues = this._collectInputValues(this.experimentInputs);\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = this.experimentInputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var input = _step.value;\n        input.evaluateDependencies(inputValues);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  getExperimentInput(inputName) {\n    return this.experimentInputs.find(inp => inp.name === inputName);\n  }\n\n  getExperimentOutput(outputName) {\n    return this.experimentOutputs.find(out => out.name === outputName);\n  }\n\n  _collectInputValues() {\n    var result = {};\n    this.experimentInputs.forEach(inp => {\n      result[inp.name] = inp.value;\n    });\n    return result;\n  }\n\n}",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/Experiment.js"],"names":["BaseModel","ErrorModel","ExperimentState","ExperimentStatus","InputDataObjectType","OutputDataObjectType","ProcessModel","UserConfigurationData","FIELDS","name","type","default","list","defaultNewInstance","Array","Experiment","constructor","data","evaluateInputDependencies","validate","validationResults","isEmpty","experimentName","projectId","latestStatus","experimentStatus","length","isProgressing","isFinished","hasLaunched","hasLaunchedStates","SCHEDULED","LAUNCHED","EXECUTING","CANCELING","CANCELED","FAILED","COMPLETED","indexOf","state","isEditable","CREATED","userHasWriteAccess","isCancelable","VALIDATED","resourceHostId","userConfigurationData","computationalResourceScheduling","populateInputsOutputsFromApplicationInterface","applicationInterface","experimentInputs","applicationInputs","map","input","clone","experimentOutputs","applicationOutputs","slice","inputValues","_collectInputValues","evaluateDependencies","getExperimentInput","inputName","find","inp","getExperimentOutput","outputName","out","result","forEach","value"],"mappings":"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","sourcesContent":["import BaseModel from \"./BaseModel\";\nimport ErrorModel from \"./ErrorModel\";\nimport ExperimentState from \"./ExperimentState\";\nimport ExperimentStatus from \"./ExperimentStatus\";\nimport InputDataObjectType from \"./InputDataObjectType\";\nimport OutputDataObjectType from \"./OutputDataObjectType\";\nimport ProcessModel from \"./ProcessModel\";\nimport UserConfigurationData from \"./UserConfigurationData\";\n\nconst FIELDS = [\n  \"experimentId\",\n  \"projectId\",\n  \"gatewayId\",\n  {\n    name: \"experimentType\",\n    type: \"number\",\n    default: 0,\n  },\n  \"userName\",\n  \"experimentName\",\n  {\n    name: \"creationTime\",\n    type: \"date\",\n  },\n  \"description\",\n  \"executionId\",\n  {\n    name: \"enableEmailNotification\",\n    type: \"boolean\",\n    default: false,\n  },\n  {\n    name: \"emailAddresses\",\n    type: \"string\",\n    list: true,\n  },\n  {\n    name: \"userConfigurationData\",\n    type: UserConfigurationData,\n    default: BaseModel.defaultNewInstance(UserConfigurationData),\n  },\n  {\n    name: \"experimentInputs\",\n    type: InputDataObjectType,\n    list: true,\n    default: BaseModel.defaultNewInstance(Array),\n  },\n  {\n    name: \"experimentOutputs\",\n    type: OutputDataObjectType,\n    list: true,\n  },\n  {\n    name: \"experimentStatus\",\n    type: ExperimentStatus,\n    list: true,\n  },\n  {\n    name: \"errors\",\n    type: ErrorModel,\n    list: true,\n  },\n  {\n    name: \"processes\",\n    type: ProcessModel,\n    list: true,\n  },\n  \"workflow\",\n  {\n    name: \"userHasWriteAccess\",\n    type: \"boolean\",\n    default: true,\n  },\n];\n\nexport default class Experiment extends BaseModel {\n  constructor(data = {}) {\n    super(FIELDS, data);\n    this.evaluateInputDependencies();\n  }\n\n  validate() {\n    let validationResults = {};\n    if (this.isEmpty(this.experimentName)) {\n      validationResults[\"experimentName\"] =\n        \"Please provide a name for this experiment.\";\n    }\n    if (this.isEmpty(this.projectId)) {\n      validationResults[\"projectId\"] = \"Please select a project.\";\n    }\n    return validationResults;\n  }\n\n  get latestStatus() {\n    if (this.experimentStatus && this.experimentStatus.length > 0) {\n      return this.experimentStatus[this.experimentStatus.length - 1];\n    } else {\n      return null;\n    }\n  }\n\n  get isProgressing() {\n    return this.latestStatus && this.latestStatus.isProgressing;\n  }\n\n  get isFinished() {\n    return this.latestStatus && this.latestStatus.isFinished;\n  }\n\n  get hasLaunched() {\n    const hasLaunchedStates = [\n      ExperimentState.SCHEDULED,\n      ExperimentState.LAUNCHED,\n      ExperimentState.EXECUTING,\n      ExperimentState.CANCELING,\n      ExperimentState.CANCELED,\n      ExperimentState.FAILED,\n      ExperimentState.COMPLETED,\n    ];\n    return (\n      this.latestStatus &&\n      hasLaunchedStates.indexOf(this.latestStatus.state) >= 0\n    );\n  }\n\n  get isEditable() {\n    return (\n      (!this.latestStatus ||\n        this.latestStatus.state === ExperimentState.CREATED) &&\n      this.userHasWriteAccess\n    );\n  }\n\n  get isCancelable() {\n    switch (this.latestStatus.state) {\n      case ExperimentState.VALIDATED:\n      case ExperimentState.SCHEDULED:\n      case ExperimentState.LAUNCHED:\n      case ExperimentState.EXECUTING:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  get resourceHostId() {\n    return this.userConfigurationData &&\n      this.userConfigurationData.computationalResourceScheduling\n      ? this.userConfigurationData.computationalResourceScheduling\n          .resourceHostId\n      : null;\n  }\n\n  populateInputsOutputsFromApplicationInterface(applicationInterface) {\n    // Copy application inputs and outputs to the experiment\n    this.experimentInputs = applicationInterface.applicationInputs.map(\n      (input) => input.clone()\n    );\n    this.evaluateInputDependencies();\n    this.experimentOutputs = applicationInterface.applicationOutputs.slice();\n  }\n\n  evaluateInputDependencies() {\n    const inputValues = this._collectInputValues(this.experimentInputs);\n    for (const input of this.experimentInputs) {\n      input.evaluateDependencies(inputValues);\n    }\n  }\n\n  getExperimentInput(inputName) {\n    return this.experimentInputs.find(inp => inp.name === inputName);\n  }\n\n  getExperimentOutput(outputName) {\n    return this.experimentOutputs.find(out => out.name === outputName);\n  }\n\n  _collectInputValues() {\n    const result = {};\n    this.experimentInputs.forEach((inp) => {\n      result[inp.name] = inp.value;\n    });\n    return result;\n  }\n}\n"]}]}