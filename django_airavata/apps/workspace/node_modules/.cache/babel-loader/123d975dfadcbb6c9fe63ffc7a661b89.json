{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/input-editors/SliderInputEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/components/experiment/input-editors/SliderInputEditor.vue","mtime":1638641844339},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { InputEditorMixin } from \"django-airavata-workspace-plugin-api\";\nimport VueSlider from \"vue-slider-component\";\nexport default {\n  name: \"slider-input-editor\",\n  mixins: [InputEditorMixin],\n  props: {\n    value: {\n      type: String\n    },\n    min: Number,\n    max: Number,\n    step: Number,\n    valueFormat: {\n      type: String,\n\n      validator(value) {\n        return [\"percentage\"].indexOf(value) !== -1;\n      }\n\n    },\n    displayFormat: {\n      type: String,\n\n      validator(value) {\n        return [\"percentage\"].indexOf(value) !== -1;\n      }\n\n    }\n  },\n  components: {\n    VueSlider\n  },\n\n  data() {\n    return {\n      sliderValue: null\n    };\n  },\n\n  created() {\n    this.initializeSliderValue();\n  },\n\n  computed: {\n    sliderMin: function sliderMin() {\n      return typeof this.min !== \"undefined\" ? this.min : \"min\" in this.editorConfig ? this.editorConfig.min : 0;\n    },\n    sliderMax: function sliderMax() {\n      return typeof this.max !== \"undefined\" ? this.max : \"max\" in this.editorConfig ? this.editorConfig.max : 100;\n    },\n    sliderStep: function sliderStep() {\n      return typeof this.step !== \"undefined\" ? this.step : \"step\" in this.editorConfig ? this.editorConfig.step : 1;\n    }\n  },\n  methods: {\n    initializeSliderValue() {\n      this.sliderValue = this.parseValue(this.data); // If parsing the value resulted in it changing (failed to parse so\n      // initialized to the 'sliderMin'), update the value\n\n      if (this.data !== this.formatValue(this.sliderValue)) {\n        this.onChange(this.sliderValue);\n      }\n    },\n\n    parseValue(value) {\n      // Just remove any percentage signs\n      var result = value ? parseInt(value.replaceAll(\"%\", \"\")) : NaN;\n      return !isNaN(result) ? result : this.sliderMin;\n    },\n\n    onChange(value) {\n      this.data = this.formatValue(value);\n      this.valueChanged();\n    },\n\n    tooltipFormatter(value) {\n      if (this.displayFormat) {\n        if (this.displayFormat === \"percentage\") {\n          return `${value}%`;\n        }\n      } else if (\"displayFormat\" in this.editorConfig) {\n        if (this.editorConfig.displayFormat.percentage) {\n          return `${value}%`;\n        }\n      }\n\n      return value;\n    },\n\n    formatValue(value) {\n      if (this.valueFormat) {\n        if (this.valueFormat === \"percentage\") {\n          return `${value}%`;\n        }\n      } else if (\"valueFormat\" in this.editorConfig) {\n        if (this.editorConfig.valueFormat.percentage) {\n          return `${value}%`;\n        }\n      }\n\n      return String(value);\n    }\n\n  },\n  watch: {\n    data() {\n      this.initializeSliderValue();\n    }\n\n  }\n};",{"version":3,"sources":["SliderInputEditor.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <vue-slider\n    v-model=\"sliderValue\"\n    @change=\"onChange\"\n    :state=\"componentValidState\"\n    :disabled=\"readOnly\"\n    :min=\"sliderMin\"\n    :max=\"sliderMax\"\n    :interval=\"sliderStep\"\n    tooltip=\"always\"\n    :tooltip-formatter=\"tooltipFormatter\"\n  />\n</template>\n\n<script>\nimport { InputEditorMixin } from \"django-airavata-workspace-plugin-api\";\nimport VueSlider from \"vue-slider-component\";\n\nexport default {\n  name: \"slider-input-editor\",\n  mixins: [InputEditorMixin],\n  props: {\n    value: {\n      type: String,\n    },\n    min: Number,\n    max: Number,\n    step: Number,\n    valueFormat: {\n      type: String,\n      validator(value) {\n        return [\"percentage\"].indexOf(value) !== -1;\n      },\n    },\n    displayFormat: {\n      type: String,\n      validator(value) {\n        return [\"percentage\"].indexOf(value) !== -1;\n      },\n    },\n  },\n  components: {\n    VueSlider,\n  },\n  data() {\n    return {\n      sliderValue: null,\n    };\n  },\n  created() {\n    this.initializeSliderValue();\n  },\n  computed: {\n    sliderMin: function () {\n      return typeof this.min !== \"undefined\"\n        ? this.min\n        : \"min\" in this.editorConfig\n        ? this.editorConfig.min\n        : 0;\n    },\n    sliderMax: function () {\n      return typeof this.max !== \"undefined\"\n        ? this.max\n        : \"max\" in this.editorConfig\n        ? this.editorConfig.max\n        : 100;\n    },\n    sliderStep: function () {\n      return typeof this.step !== \"undefined\"\n        ? this.step\n        : \"step\" in this.editorConfig\n        ? this.editorConfig.step\n        : 1;\n    },\n  },\n  methods: {\n    initializeSliderValue() {\n      this.sliderValue = this.parseValue(this.data);\n      // If parsing the value resulted in it changing (failed to parse so\n      // initialized to the 'sliderMin'), update the value\n      if (this.data !== this.formatValue(this.sliderValue)) {\n        this.onChange(this.sliderValue);\n      }\n    },\n    parseValue(value) {\n      // Just remove any percentage signs\n      const result = value ? parseInt(value.replaceAll(\"%\", \"\")) : NaN;\n      return !isNaN(result) ? result : this.sliderMin;\n    },\n    onChange(value) {\n      this.data = this.formatValue(value);\n      this.valueChanged();\n    },\n    tooltipFormatter(value) {\n      if (this.displayFormat) {\n        if (this.displayFormat === \"percentage\") {\n          return `${value}%`;\n        }\n      } else if (\"displayFormat\" in this.editorConfig) {\n        if (this.editorConfig.displayFormat.percentage) {\n          return `${value}%`;\n        }\n      }\n      return value;\n    },\n    formatValue(value) {\n      if (this.valueFormat) {\n        if (this.valueFormat === \"percentage\") {\n          return `${value}%`;\n        }\n      } else if (\"valueFormat\" in this.editorConfig) {\n        if (this.editorConfig.valueFormat.percentage) {\n          return `${value}%`;\n        }\n      }\n      return String(value);\n    },\n  },\n  watch: {\n    data() {\n      this.initializeSliderValue();\n    },\n  },\n};\n</script>\n"],"sourceRoot":"static/django_airavata_workspace/js/components/experiment/input-editors"}]}