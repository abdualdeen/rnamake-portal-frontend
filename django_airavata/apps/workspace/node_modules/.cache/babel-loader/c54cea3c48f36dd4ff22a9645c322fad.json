{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/SharedEntity.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/SharedEntity.js","mtime":1638641844323},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import BaseModel from \"./BaseModel\";\nimport GroupPermission from \"./GroupPermission\";\nimport UserPermission from \"./UserPermission\";\nimport UserProfile from \"./UserProfile\";\nimport ResourcePermissionType from \"./ResourcePermissionType\";\nvar FIELDS = [\"entityId\", {\n  name: \"userPermissions\",\n  type: UserPermission,\n  list: true,\n  default: BaseModel.defaultNewInstance(Array)\n}, {\n  name: \"groupPermissions\",\n  type: GroupPermission,\n  list: true,\n  default: BaseModel.defaultNewInstance(Array)\n}, {\n  name: \"owner\",\n  type: UserProfile\n}, \"isOwner\", \"hasSharingPermission\"];\nexport default class SharedEntity extends BaseModel {\n  constructor() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(FIELDS, data);\n  }\n\n  addUser(user) {\n    if (!this.userPermissions) {\n      this.userPermissions = [];\n    }\n\n    if (!this.userPermissions.find(up => up.user.airavataInternalUserId === user.airavataInternalUserId)) {\n      this.userPermissions.push(new UserPermission({\n        user: user,\n        permissionType: ResourcePermissionType.READ\n      }));\n    }\n  }\n\n  removeUser(user) {\n    this.userPermissions = this.userPermissions.filter(userPermission => userPermission.user.airavataInternalUserId !== user.airavataInternalUserId);\n  }\n\n  addGroup(_ref) {\n    var group = _ref.group,\n        _ref$permissionType = _ref.permissionType,\n        permissionType = _ref$permissionType === void 0 ? ResourcePermissionType.READ : _ref$permissionType;\n\n    if (!this.groupPermissions) {\n      this.groupPermissions = [];\n    }\n\n    if (!this.groupPermissions.find(gp => gp.group.id === group.id)) {\n      this.groupPermissions.push(new GroupPermission({\n        group: group,\n        permissionType: permissionType\n      }));\n    }\n  }\n\n  removeGroup(group) {\n    this.groupPermissions = this.groupPermissions.filter(groupPermission => groupPermission.group.id !== group.id);\n  }\n\n  get nonAdminGroupPermissions() {\n    if (this.groupPermissions) {\n      return this.groupPermissions.filter(groupPermission => !groupPermission.group.isAdminGroup);\n    } else {\n      return [];\n    }\n  }\n\n}",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/SharedEntity.js"],"names":["BaseModel","GroupPermission","UserPermission","UserProfile","ResourcePermissionType","FIELDS","name","type","list","default","defaultNewInstance","Array","SharedEntity","constructor","data","addUser","user","userPermissions","find","up","airavataInternalUserId","push","permissionType","READ","removeUser","filter","userPermission","addGroup","group","groupPermissions","gp","id","removeGroup","groupPermission","nonAdminGroupPermissions","isAdminGroup"],"mappings":"AAAA,OAAOA,SAAP;AACA,OAAOC,eAAP;AACA,OAAOC,cAAP;AACA,OAAOC,WAAP;AACA,OAAOC,sBAAP;AAEA,IAAMC,MAAM,GAAG,CACb,UADa,EAEb;AACEC,EAAAA,IAAI,EAAE,iBADR;AAEEC,EAAAA,IAAI,EAAEL,cAFR;AAGEM,EAAAA,IAAI,EAAE,IAHR;AAIEC,EAAAA,OAAO,EAAET,SAAS,CAACU,kBAAV,CAA6BC,KAA7B;AAJX,CAFa,EAQb;AACEL,EAAAA,IAAI,EAAE,kBADR;AAEEC,EAAAA,IAAI,EAAEN,eAFR;AAGEO,EAAAA,IAAI,EAAE,IAHR;AAIEC,EAAAA,OAAO,EAAET,SAAS,CAACU,kBAAV,CAA6BC,KAA7B;AAJX,CARa,EAcb;AACEL,EAAAA,IAAI,EAAE,OADR;AAEEC,EAAAA,IAAI,EAAEJ;AAFR,CAda,EAkBb,SAlBa,EAmBb,sBAnBa,CAAf;AAsBA,eAAe,MAAMS,YAAN,SAA2BZ,SAA3B,CAAqC;AAClDa,EAAAA,WAAW,GAAY;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AACrB,UAAMT,MAAN,EAAcS,IAAd;AACD;;AAEDC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,QAAI,CAAC,KAAKC,eAAV,EAA2B;AACzB,WAAKA,eAAL,GAAuB,EAAvB;AACD;;AACD,QACE,CAAC,KAAKA,eAAL,CAAqBC,IAArB,CACEC,EAAD,IAAQA,EAAE,CAACH,IAAH,CAAQI,sBAAR,KAAmCJ,IAAI,CAACI,sBADjD,CADH,EAIE;AACA,WAAKH,eAAL,CAAqBI,IAArB,CACE,IAAInB,cAAJ,CAAmB;AACjBc,QAAAA,IAAI,EAAEA,IADW;AAEjBM,QAAAA,cAAc,EAAElB,sBAAsB,CAACmB;AAFtB,OAAnB,CADF;AAMD;AACF;;AAEDC,EAAAA,UAAU,CAACR,IAAD,EAAO;AACf,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBQ,MAArB,CACpBC,cAAD,IACEA,cAAc,CAACV,IAAf,CAAoBI,sBAApB,KACAJ,IAAI,CAACI,sBAHc,CAAvB;AAKD;;AAEDO,EAAAA,QAAQ,OAA0D;AAAA,QAAvDC,KAAuD,QAAvDA,KAAuD;AAAA,mCAAhDN,cAAgD;AAAA,QAAhDA,cAAgD,oCAA/BlB,sBAAsB,CAACmB,IAAQ;;AAChE,QAAI,CAAC,KAAKM,gBAAV,EAA4B;AAC1B,WAAKA,gBAAL,GAAwB,EAAxB;AACD;;AACD,QAAI,CAAC,KAAKA,gBAAL,CAAsBX,IAAtB,CAA4BY,EAAD,IAAQA,EAAE,CAACF,KAAH,CAASG,EAAT,KAAgBH,KAAK,CAACG,EAAzD,CAAL,EAAmE;AACjE,WAAKF,gBAAL,CAAsBR,IAAtB,CACE,IAAIpB,eAAJ,CAAoB;AAClB2B,QAAAA,KAAK,EAAEA,KADW;AAElBN,QAAAA,cAAc,EAAEA;AAFE,OAApB,CADF;AAMD;AACF;;AAEDU,EAAAA,WAAW,CAACJ,KAAD,EAAQ;AACjB,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBJ,MAAtB,CACrBQ,eAAD,IAAqBA,eAAe,CAACL,KAAhB,CAAsBG,EAAtB,KAA6BH,KAAK,CAACG,EADlC,CAAxB;AAGD;;AAED,MAAIG,wBAAJ,GAA+B;AAC7B,QAAI,KAAKL,gBAAT,EAA2B;AACzB,aAAO,KAAKA,gBAAL,CAAsBJ,MAAtB,CACJQ,eAAD,IAAqB,CAACA,eAAe,CAACL,KAAhB,CAAsBO,YADvC,CAAP;AAGD,KAJD,MAIO;AACL,aAAO,EAAP;AACD;AACF;;AA3DiD","sourcesContent":["import BaseModel from \"./BaseModel\";\nimport GroupPermission from \"./GroupPermission\";\nimport UserPermission from \"./UserPermission\";\nimport UserProfile from \"./UserProfile\";\nimport ResourcePermissionType from \"./ResourcePermissionType\";\n\nconst FIELDS = [\n  \"entityId\",\n  {\n    name: \"userPermissions\",\n    type: UserPermission,\n    list: true,\n    default: BaseModel.defaultNewInstance(Array),\n  },\n  {\n    name: \"groupPermissions\",\n    type: GroupPermission,\n    list: true,\n    default: BaseModel.defaultNewInstance(Array),\n  },\n  {\n    name: \"owner\",\n    type: UserProfile,\n  },\n  \"isOwner\",\n  \"hasSharingPermission\",\n];\n\nexport default class SharedEntity extends BaseModel {\n  constructor(data = {}) {\n    super(FIELDS, data);\n  }\n\n  addUser(user) {\n    if (!this.userPermissions) {\n      this.userPermissions = [];\n    }\n    if (\n      !this.userPermissions.find(\n        (up) => up.user.airavataInternalUserId === user.airavataInternalUserId\n      )\n    ) {\n      this.userPermissions.push(\n        new UserPermission({\n          user: user,\n          permissionType: ResourcePermissionType.READ,\n        })\n      );\n    }\n  }\n\n  removeUser(user) {\n    this.userPermissions = this.userPermissions.filter(\n      (userPermission) =>\n        userPermission.user.airavataInternalUserId !==\n        user.airavataInternalUserId\n    );\n  }\n\n  addGroup({ group, permissionType = ResourcePermissionType.READ }) {\n    if (!this.groupPermissions) {\n      this.groupPermissions = [];\n    }\n    if (!this.groupPermissions.find((gp) => gp.group.id === group.id)) {\n      this.groupPermissions.push(\n        new GroupPermission({\n          group: group,\n          permissionType: permissionType,\n        })\n      );\n    }\n  }\n\n  removeGroup(group) {\n    this.groupPermissions = this.groupPermissions.filter(\n      (groupPermission) => groupPermission.group.id !== group.id\n    );\n  }\n\n  get nonAdminGroupPermissions() {\n    if (this.groupPermissions) {\n      return this.groupPermissions.filter(\n        (groupPermission) => !groupPermission.group.isAdminGroup\n      );\n    } else {\n      return [];\n    }\n  }\n}\n"]}]}