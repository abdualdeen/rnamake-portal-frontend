{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/containers/ExperimentListContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/containers/ExperimentListContainer.vue","mtime":1638641844343},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _slicedToArray from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.regexp.search\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { errors, models, services, utils } from \"django-airavata-api\";\nimport { components as comps } from \"django-airavata-common-ui\";\nimport moment from \"moment\";\nimport urls from \"../utils/urls\";\nexport default {\n  props: [\"initialExperimentsData\"],\n  name: \"experiment-list-container\",\n  data: function data() {\n    return {\n      experimentsPaginator: null,\n      applicationInterfaces: {},\n      search: null,\n      applicationSelect: null,\n      projectSelect: null,\n      dateSelect: null,\n      experimentAttributeSelect: null,\n      experimentStatusSelect: null,\n      appInterfaces: null,\n      projectInterfaces: null,\n      fromDate: null,\n      toDate: null,\n      applicationSelected: false,\n      projectSelected: false,\n      defaultOptionSelected: true,\n      dateConfig: {\n        mode: \"range\",\n        wrap: true,\n        dateFormat: \"Y-m-d\",\n        maxDate: new Date().fp_incr(1)\n      }\n    };\n  },\n  components: {\n    pager: comps.Pager,\n    \"experiment-status-badge\": comps.ExperimentStatusBadge\n  },\n  methods: {\n    searchExperiments: function searchExperiments() {\n      this.experimentsPaginator = null;\n      this.reloadExperiments();\n    },\n    resetSearch: function resetSearch() {\n      this.experimentsPaginator = null;\n      this.search = null;\n      this.experimentAttributeSelect = null;\n      this.experimentStatusSelect = null;\n      this.applicationSelect = null;\n      this.projectSelect = null;\n      this.dateSelect = null;\n      this.toDate = null;\n      this.fromDate = null;\n      this.checkSearchOptions();\n      this.reloadExperiments();\n    },\n    reloadExperiments: function reloadExperiments() {\n      var _this = this;\n\n      var searchParams = {};\n\n      if (this.experimentAttributeSelect) {\n        if (this.experimentAttributeSelect == \"APPLICATION_ID\" && this.applicationSelect) {\n          searchParams[\"APPLICATION_ID\"] = this.applicationSelect;\n        } else if (this.experimentAttributeSelect == \"PROJECT_ID\" && this.projectSelect) {\n          searchParams[\"PROJECT_ID\"] = this.projectSelect;\n        } else if (this.search) {\n          searchParams[this.experimentAttributeSelect] = this.search;\n        }\n      }\n\n      if (this.experimentStatusSelect) {\n        if (this.experimentStatusSelect != \"ALL\") {\n          searchParams[\"STATUS\"] = this.experimentStatusSelect;\n        }\n      }\n\n      if (this.fromDate && this.toDate) {\n        searchParams[\"FROM_DATE\"] = this.fromDate.getTime();\n        searchParams[\"TO_DATE\"] = this.toDate.getTime();\n      }\n\n      services.ExperimentSearchService.list(searchParams).then(function (result) {\n        return _this.experimentsPaginator = result;\n      });\n    },\n    checkSearchOptions: function checkSearchOptions() {\n      this.applicationSelected = false;\n      this.projectSelected = false;\n      this.defaultOptionSelected = false;\n\n      if (this.experimentAttributeSelect == \"APPLICATION_ID\") {\n        this.applicationSelected = true;\n      } else if (this.experimentAttributeSelect == \"PROJECT_ID\") {\n        this.projectSelected = true;\n      } else {\n        this.defaultOptionSelected = true;\n      }\n    },\n    loadApplicationInterfaces: function loadApplicationInterfaces() {\n      var _this2 = this;\n\n      return services.ApplicationInterfaceService.list().then(function (appInterfaces) {\n        return _this2.appInterfaces = appInterfaces;\n      });\n    },\n    loadProjectInterfaces: function loadProjectInterfaces() {\n      var _this3 = this;\n\n      return services.ProjectService.listAll().then(function (projectInterfaces) {\n        return _this3.projectInterfaces = projectInterfaces;\n      });\n    },\n    dateRangeChanged: function dateRangeChanged(selectedDates) {\n      var _selectedDates = _slicedToArray(selectedDates, 2);\n\n      this.fromDate = _selectedDates[0];\n      this.toDate = _selectedDates[1];\n\n      if (this.fromDate && this.toDate) {\n        this.reloadExperiments();\n      }\n    },\n    nextExperiments: function nextExperiments() {\n      this.experimentsPaginator.next();\n    },\n    previousExperiments: function previousExperiments() {\n      this.experimentsPaginator.previous();\n    },\n    fromNow: function fromNow(date) {\n      return moment(date).fromNow();\n    },\n    editLink: function editLink(experiment) {\n      return urls.editExperiment(experiment);\n    },\n    viewLink: function viewLink(experiment) {\n      return urls.viewExperiment(experiment);\n    },\n    applicationName: function applicationName(experiment) {\n      var _this4 = this;\n\n      if (experiment.executionId in this.applicationInterfaces) {\n        if (this.applicationInterfaces[experiment.executionId] instanceof models.ApplicationInterfaceDefinition) {\n          return this.applicationInterfaces[experiment.executionId].applicationName;\n        } else if (this.applicationInterfaces[experiment.executionId] === null) {\n          return null;\n        }\n      } else {\n        var request = services.ApplicationInterfaceService.retrieve({\n          lookup: experiment.executionId\n        }, {\n          ignoreErrors: true\n        }).then(function (result) {\n          _this4.$set(_this4.applicationInterfaces, experiment.executionId, result);\n        }).catch(function (error) {\n          if (errors.ErrorUtils.isNotFoundError(error)) {\n            _this4.$set(_this4.applicationInterfaces, experiment.executionId, null);\n          } else {\n            throw error;\n          }\n        }).catch(utils.FetchUtils.reportError);\n        this.$set(this.applicationInterfaces, experiment.executionId, request);\n      }\n\n      return \"...\";\n    },\n    clone: function clone(experiment) {\n      services.ExperimentService.clone({\n        lookup: experiment.experimentId\n      }).then(function (clonedExperiment) {\n        urls.navigateToEditExperiment(clonedExperiment);\n      });\n    }\n  },\n  computed: {\n    experiments: function experiments() {\n      return this.experimentsPaginator ? this.experimentsPaginator.results : null;\n    },\n    applicationNameOptions: function applicationNameOptions() {\n      if (this.appInterfaces) {\n        var options = this.appInterfaces.map(function (appInterface) {\n          return {\n            value: appInterface.applicationInterfaceId,\n            text: appInterface.applicationName\n          };\n        });\n        return utils.StringUtils.sortIgnoreCase(options, function (o) {\n          return o.text;\n        });\n      } else {\n        return [];\n      }\n    },\n    projectNameOptions: function projectNameOptions() {\n      if (this.projectInterfaces) {\n        var options = this.projectInterfaces.map(function (projectInterface) {\n          return {\n            value: projectInterface.projectID,\n            text: projectInterface.name\n          };\n        });\n        return utils.StringUtils.sortIgnoreCase(options, function (o) {\n          return o.text;\n        });\n      } else {\n        return [];\n      }\n    }\n  },\n  beforeMount: function beforeMount() {\n    var _this5 = this;\n\n    this.loadApplicationInterfaces();\n    this.loadProjectInterfaces();\n    services.ExperimentSearchService.list({\n      initialData: this.initialExperimentsData\n    }).then(function (result) {\n      return _this5.experimentsPaginator = result;\n    });\n  }\n};",{"version":3,"sources":["ExperimentListContainer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <h1 class=\"h4 mb-4\">Browse Experiments</h1>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <b-input-group class=\"w-100 mb-2\">\n              <b-form-input\n                v-if=\"defaultOptionSelected\"\n                v-model=\"search\"\n                placeholder=\"Search Experiments\"\n                @keydown.native.enter=\"searchExperiments\"\n              />\n              <b-form-select\n                v-if=\"applicationSelected\"\n                v-model=\"applicationSelect\"\n                :options=\"applicationNameOptions\"\n              >\n                <template slot=\"first\">\n                  <option :value=\"null\" disabled>\n                    Select an application to search by\n                  </option>\n                </template>\n              </b-form-select>\n              <b-form-select\n                v-if=\"projectSelected\"\n                v-model=\"projectSelect\"\n                :options=\"projectNameOptions\"\n              >\n                <template slot=\"first\">\n                  <option :value=\"null\" disabled>\n                    Select a project to search by\n                  </option>\n                </template>\n              </b-form-select>\n              <b-form-select\n                v-model=\"experimentAttributeSelect\"\n                @input=\"checkSearchOptions\"\n              >\n                <template slot=\"first\">\n                  <option :value=\"null\" disabled>\n                    Select an attribute to search by\n                  </option>\n                </template>\n                <option value=\"USER_NAME\">User Name</option>\n                <option value=\"EXPERIMENT_NAME\">Experiment Name</option>\n                <option value=\"EXPERIMENT_DESC\">Experiment Description</option>\n                <option value=\"APPLICATION_ID\">Application</option>\n                <option value=\"PROJECT_ID\">Project</option>\n                <option value=\"JOB_ID\">Job Id</option>\n              </b-form-select>\n              <b-form-select v-model=\"experimentStatusSelect\">\n                <template slot=\"first\">\n                  <option :value=\"null\" disabled>\n                    Select an experiment status to filter by\n                  </option>\n                </template>\n                <option value=\"ALL\">ALL</option>\n                <option value=\"CREATED\">Created</option>\n                <option value=\"VALIDATED\">Validated</option>\n                <option value=\"SCHEDULED\">Scheduled</option>\n                <option value=\"LAUNCHED\">Launched</option>\n                <option value=\"EXECUTING\">Executing</option>\n                <option value=\"CANCELED\">Canceled</option>\n                <option value=\"COMPLETED\">Completed</option>\n                <option value=\"FAILED\">Failed</option>\n              </b-form-select>\n              <b-input-group-append>\n                <b-button @click=\"resetSearch\">Reset</b-button>\n                <b-button variant=\"primary\" @click=\"searchExperiments\"\n                  >Search</b-button\n                >\n              </b-input-group-append>\n            </b-input-group>\n            <b-input-group class=\"w-100 mb-2\">\n              <b-input-group-prepend is-text>\n                <i class=\"fa fa-calendar-week\" aria-hidden=\"true\"></i>\n              </b-input-group-prepend>\n              <flat-pickr\n                v-model=\"dateSelect\"\n                :config=\"dateConfig\"\n                placeholder=\"Select a date range to filter by\"\n                @on-change=\"dateRangeChanged\"\n                class=\"form-control\"\n              />\n            </b-input-group>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <table class=\"table table-hover\">\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Application</th>\n                  <th>User</th>\n                  <th>Creation Time</th>\n                  <th>Status</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr\n                  v-for=\"experiment in experiments\"\n                  :key=\"experiment.experimentId\"\n                >\n                  <td>\n                    <b-link :href=\"viewLink(experiment)\">{{\n                      experiment.name\n                    }}</b-link>\n                  </td>\n                  <td v-if=\"applicationName(experiment)\">\n                    {{ applicationName(experiment) }}\n                  </td>\n                  <td v-else class=\"font-italic text-muted\">N/A</td>\n                  <td>{{ experiment.userName }}</td>\n                  <td>\n                    <span :title=\"experiment.creationTime\">{{\n                      fromNow(experiment.creationTime)\n                    }}</span>\n                  </td>\n                  <td>\n                    <experiment-status-badge\n                      :statusName=\"experiment.experimentStatus.name\"\n                    />\n                  </td>\n                  <td>\n                    <!-- if we can't load the application for the experiment\n                    (for example, if it was deleted), then user can't edit or\n                    clone experiment -->\n                    <span v-if=\"applicationName(experiment)\">\n                      <b-link\n                        v-if=\"\n                          experiment.isEditable && applicationName(experiment)\n                        \"\n                        :href=\"editLink(experiment)\"\n                        class=\"action-link\"\n                        >Edit\n                        <i class=\"fa fa-edit\" aria-hidden=\"true\"></i>\n                      </b-link>\n                      <b-link\n                        v-else\n                        @click=\"clone(experiment)\"\n                        class=\"action-link\"\n                        >Clone\n                        <i class=\"fa fa-copy\" aria-hidden=\"true\"></i>\n                      </b-link>\n                    </span>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <pager\n              v-bind:paginator=\"experimentsPaginator\"\n              v-on:next=\"nextExperiments\"\n              v-on:previous=\"previousExperiments\"\n            ></pager>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { errors, models, services, utils } from \"django-airavata-api\";\nimport { components as comps } from \"django-airavata-common-ui\";\n\nimport moment from \"moment\";\nimport urls from \"../utils/urls\";\n\nexport default {\n  props: [\"initialExperimentsData\"],\n  name: \"experiment-list-container\",\n  data() {\n    return {\n      experimentsPaginator: null,\n      applicationInterfaces: {},\n      search: null,\n      applicationSelect: null,\n      projectSelect: null,\n      dateSelect: null,\n      experimentAttributeSelect: null,\n      experimentStatusSelect: null,\n      appInterfaces: null,\n      projectInterfaces: null,\n      fromDate: null,\n      toDate: null,\n      applicationSelected: false,\n      projectSelected: false,\n      defaultOptionSelected: true,\n      dateConfig: {\n        mode: \"range\",\n        wrap: true,\n        dateFormat: \"Y-m-d\",\n        maxDate: new Date().fp_incr(1),\n      },\n    };\n  },\n  components: {\n    pager: comps.Pager,\n    \"experiment-status-badge\": comps.ExperimentStatusBadge,\n  },\n  methods: {\n    searchExperiments: function () {\n      this.experimentsPaginator = null;\n      this.reloadExperiments();\n    },\n    resetSearch: function () {\n      this.experimentsPaginator = null;\n      this.search = null;\n      this.experimentAttributeSelect = null;\n      this.experimentStatusSelect = null;\n      this.applicationSelect = null;\n      this.projectSelect = null;\n      this.dateSelect = null;\n      this.toDate = null;\n      this.fromDate = null;\n      this.checkSearchOptions();\n      this.reloadExperiments();\n    },\n    reloadExperiments: function () {\n      const searchParams = {};\n      if (this.experimentAttributeSelect) {\n        if (\n          this.experimentAttributeSelect == \"APPLICATION_ID\" &&\n          this.applicationSelect\n        ) {\n          searchParams[\"APPLICATION_ID\"] = this.applicationSelect;\n        } else if (\n          this.experimentAttributeSelect == \"PROJECT_ID\" &&\n          this.projectSelect\n        ) {\n          searchParams[\"PROJECT_ID\"] = this.projectSelect;\n        } else if (this.search) {\n          searchParams[this.experimentAttributeSelect] = this.search;\n        }\n      }\n      if (this.experimentStatusSelect) {\n        if (this.experimentStatusSelect != \"ALL\") {\n          searchParams[\"STATUS\"] = this.experimentStatusSelect;\n        }\n      }\n      if (this.fromDate && this.toDate) {\n        searchParams[\"FROM_DATE\"] = this.fromDate.getTime();\n        searchParams[\"TO_DATE\"] = this.toDate.getTime();\n      }\n\n      services.ExperimentSearchService.list(searchParams).then(\n        (result) => (this.experimentsPaginator = result)\n      );\n    },\n    checkSearchOptions: function () {\n      this.applicationSelected = false;\n      this.projectSelected = false;\n      this.defaultOptionSelected = false;\n      if (this.experimentAttributeSelect == \"APPLICATION_ID\") {\n        this.applicationSelected = true;\n      } else if (this.experimentAttributeSelect == \"PROJECT_ID\") {\n        this.projectSelected = true;\n      } else {\n        this.defaultOptionSelected = true;\n      }\n    },\n    loadApplicationInterfaces: function () {\n      return services.ApplicationInterfaceService.list().then(\n        (appInterfaces) => (this.appInterfaces = appInterfaces)\n      );\n    },\n    loadProjectInterfaces: function () {\n      return services.ProjectService.listAll().then(\n        (projectInterfaces) => (this.projectInterfaces = projectInterfaces)\n      );\n    },\n    dateRangeChanged: function (selectedDates) {\n      [this.fromDate, this.toDate] = selectedDates;\n      if (this.fromDate && this.toDate) {\n        this.reloadExperiments();\n      }\n    },\n    nextExperiments: function () {\n      this.experimentsPaginator.next();\n    },\n    previousExperiments: function () {\n      this.experimentsPaginator.previous();\n    },\n    fromNow: function (date) {\n      return moment(date).fromNow();\n    },\n    editLink: function (experiment) {\n      return urls.editExperiment(experiment);\n    },\n    viewLink: function (experiment) {\n      return urls.viewExperiment(experiment);\n    },\n    applicationName: function (experiment) {\n      if (experiment.executionId in this.applicationInterfaces) {\n        if (\n          this.applicationInterfaces[experiment.executionId] instanceof\n          models.ApplicationInterfaceDefinition\n        ) {\n          return this.applicationInterfaces[experiment.executionId]\n            .applicationName;\n        } else if (\n          this.applicationInterfaces[experiment.executionId] === null\n        ) {\n          return null;\n        }\n      } else {\n        const request = services.ApplicationInterfaceService.retrieve(\n          {\n            lookup: experiment.executionId,\n          },\n          {\n            ignoreErrors: true,\n          }\n        )\n          .then((result) => {\n            this.$set(\n              this.applicationInterfaces,\n              experiment.executionId,\n              result\n            );\n          })\n          .catch((error) => {\n            if (errors.ErrorUtils.isNotFoundError(error)) {\n              this.$set(\n                this.applicationInterfaces,\n                experiment.executionId,\n                null\n              );\n            } else {\n              throw error;\n            }\n          })\n          .catch(utils.FetchUtils.reportError);\n        this.$set(this.applicationInterfaces, experiment.executionId, request);\n      }\n      return \"...\";\n    },\n    clone(experiment) {\n      services.ExperimentService.clone({\n        lookup: experiment.experimentId,\n      }).then((clonedExperiment) => {\n        urls.navigateToEditExperiment(clonedExperiment);\n      });\n    },\n  },\n  computed: {\n    experiments: function () {\n      return this.experimentsPaginator\n        ? this.experimentsPaginator.results\n        : null;\n    },\n    applicationNameOptions() {\n      if (this.appInterfaces) {\n        const options = this.appInterfaces.map((appInterface) => {\n          return {\n            value: appInterface.applicationInterfaceId,\n            text: appInterface.applicationName,\n          };\n        });\n        return utils.StringUtils.sortIgnoreCase(options, (o) => o.text);\n      } else {\n        return [];\n      }\n    },\n    projectNameOptions() {\n      if (this.projectInterfaces) {\n        const options = this.projectInterfaces.map((projectInterface) => {\n          return {\n            value: projectInterface.projectID,\n            text: projectInterface.name,\n          };\n        });\n        return utils.StringUtils.sortIgnoreCase(options, (o) => o.text);\n      } else {\n        return [];\n      }\n    },\n  },\n  beforeMount: function () {\n    this.loadApplicationInterfaces();\n    this.loadProjectInterfaces();\n    services.ExperimentSearchService.list({\n      initialData: this.initialExperimentsData,\n    }).then((result) => (this.experimentsPaginator = result));\n  },\n};\n</script>\n\n<style></style>\n"],"sourceRoot":"static/django_airavata_workspace/js/containers"}]}