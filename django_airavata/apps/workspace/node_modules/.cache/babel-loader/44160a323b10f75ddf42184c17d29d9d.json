{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/web-components/store.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/web-components/store.js","mtime":1638641844346},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { errors, services, utils } from \"django-airavata-api\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nVue.use(Vuex);\nvar PROMISES = {\n  workspacePreferences: null\n};\nexport var mutations = {\n  setExperiment(state, _ref) {\n    var experiment = _ref.experiment;\n    state.experiment = experiment;\n  },\n\n  updateExperimentName(state, _ref2) {\n    var name = _ref2.name;\n    state.experiment.experimentName = name;\n  },\n\n  updateExperimentInputValue(state, _ref3) {\n    var inputName = _ref3.inputName,\n        value = _ref3.value;\n    var experimentInput = state.experiment.experimentInputs.find(i => i.name === inputName);\n    experimentInput.value = value;\n  },\n\n  updateProjectId(state, _ref4) {\n    var projectId = _ref4.projectId;\n    state.experiment.projectId = projectId;\n  },\n\n  updateGroupResourceProfileId(state, _ref5) {\n    var groupResourceProfileId = _ref5.groupResourceProfileId;\n    state.experiment.userConfigurationData.groupResourceProfileId = groupResourceProfileId;\n  },\n\n  updateResourceHostId(state, _ref6) {\n    var resourceHostId = _ref6.resourceHostId;\n    state.experiment.userConfigurationData.computationalResourceScheduling.resourceHostId = resourceHostId;\n  },\n\n  updateQueueName(state, _ref7) {\n    var queueName = _ref7.queueName;\n    state.experiment.userConfigurationData.computationalResourceScheduling.queueName = queueName;\n  },\n\n  setLazyQueueName(state, _ref8) {\n    var queueName = _ref8.queueName;\n    state.queueName = queueName;\n  },\n\n  updateTotalCPUCount(state, _ref9) {\n    var totalCPUCount = _ref9.totalCPUCount;\n    state.experiment.userConfigurationData.computationalResourceScheduling.totalCPUCount = totalCPUCount;\n  },\n\n  updateNodeCount(state, _ref10) {\n    var nodeCount = _ref10.nodeCount;\n    state.experiment.userConfigurationData.computationalResourceScheduling.nodeCount = nodeCount;\n  },\n\n  updateWallTimeLimit(state, _ref11) {\n    var wallTimeLimit = _ref11.wallTimeLimit;\n    state.experiment.userConfigurationData.computationalResourceScheduling.wallTimeLimit = wallTimeLimit;\n  },\n\n  updateTotalPhysicalMemory(state, _ref12) {\n    var totalPhysicalMemory = _ref12.totalPhysicalMemory;\n    state.experiment.userConfigurationData.computationalResourceScheduling.totalPhysicalMemory = totalPhysicalMemory;\n  },\n\n  setProjects(state, _ref13) {\n    var projects = _ref13.projects;\n    state.projects = projects;\n  },\n\n  setComputeResourceNames(state, _ref14) {\n    var computeResourceNames = _ref14.computeResourceNames;\n    state.computeResourceNames = computeResourceNames;\n  },\n\n  setGroupResourceProfiles(state, _ref15) {\n    var groupResourceProfiles = _ref15.groupResourceProfiles;\n    state.groupResourceProfiles = groupResourceProfiles;\n  },\n\n  setWorkspacePreferences(state, _ref16) {\n    var workspacePreferences = _ref16.workspacePreferences;\n    state.workspacePreferences = workspacePreferences;\n  },\n\n  setApplicationModuleId(state, _ref17) {\n    var applicationModuleId = _ref17.applicationModuleId;\n    state.applicationModuleId = applicationModuleId;\n  },\n\n  setApplicationDeployments(state, _ref18) {\n    var applicationDeployments = _ref18.applicationDeployments;\n    state.applicationDeployments = applicationDeployments;\n  },\n\n  setAppDeploymentQueues(state, _ref19) {\n    var appDeploymentQueues = _ref19.appDeploymentQueues;\n    state.appDeploymentQueues = appDeploymentQueues;\n  }\n\n};\nexport var actions = {\n  loadNewExperiment(_ref20, _ref21) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      var commit, dispatch, applicationId, applicationModule, appInterface, experiment, currentDate;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref20.commit, dispatch = _ref20.dispatch;\n              applicationId = _ref21.applicationId;\n              _context.next = 4;\n              return services.ApplicationModuleService.retrieve({\n                lookup: applicationId\n              });\n\n            case 4:\n              applicationModule = _context.sent;\n              _context.next = 7;\n              return services.ApplicationModuleService.getApplicationInterface({\n                lookup: applicationId\n              });\n\n            case 7:\n              appInterface = _context.sent;\n              experiment = appInterface.createExperiment();\n              currentDate = new Date().toLocaleString([], {\n                dateStyle: \"medium\",\n                timeStyle: \"short\"\n              });\n              experiment.experimentName = `${applicationModule.appModuleName} on ${currentDate}`;\n              commit(\"setApplicationModuleId\", {\n                applicationModuleId: applicationId\n              });\n              _context.next = 14;\n              return dispatch(\"setExperiment\", {\n                experiment\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n\n  loadExperiment(_ref23, _ref24) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2() {\n      var commit, dispatch, experimentId, experiment, appInterface;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref23.commit, dispatch = _ref23.dispatch;\n              experimentId = _ref24.experimentId;\n              _context2.next = 4;\n              return services.ExperimentService.retrieve({\n                lookup: experimentId\n              });\n\n            case 4:\n              experiment = _context2.sent;\n              _context2.next = 7;\n              return services.ApplicationInterfaceService.retrieve({\n                lookup: experiment.executionId\n              });\n\n            case 7:\n              appInterface = _context2.sent;\n              commit(\"setApplicationModuleId\", {\n                applicationModuleId: appInterface.applicationModuleId\n              });\n              _context2.next = 11;\n              return dispatch(\"setExperiment\", {\n                experiment\n              });\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n\n  setExperiment(_ref26, _ref27) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee3() {\n      var commit, dispatch, state, experiment;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref26.commit, dispatch = _ref26.dispatch, state = _ref26.state;\n              experiment = _ref27.experiment;\n              commit(\"setExperiment\", {\n                experiment\n              });\n              _context3.next = 5;\n              return dispatch(\"loadExperimentData\");\n\n            case 5:\n              // Check lazy experiment state properties and apply them\n              if (state.queueName) {\n                dispatch(\"updateQueueName\", {\n                  queueName: state.queueName\n                });\n              }\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n\n  loadExperimentData(_ref29) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee4() {\n      var commit, dispatch, state, groupResourceProfileId;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref29.commit, dispatch = _ref29.dispatch, state = _ref29.state;\n              _context4.next = 3;\n              return Promise.all([dispatch(\"loadProjects\"), dispatch(\"loadWorkspacePreferences\"), dispatch(\"loadGroupResourceProfiles\")]);\n\n            case 3:\n              if (!state.experiment.projectId) {\n                commit(\"updateProjectId\", {\n                  projectId: state.workspacePreferences.most_recent_project_id\n                });\n              }\n\n              dispatch(\"initializeGroupResourceProfileId\");\n              groupResourceProfileId = state.experiment.userConfigurationData.groupResourceProfileId; // If experiment has a group resource profile, load additional necessary\n              // data and re-apply group resource profile\n\n              if (!groupResourceProfileId) {\n                _context4.next = 13;\n                break;\n              }\n\n              _context4.next = 9;\n              return dispatch(\"loadApplicationDeployments\");\n\n            case 9:\n              _context4.next = 11;\n              return dispatch(\"loadAppDeploymentQueues\");\n\n            case 11:\n              _context4.next = 13;\n              return dispatch(\"applyGroupResourceProfile\");\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  },\n\n  initializeGroupResourceProfileId(_ref31) {\n    var commit = _ref31.commit,\n        getters = _ref31.getters,\n        state = _ref31.state;\n    // If there is no groupResourceProfileId set on the experiment, or there\n    // is one set but it is no longer in the list of accessible\n    // groupResourceProfiles, set to the default one, or the first one\n    var groupResourceProfileId = state.experiment.userConfigurationData.groupResourceProfileId;\n\n    if (!groupResourceProfileId || !getters.findGroupResourceProfile(groupResourceProfileId)) {\n      if (getters.findGroupResourceProfile(state.workspacePreferences.most_recent_group_resource_profile_id)) {\n        commit(\"updateGroupResourceProfileId\", {\n          groupResourceProfileId: state.workspacePreferences.most_recent_group_resource_profile_id\n        });\n      } else if (state.groupResourceProfiles.length > 0) {\n        commit(\"updateGroupResourceProfileId\", {\n          groupResourceProfileId: state.groupResourceProfiles[0].groupResourceProfileId\n        });\n      } else {\n        commit(\"updateGroupResourceProfileId\", {\n          groupResourceProfileId: null\n        });\n      }\n    }\n  },\n\n  updateExperimentName(_ref32, _ref33) {\n    var commit = _ref32.commit;\n    var name = _ref33.name;\n    commit(\"updateExperimentName\", {\n      name\n    });\n  },\n\n  updateExperimentInputValue(_ref34, _ref35) {\n    var commit = _ref34.commit;\n    var inputName = _ref35.inputName,\n        value = _ref35.value;\n    commit(\"updateExperimentInputValue\", {\n      inputName,\n      value\n    });\n  },\n\n  updateProjectId(_ref36, _ref37) {\n    var commit = _ref36.commit;\n    var projectId = _ref37.projectId;\n    commit(\"updateProjectId\", {\n      projectId\n    });\n  },\n\n  updateGroupResourceProfileId(_ref38, _ref39) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee5() {\n      var commit, dispatch, groupResourceProfileId;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref38.commit, dispatch = _ref38.dispatch;\n              groupResourceProfileId = _ref39.groupResourceProfileId;\n              commit(\"updateGroupResourceProfileId\", {\n                groupResourceProfileId\n              });\n              _context5.next = 5;\n              return dispatch(\"loadApplicationDeployments\");\n\n            case 5:\n              _context5.next = 7;\n              return dispatch(\"applyGroupResourceProfile\");\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }))();\n  },\n\n  updateComputeResourceHostId(_ref41, _ref42) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee6() {\n      var commit, dispatch, getters, resourceHostId;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref41.commit, dispatch = _ref41.dispatch, getters = _ref41.getters;\n              resourceHostId = _ref42.resourceHostId;\n\n              if (!(getters.resourceHostId !== resourceHostId)) {\n                _context6.next = 8;\n                break;\n              }\n\n              commit(\"updateResourceHostId\", {\n                resourceHostId\n              });\n              _context6.next = 6;\n              return dispatch(\"loadAppDeploymentQueues\");\n\n            case 6:\n              _context6.next = 8;\n              return dispatch(\"setDefaultQueue\");\n\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  },\n\n  updateQueueName(_ref44, _ref45) {\n    var commit = _ref44.commit,\n        dispatch = _ref44.dispatch,\n        state = _ref44.state;\n    var queueName = _ref45.queueName;\n\n    if (state.experiment) {\n      commit(\"updateQueueName\", {\n        queueName\n      });\n      dispatch(\"initializeQueue\");\n    } else {\n      commit(\"setLazyQueueName\", {\n        queueName\n      });\n    }\n  },\n\n  updateTotalCPUCount(_ref46, _ref47) {\n    var commit = _ref46.commit;\n    var totalCPUCount = _ref47.totalCPUCount;\n    commit(\"updateTotalCPUCount\", {\n      totalCPUCount\n    });\n  },\n\n  updateNodeCount(_ref48, _ref49) {\n    var commit = _ref48.commit;\n    var nodeCount = _ref49.nodeCount;\n    commit(\"updateNodeCount\", {\n      nodeCount\n    });\n  },\n\n  updateWallTimeLimit(_ref50, _ref51) {\n    var commit = _ref50.commit;\n    var wallTimeLimit = _ref51.wallTimeLimit;\n    commit(\"updateWallTimeLimit\", {\n      wallTimeLimit\n    });\n  },\n\n  updateTotalPhysicalMemory(_ref52, _ref53) {\n    var commit = _ref52.commit;\n    var totalPhysicalMemory = _ref53.totalPhysicalMemory;\n    commit(\"updateTotalPhysicalMemory\", {\n      totalPhysicalMemory\n    });\n  },\n\n  loadApplicationDeployments(_ref54) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee7() {\n      var commit, getters, state, applicationDeployments;\n      return regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              commit = _ref54.commit, getters = _ref54.getters, state = _ref54.state;\n              _context7.next = 3;\n              return services.ApplicationDeploymentService.list({\n                appModuleId: state.applicationModuleId,\n                groupResourceProfileId: getters.groupResourceProfileId\n              }, {\n                ignoreErrors: true\n              }).catch(error => {\n                // Ignore unauthorized errors, force user to pick another GroupResourceProfile\n                if (!errors.ErrorUtils.isUnauthorizedError(error)) {\n                  return Promise.reject(error);\n                } else {\n                  return Promise.resolve([]);\n                }\n              }) // Report all other error types\n              .catch(utils.FetchUtils.reportError);\n\n            case 3:\n              applicationDeployments = _context7.sent;\n              commit(\"setApplicationDeployments\", {\n                applicationDeployments\n              });\n\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }))();\n  },\n\n  applyGroupResourceProfile(_ref56) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee8() {\n      var dispatch, getters, computeResourceChanged;\n      return regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              dispatch = _ref56.dispatch, getters = _ref56.getters;\n              _context8.next = 3;\n              return dispatch(\"initializeResourceHostId\");\n\n            case 3:\n              computeResourceChanged = _context8.sent;\n\n              if (!computeResourceChanged) {\n                _context8.next = 11;\n                break;\n              }\n\n              _context8.next = 7;\n              return dispatch(\"loadAppDeploymentQueues\");\n\n            case 7:\n              _context8.next = 9;\n              return dispatch(\"setDefaultQueue\");\n\n            case 9:\n              _context8.next = 17;\n              break;\n\n            case 11:\n              if (getters.queue) {\n                _context8.next = 16;\n                break;\n              }\n\n              _context8.next = 14;\n              return dispatch(\"setDefaultQueue\");\n\n            case 14:\n              _context8.next = 17;\n              break;\n\n            case 16:\n              // reapply batchQueueResourcePolicy maximums since they may have changed\n              dispatch(\"applyBatchQueueResourcePolicy\");\n\n            case 17:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }))();\n  },\n\n  initializeResourceHostId(_ref58) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee9() {\n      var commit, dispatch, getters, defaultResourceHostId;\n      return regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              commit = _ref58.commit, dispatch = _ref58.dispatch, getters = _ref58.getters;\n\n              if (!(!getters.resourceHostId || !getters.computeResources.find(crid => crid === getters.resourceHostId))) {\n                _context9.next = 7;\n                break;\n              }\n\n              _context9.next = 4;\n              return dispatch(\"getDefaultResourceHostId\");\n\n            case 4:\n              defaultResourceHostId = _context9.sent;\n              commit(\"updateResourceHostId\", {\n                resourceHostId: defaultResourceHostId\n              });\n              return _context9.abrupt(\"return\", true);\n\n            case 7:\n              return _context9.abrupt(\"return\", false);\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }))();\n  },\n\n  getDefaultResourceHostId(_ref60) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee10() {\n      var dispatch, getters;\n      return regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              dispatch = _ref60.dispatch, getters = _ref60.getters;\n              _context10.next = 3;\n              return dispatch(\"loadDefaultComputeResourceId\");\n\n            case 3:\n              if (!(getters.defaultComputeResourceId && getters.computeResources.find(crid => crid === getters.defaultComputeResourceId))) {\n                _context10.next = 7;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", getters.defaultComputeResourceId);\n\n            case 7:\n              if (!(getters.computeResources.length > 0)) {\n                _context10.next = 11;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", getters.computeResources[0]);\n\n            case 11:\n              return _context10.abrupt(\"return\", null);\n\n            case 12:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }))();\n  },\n\n  loadDefaultComputeResourceId(_ref62) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee11() {\n      var dispatch;\n      return regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              dispatch = _ref62.dispatch;\n              _context11.next = 3;\n              return dispatch(\"loadWorkspacePreferences\");\n\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }))();\n  },\n\n  loadAppDeploymentQueues(_ref64) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee12() {\n      var commit, getters, applicationDeployment, appDeploymentQueues;\n      return regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              commit = _ref64.commit, getters = _ref64.getters;\n              applicationDeployment = getters.applicationDeployment;\n\n              if (!applicationDeployment) {\n                _context12.next = 9;\n                break;\n              }\n\n              _context12.next = 5;\n              return services.ApplicationDeploymentService.getQueues({\n                lookup: applicationDeployment.appDeploymentId\n              });\n\n            case 5:\n              appDeploymentQueues = _context12.sent;\n              commit(\"setAppDeploymentQueues\", {\n                appDeploymentQueues\n              });\n              _context12.next = 10;\n              break;\n\n            case 9:\n              commit(\"setAppDeploymentQueues\", {\n                appDeploymentQueues: []\n              });\n\n            case 10:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }))();\n  },\n\n  setDefaultQueue(_ref66) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee13() {\n      var dispatch, getters, defaultQueue;\n      return regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              dispatch = _ref66.dispatch, getters = _ref66.getters;\n              // set to the default queue or the first one\n              defaultQueue = getters.defaultQueue;\n\n              if (defaultQueue) {\n                dispatch(\"updateQueueName\", {\n                  queueName: defaultQueue.queueName\n                });\n              } else {\n                dispatch(\"updateQueueName\", {\n                  queueName: null\n                });\n              }\n\n            case 3:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }))();\n  },\n\n  initializeQueue(_ref68) {\n    var commit = _ref68.commit,\n        getters = _ref68.getters;\n    var queue = getters.queue;\n\n    if (queue) {\n      commit(\"updateTotalCPUCount\", {\n        totalCPUCount: getters.getDefaultCPUCount(queue)\n      });\n      commit(\"updateNodeCount\", {\n        nodeCount: getters.getDefaultNodeCount(queue)\n      });\n      commit(\"updateWallTimeLimit\", {\n        wallTimeLimit: getters.getDefaultWalltime(queue)\n      });\n      commit(\"updateTotalPhysicalMemory\", {\n        totalPhysicalMemory: 0\n      });\n    } else {\n      commit(\"updateTotalCPUCount\", {\n        totalCPUCount: 0\n      });\n      commit(\"updateNodeCount\", {\n        nodeCount: 0\n      });\n      commit(\"updateWallTimeLimit\", {\n        wallTimeLimit: 0\n      });\n      commit(\"updateTotalPhysicalMemory\", {\n        totalPhysicalMemory: 0\n      });\n    }\n  },\n\n  applyBatchQueueResourcePolicy(_ref69) {\n    var commit = _ref69.commit,\n        getters = _ref69.getters;\n\n    if (getters.batchQueueResourcePolicy) {\n      var crs = getters.experiment.userConfigurationData.computationalResourceScheduling;\n      var totalCPUCount = Math.min(crs.totalCPUCount, getters.batchQueueResourcePolicy.maxAllowedCores);\n\n      if (totalCPUCount !== crs.totalCPUCount) {\n        commit(\"updateTotalCPUCount\", {\n          totalCPUCount\n        });\n      }\n\n      var nodeCount = Math.min(crs.nodeCount, getters.batchQueueResourcePolicy.maxAllowedNodes);\n\n      if (nodeCount !== crs.nodeCount) {\n        commit(\"updateNodeCount\", {\n          nodeCount\n        });\n      }\n\n      var wallTimeLimit = Math.min(crs.wallTimeLimit, getters.batchQueueResourcePolicy.maxAllowedWalltime);\n\n      if (wallTimeLimit !== crs.wallTimeLimit) {\n        commit(\"updateWallTimeLimit\", {\n          wallTimeLimit\n        });\n      }\n    }\n  },\n\n  saveExperiment(_ref70) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee14() {\n      var commit, getters, experiment, _experiment;\n\n      return regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              commit = _ref70.commit, getters = _ref70.getters;\n\n              if (!getters.experiment.experimentId) {\n                _context14.next = 8;\n                break;\n              }\n\n              _context14.next = 4;\n              return services.ExperimentService.update({\n                data: getters.experiment,\n                lookup: getters.experiment.experimentId\n              });\n\n            case 4:\n              experiment = _context14.sent;\n              commit(\"setExperiment\", {\n                experiment\n              });\n              _context14.next = 12;\n              break;\n\n            case 8:\n              _context14.next = 10;\n              return services.ExperimentService.create({\n                data: getters.experiment\n              });\n\n            case 10:\n              _experiment = _context14.sent;\n              commit(\"setExperiment\", {\n                experiment: _experiment\n              });\n\n            case 12:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }))();\n  },\n\n  launchExperiment(_ref72) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee15() {\n      var getters;\n      return regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              getters = _ref72.getters;\n              _context15.next = 3;\n              return services.ExperimentService.launch({\n                lookup: getters.experiment.experimentId\n              });\n\n            case 3:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15);\n    }))();\n  },\n\n  loadProjects(_ref74) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee16() {\n      var commit, projects;\n      return regeneratorRuntime.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              commit = _ref74.commit;\n\n              if (!PROMISES.projects) {\n                PROMISES.projects = services.ProjectService.listAll();\n              }\n\n              _context16.next = 4;\n              return PROMISES.projects;\n\n            case 4:\n              projects = _context16.sent;\n              commit(\"setProjects\", {\n                projects\n              });\n\n            case 6:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16);\n    }))();\n  },\n\n  loadWorkspacePreferences(_ref76) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee17() {\n      var commit, workspacePreferences;\n      return regeneratorRuntime.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              commit = _ref76.commit;\n\n              if (!PROMISES.workspacePreferences) {\n                PROMISES.workspacePreferences = services.WorkspacePreferencesService.get();\n              }\n\n              _context17.next = 4;\n              return PROMISES.workspacePreferences;\n\n            case 4:\n              workspacePreferences = _context17.sent;\n              commit(\"setWorkspacePreferences\", {\n                workspacePreferences\n              });\n\n            case 6:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17);\n    }))();\n  },\n\n  loadDefaultProjectId(_ref78) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee18() {\n      var dispatch;\n      return regeneratorRuntime.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              dispatch = _ref78.dispatch;\n              _context18.next = 3;\n              return dispatch(\"loadWorkspacePreferences\");\n\n            case 3:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18);\n    }))();\n  },\n\n  loadComputeResourceNames(_ref80) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee19() {\n      var commit, computeResourceNames;\n      return regeneratorRuntime.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              commit = _ref80.commit;\n              _context19.next = 3;\n              return services.ComputeResourceService.names();\n\n            case 3:\n              computeResourceNames = _context19.sent;\n              commit(\"setComputeResourceNames\", {\n                computeResourceNames\n              });\n\n            case 5:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19);\n    }))();\n  },\n\n  loadDefaultGroupResourceProfileId(_ref82) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee20() {\n      var dispatch;\n      return regeneratorRuntime.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              dispatch = _ref82.dispatch;\n              _context20.next = 3;\n              return dispatch(\"loadWorkspacePreferences\");\n\n            case 3:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20);\n    }))();\n  },\n\n  loadGroupResourceProfiles(_ref84) {\n    return _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee21() {\n      var commit, groupResourceProfiles;\n      return regeneratorRuntime.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              commit = _ref84.commit;\n\n              if (!PROMISES.groupResourceProfiles) {\n                PROMISES.groupResourceProfiles = services.GroupResourceProfileService.list();\n              }\n\n              _context21.next = 4;\n              return PROMISES.groupResourceProfiles;\n\n            case 4:\n              groupResourceProfiles = _context21.sent;\n              commit(\"setGroupResourceProfiles\", {\n                groupResourceProfiles\n              });\n\n            case 6:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21);\n    }))();\n  }\n\n};\nexport var getters = {\n  getExperimentInputByName: state => name => {\n    if (!state.experiment) {\n      return null;\n    }\n\n    var experimentInputs = state.experiment.experimentInputs;\n\n    if (experimentInputs) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = experimentInputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var experimentInput = _step.value;\n\n          if (experimentInput.name === name) {\n            return experimentInput;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return null;\n  },\n  experiment: state => state.experiment,\n  projects: state => state.projects,\n  defaultProjectId: state => state.workspacePreferences ? state.workspacePreferences.most_recent_project_id : null,\n  defaultGroupResourceProfileId: state => state.workspacePreferences ? state.workspacePreferences.most_recent_group_resource_profile_id : null,\n  defaultComputeResourceId: state => state.workspacePreferences ? state.workspacePreferences.most_recent_compute_resource_id : null,\n  computeResourceNames: state => state.computeResourceNames,\n  groupResourceProfiles: state => state.groupResourceProfiles,\n  groupResourceProfileId: state => state.experiment ? state.experiment.userConfigurationData.groupResourceProfileId : null,\n  findGroupResourceProfile: state => groupResourceProfileId => state.groupResourceProfiles ? state.groupResourceProfiles.find(g => g.groupResourceProfileId === groupResourceProfileId) : null,\n  groupResourceProfile: (state, getters) => getters.findGroupResourceProfile(getters.groupResourceProfileId),\n  resourceHostId: state => state.experiment && state.experiment.userConfigurationData && state.experiment.userConfigurationData.computationalResourceScheduling ? state.experiment.userConfigurationData.computationalResourceScheduling.resourceHostId : null,\n  computeResources: state => state.applicationDeployments.map(dep => dep.computeHostId),\n  applicationDeployment: (state, getters) => {\n    if (state.applicationDeployments && getters.resourceHostId) {\n      return state.applicationDeployments.find(ad => ad.computeHostId === getters.resourceHostId);\n    } else {\n      return null;\n    }\n  },\n  isQueueInComputeResourcePolicy: (state, getters) => queueName => {\n    if (!getters.computeResourcePolicy) {\n      return true;\n    }\n\n    return getters.computeResourcePolicy.allowedBatchQueues.includes(queueName);\n  },\n  queues: (state, getters) => {\n    return state.appDeploymentQueues ? state.appDeploymentQueues.filter(q => getters.isQueueInComputeResourcePolicy(q.queueName)) : [];\n  },\n  defaultQueue: (state, getters) => {\n    var defaultQueue = getters.queues.find(q => q.isDefaultQueue);\n\n    if (defaultQueue) {\n      return defaultQueue;\n    } else if (getters.queues.length > 0) {\n      return getters.queues[0];\n    } else {\n      return null;\n    }\n  },\n  queueName: state => {\n    return state.experiment && state.experiment.userConfigurationData && state.experiment.userConfigurationData.computationalResourceScheduling ? state.experiment.userConfigurationData.computationalResourceScheduling.queueName : null;\n  },\n  totalCPUCount: state => {\n    return state.experiment && state.experiment.userConfigurationData && state.experiment.userConfigurationData.computationalResourceScheduling ? state.experiment.userConfigurationData.computationalResourceScheduling.totalCPUCount : null;\n  },\n  nodeCount: state => {\n    return state.experiment && state.experiment.userConfigurationData && state.experiment.userConfigurationData.computationalResourceScheduling ? state.experiment.userConfigurationData.computationalResourceScheduling.nodeCount : null;\n  },\n  wallTimeLimit: state => {\n    return state.experiment && state.experiment.userConfigurationData && state.experiment.userConfigurationData.computationalResourceScheduling ? state.experiment.userConfigurationData.computationalResourceScheduling.wallTimeLimit : null;\n  },\n  totalPhysicalMemory: state => {\n    return state.experiment && state.experiment.userConfigurationData && state.experiment.userConfigurationData.computationalResourceScheduling ? state.experiment.userConfigurationData.computationalResourceScheduling.totalPhysicalMemory : null;\n  },\n  queue: (state, getters) => {\n    return getters.queues && getters.queueName ? getters.queues.find(q => q.queueName === getters.queueName) : null;\n  },\n  getDefaultCPUCount: (state, getters) => queue => {\n    var batchQueueResourcePolicy = getters.batchQueueResourcePolicy;\n\n    if (batchQueueResourcePolicy) {\n      return Math.min(batchQueueResourcePolicy.maxAllowedCores, queue.defaultCPUCount);\n    }\n\n    return queue.defaultCPUCount;\n  },\n  getDefaultNodeCount: (state, getters) => queue => {\n    var batchQueueResourcePolicy = getters.batchQueueResourcePolicy;\n\n    if (batchQueueResourcePolicy) {\n      return Math.min(batchQueueResourcePolicy.maxAllowedNodes, queue.defaultNodeCount);\n    }\n\n    return queue.defaultNodeCount;\n  },\n  getDefaultWalltime: (state, getters) => queue => {\n    var batchQueueResourcePolicy = getters.batchQueueResourcePolicy;\n\n    if (batchQueueResourcePolicy) {\n      return Math.min(batchQueueResourcePolicy.maxAllowedWalltime, queue.defaultWalltime);\n    }\n\n    return queue.defaultWalltime;\n  },\n  computeResourcePolicy: (state, getters) => {\n    if (!getters.groupResourceProfile || !getters.resourceHostId) {\n      return null;\n    }\n\n    return getters.groupResourceProfile.computeResourcePolicies.find(crp => crp.computeResourceId === getters.resourceHostId);\n  },\n  batchQueueResourcePolicies: (state, getters) => {\n    if (!getters.groupResourceProfile || !getters.resourceHostId) {\n      return null;\n    }\n\n    return getters.groupResourceProfile.batchQueueResourcePolicies.filter(bqrp => bqrp.computeResourceId === getters.resourceHostId);\n  },\n  batchQueueResourcePolicy: (state, getters) => {\n    if (!getters.batchQueueResourcePolicies || !getters.queueName) {\n      return null;\n    }\n\n    return getters.batchQueueResourcePolicies.find(bqrp => bqrp.queuename === getters.queueName);\n  },\n  maxAllowedCores: (state, getters) => {\n    if (!getters.queue) {\n      return 0;\n    }\n\n    var batchQueueResourcePolicy = getters.batchQueueResourcePolicy;\n\n    if (batchQueueResourcePolicy) {\n      return Math.min(batchQueueResourcePolicy.maxAllowedCores, getters.queue.maxProcessors);\n    }\n\n    return getters.queue.maxProcessors;\n  },\n  maxAllowedNodes: (state, getters) => {\n    if (!getters.queue) {\n      return 0;\n    }\n\n    var batchQueueResourcePolicy = getters.batchQueueResourcePolicy;\n\n    if (batchQueueResourcePolicy) {\n      return Math.min(batchQueueResourcePolicy.maxAllowedNodes, getters.queue.maxNodes);\n    }\n\n    return getters.queue.maxNodes;\n  },\n  maxAllowedWalltime: (state, getters) => {\n    if (!getters.queue) {\n      return 0;\n    }\n\n    var batchQueueResourcePolicy = getters.batchQueueResourcePolicy;\n\n    if (batchQueueResourcePolicy) {\n      return Math.min(batchQueueResourcePolicy.maxAllowedWalltime, getters.queue.maxRunTime);\n    }\n\n    return getters.queue.maxRunTime;\n  },\n  maxMemory: (state, getters) => {\n    return getters.queue ? getters.queue.maxMemory : 0;\n  }\n};\nexport default new Vuex.Store({\n  strict: process.env.NODE_ENV !== \"production\",\n  state: {\n    experiment: null,\n    projects: null,\n    computeResourceNames: {},\n    applicationDeployments: [],\n    groupResourceProfiles: null,\n    applicationModuleId: null,\n    appDeploymentQueues: [],\n    // Lazy state fields that will be copied to the experiment once it is loaded\n    queueName: null\n  },\n  mutations,\n  actions,\n  getters\n});",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/workspace/static/django_airavata_workspace/js/web-components/store.js"],"names":["errors","services","utils","Vue","Vuex","use","PROMISES","workspacePreferences","mutations","setExperiment","state","experiment","updateExperimentName","name","experimentName","updateExperimentInputValue","inputName","value","experimentInput","experimentInputs","find","i","updateProjectId","projectId","updateGroupResourceProfileId","groupResourceProfileId","userConfigurationData","updateResourceHostId","resourceHostId","computationalResourceScheduling","updateQueueName","queueName","setLazyQueueName","updateTotalCPUCount","totalCPUCount","updateNodeCount","nodeCount","updateWallTimeLimit","wallTimeLimit","updateTotalPhysicalMemory","totalPhysicalMemory","setProjects","projects","setComputeResourceNames","computeResourceNames","setGroupResourceProfiles","groupResourceProfiles","setWorkspacePreferences","setApplicationModuleId","applicationModuleId","setApplicationDeployments","applicationDeployments","setAppDeploymentQueues","appDeploymentQueues","actions","loadNewExperiment","commit","dispatch","applicationId","ApplicationModuleService","retrieve","lookup","applicationModule","getApplicationInterface","appInterface","createExperiment","currentDate","Date","toLocaleString","dateStyle","timeStyle","appModuleName","loadExperiment","experimentId","ExperimentService","ApplicationInterfaceService","executionId","loadExperimentData","Promise","all","most_recent_project_id","initializeGroupResourceProfileId","getters","findGroupResourceProfile","most_recent_group_resource_profile_id","length","updateComputeResourceHostId","loadApplicationDeployments","ApplicationDeploymentService","list","appModuleId","ignoreErrors","catch","error","ErrorUtils","isUnauthorizedError","reject","resolve","FetchUtils","reportError","applyGroupResourceProfile","computeResourceChanged","queue","initializeResourceHostId","computeResources","crid","defaultResourceHostId","getDefaultResourceHostId","defaultComputeResourceId","loadDefaultComputeResourceId","loadAppDeploymentQueues","applicationDeployment","getQueues","appDeploymentId","setDefaultQueue","defaultQueue","initializeQueue","getDefaultCPUCount","getDefaultNodeCount","getDefaultWalltime","applyBatchQueueResourcePolicy","batchQueueResourcePolicy","crs","Math","min","maxAllowedCores","maxAllowedNodes","maxAllowedWalltime","saveExperiment","update","data","create","launchExperiment","launch","loadProjects","ProjectService","listAll","loadWorkspacePreferences","WorkspacePreferencesService","get","loadDefaultProjectId","loadComputeResourceNames","ComputeResourceService","names","loadDefaultGroupResourceProfileId","loadGroupResourceProfiles","GroupResourceProfileService","getExperimentInputByName","defaultProjectId","defaultGroupResourceProfileId","most_recent_compute_resource_id","g","groupResourceProfile","map","dep","computeHostId","ad","isQueueInComputeResourcePolicy","computeResourcePolicy","allowedBatchQueues","includes","queues","filter","q","isDefaultQueue","defaultCPUCount","defaultNodeCount","defaultWalltime","computeResourcePolicies","crp","computeResourceId","batchQueueResourcePolicies","bqrp","queuename","maxProcessors","maxNodes","maxRunTime","maxMemory","Store","strict","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["import { errors, services, utils } from \"django-airavata-api\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n\nconst PROMISES = {\n  workspacePreferences: null,\n};\nexport const mutations = {\n  setExperiment(state, { experiment }) {\n    state.experiment = experiment;\n  },\n  updateExperimentName(state, { name }) {\n    state.experiment.experimentName = name;\n  },\n  updateExperimentInputValue(state, { inputName, value }) {\n    const experimentInput = state.experiment.experimentInputs.find(\n      (i) => i.name === inputName\n    );\n    experimentInput.value = value;\n  },\n  updateProjectId(state, { projectId }) {\n    state.experiment.projectId = projectId;\n  },\n  updateGroupResourceProfileId(state, { groupResourceProfileId }) {\n    state.experiment.userConfigurationData.groupResourceProfileId = groupResourceProfileId;\n  },\n  updateResourceHostId(state, { resourceHostId }) {\n    state.experiment.userConfigurationData.computationalResourceScheduling.resourceHostId = resourceHostId;\n  },\n  updateQueueName(state, { queueName }) {\n    state.experiment.userConfigurationData.computationalResourceScheduling.queueName = queueName;\n  },\n  setLazyQueueName(state, { queueName }) {\n    state.queueName = queueName;\n  },\n  updateTotalCPUCount(state, { totalCPUCount }) {\n    state.experiment.userConfigurationData.computationalResourceScheduling.totalCPUCount = totalCPUCount;\n  },\n  updateNodeCount(state, { nodeCount }) {\n    state.experiment.userConfigurationData.computationalResourceScheduling.nodeCount = nodeCount;\n  },\n  updateWallTimeLimit(state, { wallTimeLimit }) {\n    state.experiment.userConfigurationData.computationalResourceScheduling.wallTimeLimit = wallTimeLimit;\n  },\n  updateTotalPhysicalMemory(state, { totalPhysicalMemory }) {\n    state.experiment.userConfigurationData.computationalResourceScheduling.totalPhysicalMemory = totalPhysicalMemory;\n  },\n  setProjects(state, { projects }) {\n    state.projects = projects;\n  },\n  setComputeResourceNames(state, { computeResourceNames }) {\n    state.computeResourceNames = computeResourceNames;\n  },\n  setGroupResourceProfiles(state, { groupResourceProfiles }) {\n    state.groupResourceProfiles = groupResourceProfiles;\n  },\n  setWorkspacePreferences(state, { workspacePreferences }) {\n    state.workspacePreferences = workspacePreferences;\n  },\n  setApplicationModuleId(state, { applicationModuleId }) {\n    state.applicationModuleId = applicationModuleId;\n  },\n  setApplicationDeployments(state, { applicationDeployments }) {\n    state.applicationDeployments = applicationDeployments;\n  },\n  setAppDeploymentQueues(state, { appDeploymentQueues }) {\n    state.appDeploymentQueues = appDeploymentQueues;\n  },\n};\nexport const actions = {\n  async loadNewExperiment({ commit, dispatch }, { applicationId }) {\n    const applicationModule = await services.ApplicationModuleService.retrieve({\n      lookup: applicationId,\n    });\n    const appInterface = await services.ApplicationModuleService.getApplicationInterface(\n      {\n        lookup: applicationId,\n      }\n    );\n    const experiment = appInterface.createExperiment();\n    const currentDate = new Date().toLocaleString([], {\n      dateStyle: \"medium\",\n      timeStyle: \"short\",\n    });\n    experiment.experimentName = `${applicationModule.appModuleName} on ${currentDate}`;\n    commit(\"setApplicationModuleId\", { applicationModuleId: applicationId });\n    await dispatch(\"setExperiment\", { experiment });\n  },\n  async loadExperiment({ commit, dispatch }, { experimentId }) {\n    const experiment = await services.ExperimentService.retrieve({\n      lookup: experimentId,\n    });\n    const appInterface = await services.ApplicationInterfaceService.retrieve({\n      lookup: experiment.executionId,\n    });\n    commit(\"setApplicationModuleId\", {\n      applicationModuleId: appInterface.applicationModuleId,\n    });\n    await dispatch(\"setExperiment\", { experiment });\n  },\n  async setExperiment({ commit, dispatch, state }, { experiment }) {\n    commit(\"setExperiment\", { experiment });\n    await dispatch(\"loadExperimentData\");\n    // Check lazy experiment state properties and apply them\n    if (state.queueName) {\n      dispatch(\"updateQueueName\", { queueName: state.queueName });\n    }\n  },\n  async loadExperimentData({ commit, dispatch, state }) {\n    await Promise.all([\n      dispatch(\"loadProjects\"),\n      dispatch(\"loadWorkspacePreferences\"),\n      dispatch(\"loadGroupResourceProfiles\"),\n    ]);\n\n    if (!state.experiment.projectId) {\n      commit(\"updateProjectId\", {\n        projectId: state.workspacePreferences.most_recent_project_id,\n      });\n    }\n\n    dispatch(\"initializeGroupResourceProfileId\");\n    const groupResourceProfileId =\n      state.experiment.userConfigurationData.groupResourceProfileId;\n    // If experiment has a group resource profile, load additional necessary\n    // data and re-apply group resource profile\n    if (groupResourceProfileId) {\n      await dispatch(\"loadApplicationDeployments\");\n      await dispatch(\"loadAppDeploymentQueues\");\n      await dispatch(\"applyGroupResourceProfile\");\n    }\n  },\n  initializeGroupResourceProfileId({ commit, getters, state }) {\n    // If there is no groupResourceProfileId set on the experiment, or there\n    // is one set but it is no longer in the list of accessible\n    // groupResourceProfiles, set to the default one, or the first one\n    let groupResourceProfileId =\n      state.experiment.userConfigurationData.groupResourceProfileId;\n    if (\n      !groupResourceProfileId ||\n      !getters.findGroupResourceProfile(groupResourceProfileId)\n    ) {\n      if (\n        getters.findGroupResourceProfile(\n          state.workspacePreferences.most_recent_group_resource_profile_id\n        )\n      ) {\n        commit(\"updateGroupResourceProfileId\", {\n          groupResourceProfileId:\n            state.workspacePreferences.most_recent_group_resource_profile_id,\n        });\n      } else if (state.groupResourceProfiles.length > 0) {\n        commit(\"updateGroupResourceProfileId\", {\n          groupResourceProfileId:\n            state.groupResourceProfiles[0].groupResourceProfileId,\n        });\n      } else {\n        commit(\"updateGroupResourceProfileId\", {\n          groupResourceProfileId: null,\n        });\n      }\n    }\n  },\n  updateExperimentName({ commit }, { name }) {\n    commit(\"updateExperimentName\", { name });\n  },\n  updateExperimentInputValue({ commit }, { inputName, value }) {\n    commit(\"updateExperimentInputValue\", { inputName, value });\n  },\n  updateProjectId({ commit }, { projectId }) {\n    commit(\"updateProjectId\", { projectId });\n  },\n  async updateGroupResourceProfileId(\n    { commit, dispatch },\n    { groupResourceProfileId }\n  ) {\n    commit(\"updateGroupResourceProfileId\", { groupResourceProfileId });\n    await dispatch(\"loadApplicationDeployments\");\n    await dispatch(\"applyGroupResourceProfile\");\n  },\n  async updateComputeResourceHostId(\n    { commit, dispatch, getters },\n    { resourceHostId }\n  ) {\n    if (getters.resourceHostId !== resourceHostId) {\n      commit(\"updateResourceHostId\", { resourceHostId });\n      await dispatch(\"loadAppDeploymentQueues\");\n      await dispatch(\"setDefaultQueue\");\n    }\n  },\n  updateQueueName({ commit, dispatch, state }, { queueName }) {\n    if (state.experiment) {\n      commit(\"updateQueueName\", { queueName });\n      dispatch(\"initializeQueue\");\n    } else {\n      commit(\"setLazyQueueName\", { queueName });\n    }\n  },\n  updateTotalCPUCount({ commit }, { totalCPUCount }) {\n    commit(\"updateTotalCPUCount\", { totalCPUCount });\n  },\n  updateNodeCount({ commit }, { nodeCount }) {\n    commit(\"updateNodeCount\", { nodeCount });\n  },\n  updateWallTimeLimit({ commit }, { wallTimeLimit }) {\n    commit(\"updateWallTimeLimit\", { wallTimeLimit });\n  },\n  updateTotalPhysicalMemory({ commit }, { totalPhysicalMemory }) {\n    commit(\"updateTotalPhysicalMemory\", { totalPhysicalMemory });\n  },\n  async loadApplicationDeployments({ commit, getters, state }) {\n    const applicationDeployments = await services.ApplicationDeploymentService.list(\n      {\n        appModuleId: state.applicationModuleId,\n        groupResourceProfileId: getters.groupResourceProfileId,\n      },\n      { ignoreErrors: true }\n    )\n      .catch((error) => {\n        // Ignore unauthorized errors, force user to pick another GroupResourceProfile\n        if (!errors.ErrorUtils.isUnauthorizedError(error)) {\n          return Promise.reject(error);\n        } else {\n          return Promise.resolve([]);\n        }\n      })\n      // Report all other error types\n      .catch(utils.FetchUtils.reportError);\n    commit(\"setApplicationDeployments\", { applicationDeployments });\n  },\n  async applyGroupResourceProfile({ dispatch, getters }) {\n    // Make sure that resource host id is in the list of app deployments\n    const computeResourceChanged = await dispatch(\"initializeResourceHostId\");\n    if (computeResourceChanged) {\n      await dispatch(\"loadAppDeploymentQueues\");\n      await dispatch(\"setDefaultQueue\");\n    } else if (!getters.queue) {\n      // allowed queues may have changed. If selected queue isn't in the list\n      // of allowed queues, reset to the default\n      await dispatch(\"setDefaultQueue\");\n    } else {\n      // reapply batchQueueResourcePolicy maximums since they may have changed\n      dispatch(\"applyBatchQueueResourcePolicy\");\n    }\n  },\n  async initializeResourceHostId({ commit, dispatch, getters }) {\n    // if there isn't a selected compute resource or there is but it isn't in\n    // the list of app deployments, set a default one\n    // Returns true if the resourceHostId changed\n    if (\n      !getters.resourceHostId ||\n      !getters.computeResources.find((crid) => crid === getters.resourceHostId)\n    ) {\n      const defaultResourceHostId = await dispatch(\"getDefaultResourceHostId\");\n      commit(\"updateResourceHostId\", {\n        resourceHostId: defaultResourceHostId,\n      });\n      return true;\n    }\n    return false;\n  },\n  async getDefaultResourceHostId({ dispatch, getters }) {\n    await dispatch(\"loadDefaultComputeResourceId\");\n    if (\n      getters.defaultComputeResourceId &&\n      getters.computeResources.find(\n        (crid) => crid === getters.defaultComputeResourceId\n      )\n    ) {\n      return getters.defaultComputeResourceId;\n    } else if (getters.computeResources.length > 0) {\n      // Just pick the first one\n      return getters.computeResources[0];\n    } else {\n      return null;\n    }\n  },\n  async loadDefaultComputeResourceId({ dispatch }) {\n    await dispatch(\"loadWorkspacePreferences\");\n  },\n  async loadAppDeploymentQueues({ commit, getters }) {\n    const applicationDeployment = getters.applicationDeployment;\n    if (applicationDeployment) {\n      const appDeploymentQueues = await services.ApplicationDeploymentService.getQueues(\n        {\n          lookup: applicationDeployment.appDeploymentId,\n        }\n      );\n      commit(\"setAppDeploymentQueues\", { appDeploymentQueues });\n    } else {\n      commit(\"setAppDeploymentQueues\", { appDeploymentQueues: [] });\n    }\n  },\n  async setDefaultQueue({ dispatch, getters }) {\n    // set to the default queue or the first one\n    const defaultQueue = getters.defaultQueue;\n    if (defaultQueue) {\n      dispatch(\"updateQueueName\", { queueName: defaultQueue.queueName });\n    } else {\n      dispatch(\"updateQueueName\", { queueName: null });\n    }\n  },\n  initializeQueue({ commit, getters }) {\n    const queue = getters.queue;\n    if (queue) {\n      commit(\"updateTotalCPUCount\", {\n        totalCPUCount: getters.getDefaultCPUCount(queue),\n      });\n      commit(\"updateNodeCount\", {\n        nodeCount: getters.getDefaultNodeCount(queue),\n      });\n      commit(\"updateWallTimeLimit\", {\n        wallTimeLimit: getters.getDefaultWalltime(queue),\n      });\n      commit(\"updateTotalPhysicalMemory\", { totalPhysicalMemory: 0 });\n    } else {\n      commit(\"updateTotalCPUCount\", { totalCPUCount: 0 });\n      commit(\"updateNodeCount\", { nodeCount: 0 });\n      commit(\"updateWallTimeLimit\", { wallTimeLimit: 0 });\n      commit(\"updateTotalPhysicalMemory\", { totalPhysicalMemory: 0 });\n    }\n  },\n  applyBatchQueueResourcePolicy({ commit, getters }) {\n    if (getters.batchQueueResourcePolicy) {\n      const crs =\n        getters.experiment.userConfigurationData\n          .computationalResourceScheduling;\n      const totalCPUCount = Math.min(\n        crs.totalCPUCount,\n        getters.batchQueueResourcePolicy.maxAllowedCores\n      );\n      if (totalCPUCount !== crs.totalCPUCount) {\n        commit(\"updateTotalCPUCount\", {\n          totalCPUCount,\n        });\n      }\n      const nodeCount = Math.min(\n        crs.nodeCount,\n        getters.batchQueueResourcePolicy.maxAllowedNodes\n      );\n      if (nodeCount !== crs.nodeCount) {\n        commit(\"updateNodeCount\", {\n          nodeCount,\n        });\n      }\n      const wallTimeLimit = Math.min(\n        crs.wallTimeLimit,\n        getters.batchQueueResourcePolicy.maxAllowedWalltime\n      );\n      if (wallTimeLimit !== crs.wallTimeLimit) {\n        commit(\"updateWallTimeLimit\", {\n          wallTimeLimit,\n        });\n      }\n    }\n  },\n  async saveExperiment({ commit, getters }) {\n    if (getters.experiment.experimentId) {\n      const experiment = await services.ExperimentService.update({\n        data: getters.experiment,\n        lookup: getters.experiment.experimentId,\n      });\n      commit(\"setExperiment\", { experiment });\n    } else {\n      const experiment = await services.ExperimentService.create({\n        data: getters.experiment,\n      });\n      commit(\"setExperiment\", { experiment });\n    }\n  },\n  async launchExperiment({ getters }) {\n    await services.ExperimentService.launch({\n      lookup: getters.experiment.experimentId,\n    });\n  },\n  async loadProjects({ commit }) {\n    if (!PROMISES.projects) {\n      PROMISES.projects = services.ProjectService.listAll();\n    }\n    const projects = await PROMISES.projects;\n    commit(\"setProjects\", { projects });\n  },\n  async loadWorkspacePreferences({ commit }) {\n    if (!PROMISES.workspacePreferences) {\n      PROMISES.workspacePreferences = services.WorkspacePreferencesService.get();\n    }\n    const workspacePreferences = await PROMISES.workspacePreferences;\n    commit(\"setWorkspacePreferences\", { workspacePreferences });\n  },\n  async loadDefaultProjectId({ dispatch }) {\n    await dispatch(\"loadWorkspacePreferences\");\n  },\n  async loadComputeResourceNames({ commit }) {\n    const computeResourceNames = await services.ComputeResourceService.names();\n    commit(\"setComputeResourceNames\", { computeResourceNames });\n  },\n  async loadDefaultGroupResourceProfileId({ dispatch }) {\n    await dispatch(\"loadWorkspacePreferences\");\n  },\n  async loadGroupResourceProfiles({ commit }) {\n    if (!PROMISES.groupResourceProfiles) {\n      PROMISES.groupResourceProfiles = services.GroupResourceProfileService.list();\n    }\n    const groupResourceProfiles = await PROMISES.groupResourceProfiles;\n    commit(\"setGroupResourceProfiles\", { groupResourceProfiles });\n  },\n};\n\nexport const getters = {\n  getExperimentInputByName: (state) => (name) => {\n    if (!state.experiment) {\n      return null;\n    }\n    const experimentInputs = state.experiment.experimentInputs;\n    if (experimentInputs) {\n      for (const experimentInput of experimentInputs) {\n        if (experimentInput.name === name) {\n          return experimentInput;\n        }\n      }\n    }\n    return null;\n  },\n  experiment: (state) => state.experiment,\n  projects: (state) => state.projects,\n  defaultProjectId: (state) =>\n    state.workspacePreferences\n      ? state.workspacePreferences.most_recent_project_id\n      : null,\n  defaultGroupResourceProfileId: (state) =>\n    state.workspacePreferences\n      ? state.workspacePreferences.most_recent_group_resource_profile_id\n      : null,\n  defaultComputeResourceId: (state) =>\n    state.workspacePreferences\n      ? state.workspacePreferences.most_recent_compute_resource_id\n      : null,\n  computeResourceNames: (state) => state.computeResourceNames,\n  groupResourceProfiles: (state) => state.groupResourceProfiles,\n  groupResourceProfileId: (state) =>\n    state.experiment\n      ? state.experiment.userConfigurationData.groupResourceProfileId\n      : null,\n  findGroupResourceProfile: (state) => (groupResourceProfileId) =>\n    state.groupResourceProfiles\n      ? state.groupResourceProfiles.find(\n          (g) => g.groupResourceProfileId === groupResourceProfileId\n        )\n      : null,\n  groupResourceProfile: (state, getters) =>\n    getters.findGroupResourceProfile(getters.groupResourceProfileId),\n  resourceHostId: (state) =>\n    state.experiment &&\n    state.experiment.userConfigurationData &&\n    state.experiment.userConfigurationData.computationalResourceScheduling\n      ? state.experiment.userConfigurationData.computationalResourceScheduling\n          .resourceHostId\n      : null,\n  computeResources: (state) =>\n    state.applicationDeployments.map((dep) => dep.computeHostId),\n  applicationDeployment: (state, getters) => {\n    if (state.applicationDeployments && getters.resourceHostId) {\n      return state.applicationDeployments.find(\n        (ad) => ad.computeHostId === getters.resourceHostId\n      );\n    } else {\n      return null;\n    }\n  },\n  isQueueInComputeResourcePolicy: (state, getters) => (queueName) => {\n    if (!getters.computeResourcePolicy) {\n      return true;\n    }\n    return getters.computeResourcePolicy.allowedBatchQueues.includes(queueName);\n  },\n  queues: (state, getters) => {\n    return state.appDeploymentQueues\n      ? state.appDeploymentQueues.filter((q) =>\n          getters.isQueueInComputeResourcePolicy(q.queueName)\n        )\n      : [];\n  },\n  defaultQueue: (state, getters) => {\n    const defaultQueue = getters.queues.find((q) => q.isDefaultQueue);\n    if (defaultQueue) {\n      return defaultQueue;\n    } else if (getters.queues.length > 0) {\n      return getters.queues[0];\n    } else {\n      return null;\n    }\n  },\n  queueName: (state) => {\n    return state.experiment &&\n      state.experiment.userConfigurationData &&\n      state.experiment.userConfigurationData.computationalResourceScheduling\n      ? state.experiment.userConfigurationData.computationalResourceScheduling\n          .queueName\n      : null;\n  },\n  totalCPUCount: (state) => {\n    return state.experiment &&\n      state.experiment.userConfigurationData &&\n      state.experiment.userConfigurationData.computationalResourceScheduling\n      ? state.experiment.userConfigurationData.computationalResourceScheduling\n          .totalCPUCount\n      : null;\n  },\n  nodeCount: (state) => {\n    return state.experiment &&\n      state.experiment.userConfigurationData &&\n      state.experiment.userConfigurationData.computationalResourceScheduling\n      ? state.experiment.userConfigurationData.computationalResourceScheduling\n          .nodeCount\n      : null;\n  },\n  wallTimeLimit: (state) => {\n    return state.experiment &&\n      state.experiment.userConfigurationData &&\n      state.experiment.userConfigurationData.computationalResourceScheduling\n      ? state.experiment.userConfigurationData.computationalResourceScheduling\n          .wallTimeLimit\n      : null;\n  },\n  totalPhysicalMemory: (state) => {\n    return state.experiment &&\n      state.experiment.userConfigurationData &&\n      state.experiment.userConfigurationData.computationalResourceScheduling\n      ? state.experiment.userConfigurationData.computationalResourceScheduling\n          .totalPhysicalMemory\n      : null;\n  },\n  queue: (state, getters) => {\n    return getters.queues && getters.queueName\n      ? getters.queues.find((q) => q.queueName === getters.queueName)\n      : null;\n  },\n  getDefaultCPUCount: (state, getters) => (queue) => {\n    const batchQueueResourcePolicy = getters.batchQueueResourcePolicy;\n    if (batchQueueResourcePolicy) {\n      return Math.min(\n        batchQueueResourcePolicy.maxAllowedCores,\n        queue.defaultCPUCount\n      );\n    }\n    return queue.defaultCPUCount;\n  },\n  getDefaultNodeCount: (state, getters) => (queue) => {\n    const batchQueueResourcePolicy = getters.batchQueueResourcePolicy;\n    if (batchQueueResourcePolicy) {\n      return Math.min(\n        batchQueueResourcePolicy.maxAllowedNodes,\n        queue.defaultNodeCount\n      );\n    }\n    return queue.defaultNodeCount;\n  },\n  getDefaultWalltime: (state, getters) => (queue) => {\n    const batchQueueResourcePolicy = getters.batchQueueResourcePolicy;\n    if (batchQueueResourcePolicy) {\n      return Math.min(\n        batchQueueResourcePolicy.maxAllowedWalltime,\n        queue.defaultWalltime\n      );\n    }\n    return queue.defaultWalltime;\n  },\n  computeResourcePolicy: (state, getters) => {\n    if (!getters.groupResourceProfile || !getters.resourceHostId) {\n      return null;\n    }\n    return getters.groupResourceProfile.computeResourcePolicies.find(\n      (crp) => crp.computeResourceId === getters.resourceHostId\n    );\n  },\n  batchQueueResourcePolicies: (state, getters) => {\n    if (!getters.groupResourceProfile || !getters.resourceHostId) {\n      return null;\n    }\n    return getters.groupResourceProfile.batchQueueResourcePolicies.filter(\n      (bqrp) => bqrp.computeResourceId === getters.resourceHostId\n    );\n  },\n  batchQueueResourcePolicy: (state, getters) => {\n    if (!getters.batchQueueResourcePolicies || !getters.queueName) {\n      return null;\n    }\n    return getters.batchQueueResourcePolicies.find(\n      (bqrp) => bqrp.queuename === getters.queueName\n    );\n  },\n  maxAllowedCores: (state, getters) => {\n    if (!getters.queue) {\n      return 0;\n    }\n    const batchQueueResourcePolicy = getters.batchQueueResourcePolicy;\n    if (batchQueueResourcePolicy) {\n      return Math.min(\n        batchQueueResourcePolicy.maxAllowedCores,\n        getters.queue.maxProcessors\n      );\n    }\n    return getters.queue.maxProcessors;\n  },\n  maxAllowedNodes: (state, getters) => {\n    if (!getters.queue) {\n      return 0;\n    }\n    const batchQueueResourcePolicy = getters.batchQueueResourcePolicy;\n    if (batchQueueResourcePolicy) {\n      return Math.min(\n        batchQueueResourcePolicy.maxAllowedNodes,\n        getters.queue.maxNodes\n      );\n    }\n    return getters.queue.maxNodes;\n  },\n  maxAllowedWalltime: (state, getters) => {\n    if (!getters.queue) {\n      return 0;\n    }\n    const batchQueueResourcePolicy = getters.batchQueueResourcePolicy;\n    if (batchQueueResourcePolicy) {\n      return Math.min(\n        batchQueueResourcePolicy.maxAllowedWalltime,\n        getters.queue.maxRunTime\n      );\n    }\n    return getters.queue.maxRunTime;\n  },\n  maxMemory: (state, getters) => {\n    return getters.queue ? getters.queue.maxMemory : 0;\n  },\n};\n\nexport default new Vuex.Store({\n  strict: process.env.NODE_ENV !== \"production\",\n  state: {\n    experiment: null,\n    projects: null,\n    computeResourceNames: {},\n    applicationDeployments: [],\n    groupResourceProfiles: null,\n    applicationModuleId: null,\n    appDeploymentQueues: [],\n    // Lazy state fields that will be copied to the experiment once it is loaded\n    queueName: null,\n  },\n  mutations,\n  actions,\n  getters,\n});\n"]}]}