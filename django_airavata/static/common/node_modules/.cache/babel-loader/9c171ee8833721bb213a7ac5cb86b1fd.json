{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/ExperimentUtils.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/ExperimentUtils.js","mtime":1639684988534},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { services } from \"../index\";\n\nvar createExperiment =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee() {\n    var _ref2,\n        applicationName,\n        applicationId,\n        applicationInterfaceId,\n        computeResourceName,\n        experimentName,\n        experimentInputs,\n        applicationInterface,\n        applicationModuleId,\n        computeResourceId,\n        groupResourceProfile,\n        deployments,\n        deployment,\n        queueDescription,\n        workspacePreferences,\n        projectId,\n        experiment,\n        _iteratorNormalCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        input,\n        _args = arguments;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref2 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, applicationName = _ref2.applicationName, applicationId = _ref2.applicationId, applicationInterfaceId = _ref2.applicationInterfaceId, computeResourceName = _ref2.computeResourceName, experimentName = _ref2.experimentName, experimentInputs = _ref2.experimentInputs;\n            applicationInterface = null;\n\n            if (!applicationInterfaceId) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 5;\n            return loadApplicationInterfaceById(applicationInterfaceId);\n\n          case 5:\n            applicationInterface = _context.sent;\n            _context.next = 21;\n            break;\n\n          case 8:\n            if (!applicationId) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 11;\n            return loadApplicationInterfaceByApplicationModuleId(applicationId);\n\n          case 11:\n            applicationInterface = _context.sent;\n            _context.next = 21;\n            break;\n\n          case 14:\n            if (!applicationName) {\n              _context.next = 20;\n              break;\n            }\n\n            _context.next = 17;\n            return loadApplicationInterfaceByName(applicationName);\n\n          case 17:\n            applicationInterface = _context.sent;\n            _context.next = 21;\n            break;\n\n          case 20:\n            throw new Error(\"Either applicationInterfaceId or applicationId or applicationName is required\");\n\n          case 21:\n            applicationModuleId = applicationInterface.applicationModuleId;\n            computeResourceId = null;\n\n            if (!computeResourceName) {\n              _context.next = 29;\n              break;\n            }\n\n            _context.next = 26;\n            return loadComputeResourceIdByName(computeResourceName);\n\n          case 26:\n            computeResourceId = _context.sent;\n            _context.next = 30;\n            break;\n\n          case 29:\n            throw new Error(\"computeResourceName is required\");\n\n          case 30:\n            _context.next = 32;\n            return loadGroupResourceProfile(computeResourceId);\n\n          case 32:\n            groupResourceProfile = _context.sent;\n            _context.next = 35;\n            return loadApplicationDeployments(applicationModuleId, groupResourceProfile);\n\n          case 35:\n            deployments = _context.sent;\n            deployment = deployments.find(function (d) {\n              return d.computeHostId === computeResourceId;\n            });\n\n            if (deployment) {\n              _context.next = 39;\n              break;\n            }\n\n            throw new Error(\"Couldn't find a deployment for compute resource \".concat(computeResourceId));\n\n          case 39:\n            _context.next = 41;\n            return loadQueue(deployment);\n\n          case 41:\n            queueDescription = _context.sent;\n            _context.next = 44;\n            return loadWorkspacePreferences();\n\n          case 44:\n            workspacePreferences = _context.sent;\n            projectId = workspacePreferences.most_recent_project_id;\n            experiment = applicationInterface.createExperiment();\n\n            if (experimentName) {\n              experiment.experimentName = experimentName;\n            } else {\n              experiment.experimentName = \"\".concat(applicationInterface.applicationName, \" on \").concat(new Date().toLocaleString([], {\n                dateStyle: \"medium\",\n                timeStyle: \"short\"\n              }));\n            }\n\n            experiment.projectId = projectId;\n            experiment.userConfigurationData.groupResourceProfileId = groupResourceProfile.groupResourceProfileId;\n            experiment.userConfigurationData.computationalResourceScheduling.resourceHostId = computeResourceId;\n            experiment.userConfigurationData.computationalResourceScheduling.totalCPUCount = queueDescription.defaultCPUCount;\n            experiment.userConfigurationData.computationalResourceScheduling.nodeCount = queueDescription.defaultNodeCount;\n            experiment.userConfigurationData.computationalResourceScheduling.wallTimeLimit = queueDescription.defaultWalltime;\n            experiment.userConfigurationData.computationalResourceScheduling.queueName = queueDescription.queueName;\n\n            if (!experimentInputs) {\n              _context.next = 75;\n              break;\n            }\n\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context.prev = 59;\n\n            for (_iterator = experiment.experimentInputs[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              input = _step.value;\n\n              if (input.name in experimentInputs) {\n                input.value = experimentInputs[input.name];\n              }\n            }\n\n            _context.next = 67;\n            break;\n\n          case 63:\n            _context.prev = 63;\n            _context.t0 = _context[\"catch\"](59);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 67:\n            _context.prev = 67;\n            _context.prev = 68;\n\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n\n          case 70:\n            _context.prev = 70;\n\n            if (!_didIteratorError) {\n              _context.next = 73;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 73:\n            return _context.finish(70);\n\n          case 74:\n            return _context.finish(67);\n\n          case 75:\n            return _context.abrupt(\"return\", experiment);\n\n          case 76:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[59, 63, 67, 75], [68,, 70, 74]]);\n  }));\n\n  return function createExperiment() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar loadApplicationInterfaceByName =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(applicationName) {\n    var applicationInterfaces, applicationInterface;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return services.ApplicationInterfaceService.list();\n\n          case 2:\n            applicationInterfaces = _context2.sent;\n            applicationInterface = applicationInterfaces.find(function (ai) {\n              return ai.applicationName === applicationName;\n            });\n\n            if (applicationInterface) {\n              _context2.next = 6;\n              break;\n            }\n\n            throw new Error(\"Could not find application interface named \".concat(applicationName));\n\n          case 6:\n            return _context2.abrupt(\"return\", applicationInterface);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function loadApplicationInterfaceByName(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar loadApplicationInterfaceById =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee3(applicationInterfaceId) {\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return services.ApplicationInterfaceService.retrieve({\n              lookup: applicationInterfaceId\n            });\n\n          case 2:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function loadApplicationInterfaceById(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar loadApplicationInterfaceByApplicationModuleId =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee4(applicationId) {\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return services.ApplicationModuleService.getApplicationInterface({\n              lookup: applicationId\n            });\n\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function loadApplicationInterfaceByApplicationModuleId(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar loadComputeResourceIdByName =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee5(computeResourceName) {\n    var computeResourceNames, computeResourceId;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return services.ComputeResourceService.names();\n\n          case 2:\n            computeResourceNames = _context5.sent;\n            _context5.t0 = regeneratorRuntime.keys(computeResourceNames);\n\n          case 4:\n            if ((_context5.t1 = _context5.t0()).done) {\n              _context5.next = 10;\n              break;\n            }\n\n            computeResourceId = _context5.t1.value;\n\n            if (!(computeResourceNames.hasOwnProperty(computeResourceId) && computeResourceNames[computeResourceId] === computeResourceName)) {\n              _context5.next = 8;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", computeResourceId);\n\n          case 8:\n            _context5.next = 4;\n            break;\n\n          case 10:\n            throw new Error(\"Could not find compute resource with name \".concat(computeResourceName));\n\n          case 11:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function loadComputeResourceIdByName(_x4) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nvar loadGroupResourceProfile =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee6(computeResourceId) {\n    var groupResourceProfiles, groupResourceProfile;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return services.GroupResourceProfileService.list();\n\n          case 2:\n            groupResourceProfiles = _context6.sent;\n            groupResourceProfile = groupResourceProfiles.find(function (grp) {\n              var _iteratorNormalCompletion2 = true;\n              var _didIteratorError2 = false;\n              var _iteratorError2 = undefined;\n\n              try {\n                for (var _iterator2 = grp.computePreferences[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                  var computePref = _step2.value;\n\n                  if (computePref.computeResourceId === computeResourceId) {\n                    return true;\n                  }\n                }\n              } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n                } finally {\n                  if (_didIteratorError2) {\n                    throw _iteratorError2;\n                  }\n                }\n              }\n\n              return false;\n            });\n\n            if (groupResourceProfile) {\n              _context6.next = 6;\n              break;\n            }\n\n            throw new Error(\"Couldn't find a group resource profile for compute resource \".concat(computeResourceId));\n\n          case 6:\n            return _context6.abrupt(\"return\", groupResourceProfile);\n\n          case 7:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function loadGroupResourceProfile(_x5) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nvar loadApplicationDeployments =\n/*#__PURE__*/\nfunction () {\n  var _ref8 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee7(applicationModuleId, groupResourceProfile) {\n    return regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return services.ApplicationDeploymentService.list({\n              appModuleId: applicationModuleId,\n              groupResourceProfileId: groupResourceProfile.groupResourceProfileId\n            });\n\n          case 2:\n            return _context7.abrupt(\"return\", _context7.sent);\n\n          case 3:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function loadApplicationDeployments(_x6, _x7) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\nvar loadQueue =\n/*#__PURE__*/\nfunction () {\n  var _ref9 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee8(applicationDeployment) {\n    var queues, queue;\n    return regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return services.ApplicationDeploymentService.getQueues({\n              lookup: applicationDeployment.appDeploymentId\n            });\n\n          case 2:\n            queues = _context8.sent;\n            queue = queues.find(function (q) {\n              return q.isDefaultQueue;\n            });\n\n            if (queue) {\n              _context8.next = 6;\n              break;\n            }\n\n            throw new Error(\"Couldn't find a default queue for deployment \" + applicationDeployment.appDeploymentId);\n\n          case 6:\n            return _context8.abrupt(\"return\", queue);\n\n          case 7:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n\n  return function loadQueue(_x8) {\n    return _ref9.apply(this, arguments);\n  };\n}();\n\nvar loadWorkspacePreferences =\n/*#__PURE__*/\nfunction () {\n  var _ref10 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee9() {\n    return regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return services.WorkspacePreferencesService.get();\n\n          case 2:\n            return _context9.abrupt(\"return\", _context9.sent);\n\n          case 3:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n\n  return function loadWorkspacePreferences() {\n    return _ref10.apply(this, arguments);\n  };\n}();\n\nvar loadExperiment =\n/*#__PURE__*/\nfunction () {\n  var _ref11 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee10(experimentId) {\n    return regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.next = 2;\n            return services.ExperimentService.retrieve({\n              lookup: experimentId\n            });\n\n          case 2:\n            return _context10.abrupt(\"return\", _context10.sent);\n\n          case 3:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n\n  return function loadExperiment(_x9) {\n    return _ref11.apply(this, arguments);\n  };\n}();\n\nvar readDataProduct =\n/*#__PURE__*/\nfunction () {\n  var _ref12 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee11(dataProductURI) {\n    var _ref13,\n        _ref13$bodyType,\n        bodyType,\n        _args11 = arguments;\n\n    return regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _ref13 = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {}, _ref13$bodyType = _ref13.bodyType, bodyType = _ref13$bodyType === void 0 ? \"text\" : _ref13$bodyType;\n            _context11.next = 3;\n            return fetch(\"/sdk/download/?data-product-uri=\".concat(encodeURIComponent(dataProductURI)), {\n              credentials: \"same-origin\"\n            }).then(function (r) {\n              if (r.status === 404) {\n                return null;\n              }\n\n              if (!r.ok) {\n                throw new Error(r.statusText);\n              }\n\n              return r[bodyType]();\n            });\n\n          case 3:\n            return _context11.abrupt(\"return\", _context11.sent);\n\n          case 4:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n\n  return function readDataProduct(_x10) {\n    return _ref12.apply(this, arguments);\n  };\n}();\n\nvar readExperimentDataObject =\n/*#__PURE__*/\nfunction () {\n  var _ref14 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee12(experimentId, name, dataType) {\n    var _ref15,\n        _ref15$bodyType,\n        bodyType,\n        experiment,\n        dataObjectsField,\n        dataObject,\n        downloads,\n        _args12 = arguments;\n\n    return regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _ref15 = _args12.length > 3 && _args12[3] !== undefined ? _args12[3] : {}, _ref15$bodyType = _ref15.bodyType, bodyType = _ref15$bodyType === void 0 ? \"text\" : _ref15$bodyType;\n\n            if (!(dataType !== \"input\" && dataType !== \"output\")) {\n              _context12.next = 3;\n              break;\n            }\n\n            throw new Error(\"dataType should be one of 'input' or 'output'\");\n\n          case 3:\n            _context12.next = 5;\n            return loadExperiment(experimentId);\n\n          case 5:\n            experiment = _context12.sent;\n            dataObjectsField = dataType === \"input\" ? \"experimentInputs\" : \"experimentOutputs\";\n            dataObject = experiment[dataObjectsField].find(function (dataObj) {\n              return dataObj.name === name;\n            });\n\n            if (!(dataObject.value && dataObject.type.isFileValueType)) {\n              _context12.next = 19;\n              break;\n            }\n\n            downloads = dataObject.value.split(\",\").map(function (dp) {\n              return readDataProduct(dp, {\n                bodyType: bodyType\n              });\n            });\n\n            if (!(downloads.length === 1)) {\n              _context12.next = 16;\n              break;\n            }\n\n            _context12.next = 13;\n            return downloads[0];\n\n          case 13:\n            return _context12.abrupt(\"return\", _context12.sent);\n\n          case 16:\n            _context12.next = 18;\n            return Promise.all(downloads);\n\n          case 18:\n            return _context12.abrupt(\"return\", _context12.sent);\n\n          case 19:\n            return _context12.abrupt(\"return\", null);\n\n          case 20:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  }));\n\n  return function readExperimentDataObject(_x11, _x12, _x13) {\n    return _ref14.apply(this, arguments);\n  };\n}();\n\nvar readInputFile =\n/*#__PURE__*/\nfunction () {\n  var _ref16 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee13(experimentId, inputName) {\n    var _ref17,\n        _ref17$bodyType,\n        bodyType,\n        _args13 = arguments;\n\n    return regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            _ref17 = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : {}, _ref17$bodyType = _ref17.bodyType, bodyType = _ref17$bodyType === void 0 ? \"text\" : _ref17$bodyType;\n            _context13.next = 3;\n            return readExperimentDataObject(experimentId, inputName, \"input\", {\n              bodyType: bodyType\n            });\n\n          case 3:\n            return _context13.abrupt(\"return\", _context13.sent);\n\n          case 4:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  }));\n\n  return function readInputFile(_x14, _x15) {\n    return _ref16.apply(this, arguments);\n  };\n}();\n\nvar readOutputFile =\n/*#__PURE__*/\nfunction () {\n  var _ref18 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee14(experimentId, outputName) {\n    var _ref19,\n        _ref19$bodyType,\n        bodyType,\n        _args14 = arguments;\n\n    return regeneratorRuntime.wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            _ref19 = _args14.length > 2 && _args14[2] !== undefined ? _args14[2] : {}, _ref19$bodyType = _ref19.bodyType, bodyType = _ref19$bodyType === void 0 ? \"text\" : _ref19$bodyType;\n            _context14.next = 3;\n            return readExperimentDataObject(experimentId, outputName, \"output\", {\n              bodyType: bodyType\n            });\n\n          case 3:\n            return _context14.abrupt(\"return\", _context14.sent);\n\n          case 4:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee14);\n  }));\n\n  return function readOutputFile(_x16, _x17) {\n    return _ref18.apply(this, arguments);\n  };\n}();\n\nexport { createExperiment, readInputFile, readOutputFile, readDataProduct };\nexport default {\n  createExperiment: createExperiment,\n  readInputFile: readInputFile,\n  readOutputFile: readOutputFile,\n  readDataProduct: readDataProduct\n};",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/ExperimentUtils.js"],"names":["services","createExperiment","applicationName","applicationId","applicationInterfaceId","computeResourceName","experimentName","experimentInputs","applicationInterface","loadApplicationInterfaceById","loadApplicationInterfaceByApplicationModuleId","loadApplicationInterfaceByName","Error","applicationModuleId","computeResourceId","loadComputeResourceIdByName","loadGroupResourceProfile","groupResourceProfile","loadApplicationDeployments","deployments","deployment","find","d","computeHostId","loadQueue","queueDescription","loadWorkspacePreferences","workspacePreferences","projectId","most_recent_project_id","experiment","Date","toLocaleString","dateStyle","timeStyle","userConfigurationData","groupResourceProfileId","computationalResourceScheduling","resourceHostId","totalCPUCount","defaultCPUCount","nodeCount","defaultNodeCount","wallTimeLimit","defaultWalltime","queueName","input","name","value","ApplicationInterfaceService","list","applicationInterfaces","ai","retrieve","lookup","ApplicationModuleService","getApplicationInterface","ComputeResourceService","names","computeResourceNames","hasOwnProperty","GroupResourceProfileService","groupResourceProfiles","grp","computePreferences","computePref","ApplicationDeploymentService","appModuleId","applicationDeployment","getQueues","appDeploymentId","queues","queue","q","isDefaultQueue","WorkspacePreferencesService","get","loadExperiment","experimentId","ExperimentService","readDataProduct","dataProductURI","bodyType","fetch","encodeURIComponent","credentials","then","r","status","ok","statusText","readExperimentDataObject","dataType","dataObjectsField","dataObject","dataObj","type","isFileValueType","downloads","split","map","dp","length","Promise","all","readInputFile","inputName","readOutputFile","outputName"],"mappings":"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","sourcesContent":["import { services } from \"../index\";\n\nconst createExperiment = async function ({\n  applicationName, // name of the application interface (usually the same as the application module)\n  applicationId, // the id of the application module\n  applicationInterfaceId, // the id of the application interface\n  computeResourceName,\n  experimentName,\n  experimentInputs,\n} = {}) {\n  let applicationInterface = null;\n  if (applicationInterfaceId) {\n    applicationInterface = await loadApplicationInterfaceById(\n      applicationInterfaceId\n    );\n  } else if (applicationId) {\n    applicationInterface = await loadApplicationInterfaceByApplicationModuleId(\n      applicationId\n    );\n  } else if (applicationName) {\n    applicationInterface = await loadApplicationInterfaceByName(\n      applicationName\n    );\n  } else {\n    throw new Error(\n      \"Either applicationInterfaceId or applicationId or applicationName is required\"\n    );\n  }\n  const applicationModuleId = applicationInterface.applicationModuleId;\n  let computeResourceId = null;\n  if (computeResourceName) {\n    computeResourceId = await loadComputeResourceIdByName(computeResourceName);\n  } else {\n    throw new Error(\"computeResourceName is required\");\n  }\n  let groupResourceProfile = await loadGroupResourceProfile(computeResourceId);\n  let deployments = await loadApplicationDeployments(\n    applicationModuleId,\n    groupResourceProfile\n  );\n  const deployment = deployments.find(\n    (d) => d.computeHostId === computeResourceId\n  );\n  if (!deployment) {\n    throw new Error(\n      `Couldn't find a deployment for compute resource ${computeResourceId}`\n    );\n  }\n  let queueDescription = await loadQueue(deployment);\n  let workspacePreferences = await loadWorkspacePreferences();\n  const projectId = workspacePreferences.most_recent_project_id;\n\n  const experiment = applicationInterface.createExperiment();\n  if (experimentName) {\n    experiment.experimentName = experimentName;\n  } else {\n    experiment.experimentName = `${\n      applicationInterface.applicationName\n    } on ${new Date().toLocaleString([], {\n      dateStyle: \"medium\",\n      timeStyle: \"short\",\n    })}`;\n  }\n  experiment.projectId = projectId;\n  experiment.userConfigurationData.groupResourceProfileId =\n    groupResourceProfile.groupResourceProfileId;\n  experiment.userConfigurationData.computationalResourceScheduling.resourceHostId = computeResourceId;\n  experiment.userConfigurationData.computationalResourceScheduling.totalCPUCount =\n    queueDescription.defaultCPUCount;\n  experiment.userConfigurationData.computationalResourceScheduling.nodeCount =\n    queueDescription.defaultNodeCount;\n  experiment.userConfigurationData.computationalResourceScheduling.wallTimeLimit =\n    queueDescription.defaultWalltime;\n  experiment.userConfigurationData.computationalResourceScheduling.queueName =\n    queueDescription.queueName;\n\n  if (experimentInputs) {\n    for (let input of experiment.experimentInputs) {\n      if (input.name in experimentInputs) {\n        input.value = experimentInputs[input.name];\n      }\n    }\n  }\n  return experiment;\n};\n\nconst loadApplicationInterfaceByName = async function (applicationName) {\n  const applicationInterfaces = await services.ApplicationInterfaceService.list();\n  const applicationInterface = applicationInterfaces.find(\n    (ai) => ai.applicationName === applicationName\n  );\n  if (!applicationInterface) {\n    throw new Error(\n      `Could not find application interface named ${applicationName}`\n    );\n  }\n  return applicationInterface;\n};\n\nconst loadApplicationInterfaceById = async function (applicationInterfaceId) {\n  return await services.ApplicationInterfaceService.retrieve({\n    lookup: applicationInterfaceId,\n  });\n};\n\nconst loadApplicationInterfaceByApplicationModuleId = async function (\n  applicationId\n) {\n  return await services.ApplicationModuleService.getApplicationInterface({\n    lookup: applicationId,\n  });\n};\n\nconst loadComputeResourceIdByName = async function (computeResourceName) {\n  const computeResourceNames = await services.ComputeResourceService.names();\n  for (const computeResourceId in computeResourceNames) {\n    if (\n      computeResourceNames.hasOwnProperty(computeResourceId) &&\n      computeResourceNames[computeResourceId] === computeResourceName\n    ) {\n      return computeResourceId;\n    }\n  }\n  throw new Error(\n    `Could not find compute resource with name ${computeResourceName}`\n  );\n};\n\nconst loadGroupResourceProfile = async function (computeResourceId) {\n  const groupResourceProfiles = await services.GroupResourceProfileService.list();\n  const groupResourceProfile = groupResourceProfiles.find((grp) => {\n    for (let computePref of grp.computePreferences) {\n      if (computePref.computeResourceId === computeResourceId) {\n        return true;\n      }\n    }\n    return false;\n  });\n  if (!groupResourceProfile) {\n    throw new Error(\n      `Couldn't find a group resource profile for compute resource ${computeResourceId}`\n    );\n  }\n  return groupResourceProfile;\n};\n\nconst loadApplicationDeployments = async function (\n  applicationModuleId,\n  groupResourceProfile\n) {\n  return await services.ApplicationDeploymentService.list({\n    appModuleId: applicationModuleId,\n    groupResourceProfileId: groupResourceProfile.groupResourceProfileId,\n  });\n};\n\nconst loadQueue = async function (applicationDeployment) {\n  const queues = await services.ApplicationDeploymentService.getQueues({\n    lookup: applicationDeployment.appDeploymentId,\n  });\n  const queue = queues.find((q) => q.isDefaultQueue);\n  if (!queue) {\n    throw new Error(\n      \"Couldn't find a default queue for deployment \" +\n        applicationDeployment.appDeploymentId\n    );\n  }\n  return queue;\n};\n\nconst loadWorkspacePreferences = async function () {\n  return await services.WorkspacePreferencesService.get();\n};\n\nconst loadExperiment = async function (experimentId) {\n  return await services.ExperimentService.retrieve({ lookup: experimentId });\n};\n\nconst readDataProduct = async function (\n  dataProductURI,\n  { bodyType = \"text\" } = {}\n) {\n  return await fetch(\n    `/sdk/download/?data-product-uri=${encodeURIComponent(dataProductURI)}`,\n    {\n      credentials: \"same-origin\",\n    }\n  ).then((r) => {\n    if (r.status === 404) {\n      return null;\n    }\n    if (!r.ok) {\n      throw new Error(r.statusText);\n    }\n    return r[bodyType]();\n  });\n};\n\nconst readExperimentDataObject = async function (\n  experimentId,\n  name,\n  dataType,\n  { bodyType = \"text\" } = {}\n) {\n  if (dataType !== \"input\" && dataType !== \"output\") {\n    throw new Error(\"dataType should be one of 'input' or 'output'\");\n  }\n  const experiment = await loadExperiment(experimentId);\n  const dataObjectsField =\n    dataType === \"input\" ? \"experimentInputs\" : \"experimentOutputs\";\n  const dataObject = experiment[dataObjectsField].find(\n    (dataObj) => dataObj.name === name\n  );\n  if (dataObject.value && dataObject.type.isFileValueType) {\n    const downloads = dataObject.value\n      .split(\",\")\n      .map((dp) => readDataProduct(dp, { bodyType }));\n    if (downloads.length === 1) {\n      return await downloads[0];\n    } else {\n      return await Promise.all(downloads);\n    }\n  }\n  return null;\n};\n\nconst readInputFile = async function (\n  experimentId,\n  inputName,\n  { bodyType = \"text\" } = {}\n) {\n  return await readExperimentDataObject(experimentId, inputName, \"input\", {\n    bodyType,\n  });\n};\n\nconst readOutputFile = async function (\n  experimentId,\n  outputName,\n  { bodyType = \"text\" } = {}\n) {\n  return await readExperimentDataObject(experimentId, outputName, \"output\", {\n    bodyType,\n  });\n};\n\nexport { createExperiment, readInputFile, readOutputFile, readDataProduct };\n\nexport default {\n  createExperiment,\n  readInputFile,\n  readOutputFile,\n  readDataProduct,\n};\n"]}]}