{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/validators/MaxLengthValidator.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/validators/MaxLengthValidator.js","mtime":1638641844323},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport _classCallCheck from \"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar MaxLengthValidator =\n/*#__PURE__*/\nfunction () {\n  function MaxLengthValidator(config) {\n    _classCallCheck(this, MaxLengthValidator);\n\n    this.maxLength = config[\"value\"];\n\n    if (\"message\" in config) {\n      this.customErrorMessage = config[\"message\"];\n    }\n  }\n\n  _createClass(MaxLengthValidator, [{\n    key: \"validate\",\n    value: function validate(value) {\n      if (value === null || typeof value === \"undefined\") {\n        return null;\n      }\n\n      if (typeof value !== \"string\") {\n        value = value.toString();\n      }\n\n      if (value.length > this.maxLength) {\n        return this.getErrorMessage(value);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getErrorMessage\",\n    value: function getErrorMessage() {\n      if (this.customErrorMessage) {\n        return this.customErrorMessage;\n      } else {\n        return \"The value must be less than or equal to \" + this.maxLength + \" characters in length.\";\n      }\n    }\n  }]);\n\n  return MaxLengthValidator;\n}();\n\nexport { MaxLengthValidator as default };",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/validators/MaxLengthValidator.js"],"names":["MaxLengthValidator","config","maxLength","customErrorMessage","value","toString","length","getErrorMessage"],"mappings":";;;;IAAqBA,kB;;;AACnB,8BAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKC,SAAL,GAAiBD,MAAM,CAAC,OAAD,CAAvB;;AACA,QAAI,aAAaA,MAAjB,EAAyB;AACvB,WAAKE,kBAAL,GAA0BF,MAAM,CAAC,SAAD,CAAhC;AACD;AACF;;;;6BAEQG,K,EAAO;AACd,UAAIA,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,WAAvC,EAAoD;AAClD,eAAO,IAAP;AACD;;AACD,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,QAAAA,KAAK,GAAGA,KAAK,CAACC,QAAN,EAAR;AACD;;AACD,UAAID,KAAK,CAACE,MAAN,GAAe,KAAKJ,SAAxB,EAAmC;AACjC,eAAO,KAAKK,eAAL,CAAqBH,KAArB,CAAP;AACD;;AACD,aAAO,IAAP;AACD;;;sCAEiB;AAChB,UAAI,KAAKD,kBAAT,EAA6B;AAC3B,eAAO,KAAKA,kBAAZ;AACD,OAFD,MAEO;AACL,eACE,6CACA,KAAKD,SADL,GAEA,wBAHF;AAKD;AACF;;;;;;SA/BkBF,kB","sourcesContent":["export default class MaxLengthValidator {\n  constructor(config) {\n    this.maxLength = config[\"value\"];\n    if (\"message\" in config) {\n      this.customErrorMessage = config[\"message\"];\n    }\n  }\n\n  validate(value) {\n    if (value === null || typeof value === \"undefined\") {\n      return null;\n    }\n    if (typeof value !== \"string\") {\n      value = value.toString();\n    }\n    if (value.length > this.maxLength) {\n      return this.getErrorMessage(value);\n    }\n    return null;\n  }\n\n  getErrorMessage() {\n    if (this.customErrorMessage) {\n      return this.customErrorMessage;\n    } else {\n      return (\n        \"The value must be less than or equal to \" +\n        this.maxLength +\n        \" characters in length.\"\n      );\n    }\n  }\n}\n"]}]}