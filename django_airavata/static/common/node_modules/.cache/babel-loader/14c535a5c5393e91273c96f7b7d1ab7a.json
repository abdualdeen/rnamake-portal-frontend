{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/GatewayNoticesContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/js/components/GatewayNoticesContainer.vue","mtime":1638641844579},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/vue-loader/lib/index.js","mtime":1638646228900}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from \"moment\";\nimport { utils } from \"django-airavata-api\";\nexport default {\n  name: \"gateway-notices-container\",\n  props: [\"notices\", \"unreadCount\"],\n  methods: {\n    fromNow: function fromNow(date) {\n      return moment(date).fromNow();\n    },\n    ackNotification: function ackNotification(notice) {\n      var _this = this;\n\n      utils.FetchUtils.get(notice.url).then(function () {\n        notice.is_read = true;\n        _this.unreadCount--;\n      });\n    },\n    textColor: function textColor(notice) {\n      if (notice.priority === 0) {\n        return \"text-primary\";\n      } else if (notice.priority === 1) {\n        return \"text-warning\";\n      } else if (notice.priority === 2) {\n        return \"text-danger\";\n      }\n    }\n  },\n  computed: {\n    unreadNotices: function unreadNotices() {\n      return this.notices;\n    }\n  }\n};",{"version":3,"sources":["GatewayNoticesContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA,OAAA,MAAA,MAAA,QAAA;AACA,SAAA,KAAA,QAAA,qBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,2BADA;AAEA,EAAA,KAAA,EAAA,CAAA,SAAA,EAAA,aAAA,CAFA;AAGA,EAAA,OAAA,EAAA;AACA,IAAA,OADA,mBACA,IADA,EACA;AACA,aAAA,MAAA,CAAA,IAAA,CAAA,CAAA,OAAA,EAAA;AACA,KAHA;AAIA,IAAA,eAJA,2BAIA,MAJA,EAIA;AAAA;;AACA,MAAA,KAAA,CAAA,UAAA,CAAA,GAAA,CAAA,MAAA,CAAA,GAAA,EAAA,IAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,OAAA,GAAA,IAAA;AACA,QAAA,KAAA,CAAA,WAAA;AACA,OAHA;AAIA,KATA;AAUA,IAAA,SAVA,qBAUA,MAVA,EAUA;AACA,UAAA,MAAA,CAAA,QAAA,KAAA,CAAA,EAAA;AACA,eAAA,cAAA;AACA,OAFA,MAEA,IAAA,MAAA,CAAA,QAAA,KAAA,CAAA,EAAA;AACA,eAAA,cAAA;AACA,OAFA,MAEA,IAAA,MAAA,CAAA,QAAA,KAAA,CAAA,EAAA;AACA,eAAA,aAAA;AACA;AACA;AAlBA,GAHA;AAuBA,EAAA,QAAA,EAAA;AACA,IAAA,aADA,2BACA;AACA,aAAA,KAAA,OAAA;AACA;AAHA;AAvBA,CAAA","sourcesContent":["<template>\n  <div class=\"btn-group ml-3\">\n    <div class=\"dropdown\">\n      <a\n        href=\"#\"\n        class=\"dropdown-toggle text-dark\"\n        id=\"dropdownNoticeButton\"\n        data-toggle=\"dropdown\"\n        title=\"Notifications\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n      >\n        <span\n          class=\"fa-stack fa-1x has-badge\"\n          :data-count=\"unreadCount\"\n          id=\"unread_notification_count\"\n        >\n          <i class=\"fa fa-circle fa-stack-2x fa-inverse\"></i>\n          <i class=\"fa fa-bell fa-stack-1x\"></i>\n        </span>\n      </a>\n      <div\n        class=\"dropdown-menu widget-notifications no-padding\"\n        style=\"width: 300px;\"\n      >\n        <div class=\"notifications-list\">\n          <div class=\"text-center text-primary\">Notifications</div>\n\n          <template v-for=\"notice in unreadNotices\">\n            <div class=\"dropdown-divider\" :key=\"notice.notificationId\"></div>\n            <div class=\"dropdown-item\" :key=\"notice.notificationId\">\n              <div>\n                <span\n                  class=\"notification-title text-wrap\"\n                  :class=\"textColor(notice)\"\n                  >{{ notice.title }}</span\n                >\n                <a\n                  v-if=\"!notice.is_read\"\n                  class=\"fas fa-dot-circle\"\n                  data-toggle=\"tooltip\"\n                  data-placement=\"left\"\n                  title=\"Mark as read\"\n                  :id=\"notice.notificationId\"\n                  @click=\"ackNotification(notice)\"\n                >\n                </a>\n              </div>\n              <div\n                class=\"notification-description text-wrap\"\n                id=\"notification_description\"\n              >\n                <strong>{{ notice.notificationMessage }}</strong>\n              </div>\n              <div class=\"notification-ago time\">\n                {{ fromNow(notice.publishedTime) }}\n              </div>\n            </div>\n          </template>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport moment from \"moment\";\nimport { utils } from \"django-airavata-api\";\n\nexport default {\n  name: \"gateway-notices-container\",\n  props: [\"notices\", \"unreadCount\"],\n  methods: {\n    fromNow(date) {\n      return moment(date).fromNow();\n    },\n    ackNotification(notice) {\n      utils.FetchUtils.get(notice.url).then(() => {\n        notice.is_read = true;\n        this.unreadCount--;\n      });\n    },\n    textColor(notice) {\n      if (notice.priority === 0) {\n        return \"text-primary\";\n      } else if (notice.priority === 1) {\n        return \"text-warning\";\n      } else if (notice.priority === 2) {\n        return \"text-danger\";\n      }\n    },\n  },\n  computed: {\n    unreadNotices() {\n      return this.notices;\n    },\n  },\n};\n</script>\n"],"sourceRoot":"js/components"}]}