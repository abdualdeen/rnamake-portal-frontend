{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/BatchQueueResourcePolicy.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/BatchQueueResourcePolicy.js","mtime":1638641844319},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import _classCallCheck from \"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport BaseModel from \"./BaseModel\";\nvar FIELDS = [\"resourcePolicyId\", \"computeResourceId\", \"groupResourceProfileId\", \"queuename\", \"maxAllowedNodes\", \"maxAllowedCores\", \"maxAllowedWalltime\"];\n\nvar BatchQueueResourcePolicy =\n/*#__PURE__*/\nfunction (_BaseModel) {\n  _inherits(BatchQueueResourcePolicy, _BaseModel);\n\n  function BatchQueueResourcePolicy() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, BatchQueueResourcePolicy);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BatchQueueResourcePolicy).call(this, FIELDS, data));\n  }\n\n  _createClass(BatchQueueResourcePolicy, [{\n    key: \"validate\",\n    value: function validate(batchQueue) {\n      var validationResults = {};\n\n      if (this.maxAllowedNodes && this.maxAllowedNodes < 1) {\n        validationResults[\"maxAllowedNodes\"] = \"Must be at least 1.\";\n      } else if (this.maxAllowedNodes > batchQueue.maxNodes) {\n        validationResults[\"maxAllowedNodes\"] = \"Must be at most \".concat(batchQueue.maxNodes, \".\");\n      }\n\n      if (this.maxAllowedCores && this.maxAllowedCores < 1) {\n        validationResults[\"maxAllowedCores\"] = \"Must be at least 1.\";\n      } else if (this.maxAllowedCores > batchQueue.maxProcessors) {\n        validationResults[\"maxAllowedCores\"] = \"Must be at most \".concat(batchQueue.maxProcessors, \".\");\n      }\n\n      if (this.maxAllowedWalltime && this.maxAllowedWalltime < 1) {\n        validationResults[\"maxAllowedWalltime\"] = \"Must be at least 1.\";\n      } else if (this.maxAllowedWalltime > batchQueue.maxRunTime) {\n        validationResults[\"maxAllowedWalltime\"] = \"Must be at most \".concat(batchQueue.maxRunTime, \".\");\n      }\n\n      return validationResults;\n    }\n  }]);\n\n  return BatchQueueResourcePolicy;\n}(BaseModel);\n\nexport { BatchQueueResourcePolicy as default };",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/models/BatchQueueResourcePolicy.js"],"names":["BaseModel","FIELDS","BatchQueueResourcePolicy","data","batchQueue","validationResults","maxAllowedNodes","maxNodes","maxAllowedCores","maxProcessors","maxAllowedWalltime","maxRunTime"],"mappings":";;;;;AAAA,OAAOA,SAAP;AAEA,IAAMC,MAAM,GAAG,CACb,kBADa,EAEb,mBAFa,EAGb,wBAHa,EAIb,WAJa,EAKb,iBALa,EAMb,iBANa,EAOb,oBAPa,CAAf;;IAUqBC,wB;;;;;AACnB,sCAAuB;AAAA,QAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AAAA,iGACfF,MADe,EACPE,IADO;AAEtB;;;;6BAEQC,U,EAAY;AACnB,UAAIC,iBAAiB,GAAG,EAAxB;;AACA,UAAI,KAAKC,eAAL,IAAwB,KAAKA,eAAL,GAAuB,CAAnD,EAAsD;AACpDD,QAAAA,iBAAiB,CAAC,iBAAD,CAAjB,GAAuC,qBAAvC;AACD,OAFD,MAEO,IAAI,KAAKC,eAAL,GAAuBF,UAAU,CAACG,QAAtC,EAAgD;AACrDF,QAAAA,iBAAiB,CACf,iBADe,CAAjB,6BAEuBD,UAAU,CAACG,QAFlC;AAGD;;AACD,UAAI,KAAKC,eAAL,IAAwB,KAAKA,eAAL,GAAuB,CAAnD,EAAsD;AACpDH,QAAAA,iBAAiB,CAAC,iBAAD,CAAjB,GAAuC,qBAAvC;AACD,OAFD,MAEO,IAAI,KAAKG,eAAL,GAAuBJ,UAAU,CAACK,aAAtC,EAAqD;AAC1DJ,QAAAA,iBAAiB,CACf,iBADe,CAAjB,6BAEuBD,UAAU,CAACK,aAFlC;AAGD;;AACD,UAAI,KAAKC,kBAAL,IAA2B,KAAKA,kBAAL,GAA0B,CAAzD,EAA4D;AAC1DL,QAAAA,iBAAiB,CAAC,oBAAD,CAAjB,GAA0C,qBAA1C;AACD,OAFD,MAEO,IAAI,KAAKK,kBAAL,GAA0BN,UAAU,CAACO,UAAzC,EAAqD;AAC1DN,QAAAA,iBAAiB,CACf,oBADe,CAAjB,6BAEuBD,UAAU,CAACO,UAFlC;AAGD;;AACD,aAAON,iBAAP;AACD;;;;EA7BmDL,S;;SAAjCE,wB","sourcesContent":["import BaseModel from \"./BaseModel\";\n\nconst FIELDS = [\n  \"resourcePolicyId\",\n  \"computeResourceId\",\n  \"groupResourceProfileId\",\n  \"queuename\",\n  \"maxAllowedNodes\",\n  \"maxAllowedCores\",\n  \"maxAllowedWalltime\",\n];\n\nexport default class BatchQueueResourcePolicy extends BaseModel {\n  constructor(data = {}) {\n    super(FIELDS, data);\n  }\n\n  validate(batchQueue) {\n    let validationResults = {};\n    if (this.maxAllowedNodes && this.maxAllowedNodes < 1) {\n      validationResults[\"maxAllowedNodes\"] = \"Must be at least 1.\";\n    } else if (this.maxAllowedNodes > batchQueue.maxNodes) {\n      validationResults[\n        \"maxAllowedNodes\"\n      ] = `Must be at most ${batchQueue.maxNodes}.`;\n    }\n    if (this.maxAllowedCores && this.maxAllowedCores < 1) {\n      validationResults[\"maxAllowedCores\"] = \"Must be at least 1.\";\n    } else if (this.maxAllowedCores > batchQueue.maxProcessors) {\n      validationResults[\n        \"maxAllowedCores\"\n      ] = `Must be at most ${batchQueue.maxProcessors}.`;\n    }\n    if (this.maxAllowedWalltime && this.maxAllowedWalltime < 1) {\n      validationResults[\"maxAllowedWalltime\"] = \"Must be at least 1.\";\n    } else if (this.maxAllowedWalltime > batchQueue.maxRunTime) {\n      validationResults[\n        \"maxAllowedWalltime\"\n      ] = `Must be at most ${batchQueue.maxRunTime}.`;\n    }\n    return validationResults;\n  }\n}\n"]}]}