{"remainingRequest":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/thread-loader/dist/cjs.js!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/babel-loader/lib/index.js!/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/PaginationIterator.js","dependencies":[{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/PaginationIterator.js","mtime":1638641844323},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/cache-loader/dist/cjs.js","mtime":1638646228487},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/thread-loader/dist/cjs.js","mtime":1638646228889},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/babel-loader/lib/index.js","mtime":1638646225600},{"path":"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1638646227499}],"contextDependencies":[],"result":["import _classCallCheck from \"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/vanishing/git/airavata-django-portal/django_airavata/static/common/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport FetchUtils from \"./FetchUtils\";\n\nvar PaginationIterator =\n/*#__PURE__*/\nfunction () {\n  function PaginationIterator(pagedResponse) {\n    var resultType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, PaginationIterator);\n\n    this.resultType = resultType;\n    this.processResponse(pagedResponse);\n  }\n\n  _createClass(PaginationIterator, [{\n    key: \"next\",\n    value: function next() {\n      var _this = this;\n\n      return FetchUtils.get(this._next).then(function (json) {\n        return _this.processResponse(json);\n      });\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this._next != null;\n    }\n  }, {\n    key: \"previous\",\n    value: function previous() {\n      var _this2 = this;\n\n      return FetchUtils.get(this._previous).then(function (json) {\n        return _this2.processResponse(json);\n      });\n    }\n  }, {\n    key: \"hasPrevious\",\n    value: function hasPrevious() {\n      return this._previous != null;\n    }\n  }, {\n    key: \"processResponse\",\n    value: function processResponse(pagedResponse) {\n      var _this3 = this;\n\n      this._next = pagedResponse.next;\n      this._previous = pagedResponse.previous;\n\n      if (this.resultType) {\n        if (Array.isArray(pagedResponse.results)) {\n          this.results = pagedResponse.results.map(function (result) {\n            return new _this3.resultType(result);\n          });\n        } else {\n          this.results = new this.resultType(pagedResponse.results);\n        }\n      } else {\n        this.results = pagedResponse.results;\n      }\n\n      this.offset = pagedResponse.offset;\n      this.limit = pagedResponse.limit;\n      this.count = pagedResponse.count;\n      return this;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var results = [].concat(this.results);\n\n      while (this.hasNext()) {\n        results = results.concat(this.next().results);\n      }\n\n      return results;\n    }\n  }]);\n\n  return PaginationIterator;\n}();\n\nexport { PaginationIterator as default };",{"version":3,"sources":["/home/vanishing/git/airavata-django-portal/django_airavata/apps/api/static/django_airavata_api/js/utils/PaginationIterator.js"],"names":["FetchUtils","PaginationIterator","pagedResponse","resultType","processResponse","get","_next","then","json","_previous","next","previous","Array","isArray","results","map","result","offset","limit","count","concat","hasNext"],"mappings":";;AAAA,OAAOA,UAAP;;IAEqBC,kB;;;AACnB,8BAAYC,aAAZ,EAA8C;AAAA,QAAnBC,UAAmB,uEAAN,IAAM;;AAAA;;AAC5C,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,eAAL,CAAqBF,aAArB;AACD;;;;2BAEM;AAAA;;AACL,aAAOF,UAAU,CAACK,GAAX,CAAe,KAAKC,KAApB,EAA2BC,IAA3B,CAAgC,UAACC,IAAD;AAAA,eACrC,KAAI,CAACJ,eAAL,CAAqBI,IAArB,CADqC;AAAA,OAAhC,CAAP;AAGD;;;8BAES;AACR,aAAO,KAAKF,KAAL,IAAc,IAArB;AACD;;;+BAEU;AAAA;;AACT,aAAON,UAAU,CAACK,GAAX,CAAe,KAAKI,SAApB,EAA+BF,IAA/B,CAAoC,UAACC,IAAD;AAAA,eACzC,MAAI,CAACJ,eAAL,CAAqBI,IAArB,CADyC;AAAA,OAApC,CAAP;AAGD;;;kCAEa;AACZ,aAAO,KAAKC,SAAL,IAAkB,IAAzB;AACD;;;oCAEeP,a,EAAe;AAAA;;AAC7B,WAAKI,KAAL,GAAaJ,aAAa,CAACQ,IAA3B;AACA,WAAKD,SAAL,GAAiBP,aAAa,CAACS,QAA/B;;AACA,UAAI,KAAKR,UAAT,EAAqB;AACnB,YAAIS,KAAK,CAACC,OAAN,CAAcX,aAAa,CAACY,OAA5B,CAAJ,EAA0C;AACxC,eAAKA,OAAL,GAAeZ,aAAa,CAACY,OAAd,CAAsBC,GAAtB,CACb,UAACC,MAAD;AAAA,mBAAY,IAAI,MAAI,CAACb,UAAT,CAAoBa,MAApB,CAAZ;AAAA,WADa,CAAf;AAGD,SAJD,MAIO;AACL,eAAKF,OAAL,GAAe,IAAI,KAAKX,UAAT,CAAoBD,aAAa,CAACY,OAAlC,CAAf;AACD;AACF,OARD,MAQO;AACL,aAAKA,OAAL,GAAeZ,aAAa,CAACY,OAA7B;AACD;;AACD,WAAKG,MAAL,GAAcf,aAAa,CAACe,MAA5B;AACA,WAAKC,KAAL,GAAahB,aAAa,CAACgB,KAA3B;AACA,WAAKC,KAAL,GAAajB,aAAa,CAACiB,KAA3B;AACA,aAAO,IAAP;AACD;;;8BAES;AACR,UAAIL,OAAO,GAAG,GAAGM,MAAH,CAAU,KAAKN,OAAf,CAAd;;AACA,aAAO,KAAKO,OAAL,EAAP,EAAuB;AACrBP,QAAAA,OAAO,GAAGA,OAAO,CAACM,MAAR,CAAe,KAAKV,IAAL,GAAYI,OAA3B,CAAV;AACD;;AACD,aAAOA,OAAP;AACD;;;;;;SApDkBb,kB","sourcesContent":["import FetchUtils from \"./FetchUtils\";\n\nexport default class PaginationIterator {\n  constructor(pagedResponse, resultType = null) {\n    this.resultType = resultType;\n    this.processResponse(pagedResponse);\n  }\n\n  next() {\n    return FetchUtils.get(this._next).then((json) =>\n      this.processResponse(json)\n    );\n  }\n\n  hasNext() {\n    return this._next != null;\n  }\n\n  previous() {\n    return FetchUtils.get(this._previous).then((json) =>\n      this.processResponse(json)\n    );\n  }\n\n  hasPrevious() {\n    return this._previous != null;\n  }\n\n  processResponse(pagedResponse) {\n    this._next = pagedResponse.next;\n    this._previous = pagedResponse.previous;\n    if (this.resultType) {\n      if (Array.isArray(pagedResponse.results)) {\n        this.results = pagedResponse.results.map(\n          (result) => new this.resultType(result)\n        );\n      } else {\n        this.results = new this.resultType(pagedResponse.results);\n      }\n    } else {\n      this.results = pagedResponse.results;\n    }\n    this.offset = pagedResponse.offset;\n    this.limit = pagedResponse.limit;\n    this.count = pagedResponse.count;\n    return this;\n  }\n\n  toArray() {\n    let results = [].concat(this.results);\n    while (this.hasNext()) {\n      results = results.concat(this.next().results);\n    }\n    return results;\n  }\n}\n"]}]}