{"ast":null,"code":"var _jsxFileName = \"/home/vanishing/git/HCC-rnamake-frontend/src/pages/PDBSettings.jsx\",\n    _s = $RefreshSig$();\n\n//import * as React from 'react';\nimport React, { useState\n/*useCallback*/\n} from 'react';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport FileExplorer from '../components/FileExplorer'; //import {useDropzone} from 'react-dropzone';\n//import dragNDropBox from '../Graphics/dragNDropBox.png';\n//import styled from 'styled-components';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PDBSettings() {\n  _s();\n\n  const [cloudUpload, setCloudUpload] = useState(0);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"PDB file and Base Pairs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          accept: \"*\" //className={className.input}\n          ,\n          style: {\n            display: 'none'\n          },\n          id: \"raised-button-file\",\n          multiple: true,\n          type: \"file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"raised-button-file\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"raised\",\n            component: \"span\",\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 3\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            cloudUpload ? setCloudUpload(0) : setCloudUpload(1);\n          },\n          children: \"Cloud Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(FileExplorer, {\n          cloudUpload: cloudUpload,\n          setCloudUpload: setCloudUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n} //function MyDropline() {\n//  const onDrop = useCallback(acceptedFiles => {\n// Do something with the files\n//    return acceptedFiles;\n//  }, [])\n//  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n//  return (\n//    <div {...getRootProps()}>\n//      <img src = {dragNDropBox}/>\n//      <input {...getInputProps()} />\n//     {\n//       isDragActive ?\n//          <p></p> :\n//          <p></p>\n//      }\n//    </div>\n//  )\n//}\n//const FlexRow = styled.div`\n//margin-top: 83px;\n//margin-left: 135px;\n//display: flex;\n//align-items: flex-start;\n//min-width: 996px;\n//`;\n\n_s(PDBSettings, \"7Ituic/ZFiEYExhEocRKeRXOnxo=\");\n\n_c = PDBSettings;\n\nvar _c;\n\n$RefreshReg$(_c, \"PDBSettings\");","map":{"version":3,"sources":["/home/vanishing/git/HCC-rnamake-frontend/src/pages/PDBSettings.jsx"],"names":["React","useState","Typography","Grid","Button","FileExplorer","PDBSettings","cloudUpload","setCloudUpload","display"],"mappings":";;;AACA;AACA,OAAOA,KAAP,IAAgBC;AAAU;AAA1B,OAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,YAAP,MAAyB,4BAAzB,C,CACA;AACA;AACA;;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AAEpC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,CAAD,CAA9C;AAEA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAyB,MAAA,YAAY,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAmB,QAAA,EAAE,EAAE,CAAvB;AAAA,gCACA;AACE,UAAA,MAAM,EAAC,GADT,CAEE;AAFF;AAGE,UAAA,KAAK,EAAE;AAAEQ,YAAAA,OAAO,EAAE;AAAX,WAHT;AAIE,UAAA,EAAE,EAAC,oBAJL;AAKE,UAAA,QAAQ,MALV;AAME,UAAA,IAAI,EAAC;AANP;AAAA;AAAA;AAAA;AAAA,gBADA,eASR;AAAO,UAAA,OAAO,EAAC,oBAAf;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,QAAhB;AAAyB,YAAA,SAAS,EAAC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBATQ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eA0BE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAmB,QAAA,EAAE,EAAE,CAAvB;AAAA,+BACA,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,MAAM;AAACF,YAAAA,WAAW,GAAGC,cAAc,CAAC,CAAD,CAAjB,GAAsBA,cAAc,CAAC,CAAD,CAA/C;AAAmD,WAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cA1BF,eA+BE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAA,+BACE,QAAC,YAAD;AAAc,UAAA,WAAW,EAAED,WAA3B;AAAwC,UAAA,cAAc,EAAEC;AAAxD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD,C,CAED;AACA;AACI;AACJ;AACA;AACA;AAEA;AACA;AACA;AACA;AACC;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;GA1EwBF,W;;KAAAA,W","sourcesContent":["\n//import * as React from 'react';\nimport React, { useState, /*useCallback*/ } from 'react';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport FileExplorer from '../components/FileExplorer'\n//import {useDropzone} from 'react-dropzone';\n//import dragNDropBox from '../Graphics/dragNDropBox.png';\n//import styled from 'styled-components';\n\nexport default function PDBSettings() {\n\n  const [cloudUpload, setCloudUpload] = useState(0);\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" gutterBottom>\n        PDB file and Base Pairs\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={6}>\n        <input\n          accept=\"*\"\n          //className={className.input}\n          style={{ display: 'none' }}\n          id=\"raised-button-file\"\n          multiple\n          type=\"file\"\n        />\n<label htmlFor=\"raised-button-file\">\n  <Button variant=\"raised\" component=\"span\" >\n    Upload\n  </Button>\n  </label> \n          {/* This implementation of the drag'n'drop feature is jank. I'll fix it later after the page works properly. */}\n         {/* <FlexRow>\n            <span>\n              Submission requires a PDB containing RNA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n            <br></br>\n              that has at least 2 basepair ends &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n            </span>\n              <MyDropline></MyDropline>\n          </FlexRow>\n         */}\n        </Grid>\n        <Grid item xs={12} md={6}>\n        <Button onClick={() => {cloudUpload ? setCloudUpload(0): setCloudUpload(1)}}>\n            Cloud Upload\n          </Button>\n        </Grid>\n        <Grid item xs={12}>\n          <FileExplorer cloudUpload={cloudUpload} setCloudUpload={setCloudUpload} />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\n//function MyDropline() {\n//  const onDrop = useCallback(acceptedFiles => {\n    // Do something with the files\n//    return acceptedFiles;\n//  }, [])\n//  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n//  return (\n//    <div {...getRootProps()}>\n//      <img src = {dragNDropBox}/>\n//      <input {...getInputProps()} />\n //     {\n //       isDragActive ?\n//          <p></p> :\n//          <p></p>\n//      }\n//    </div>\n//  )\n//}\n\n//const FlexRow = styled.div`\n//margin-top: 83px;\n//margin-left: 135px;\n//display: flex;\n//align-items: flex-start;\n//min-width: 996px;\n//`;\n"]},"metadata":{},"sourceType":"module"}